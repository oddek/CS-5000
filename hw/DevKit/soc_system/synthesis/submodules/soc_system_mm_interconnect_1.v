// soc_system_mm_interconnect_1.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 22.1 922

`timescale 1 ps / 1 ps
module soc_system_mm_interconnect_1 (
		output wire [7:0]   axi_conduit_merger_0_altera_axi_slave_awid,    //   axi_conduit_merger_0_altera_axi_slave.awid
		output wire [31:0]  axi_conduit_merger_0_altera_axi_slave_awaddr,  //                                        .awaddr
		output wire [3:0]   axi_conduit_merger_0_altera_axi_slave_awlen,   //                                        .awlen
		output wire [2:0]   axi_conduit_merger_0_altera_axi_slave_awsize,  //                                        .awsize
		output wire [1:0]   axi_conduit_merger_0_altera_axi_slave_awburst, //                                        .awburst
		output wire [1:0]   axi_conduit_merger_0_altera_axi_slave_awlock,  //                                        .awlock
		output wire [3:0]   axi_conduit_merger_0_altera_axi_slave_awcache, //                                        .awcache
		output wire [2:0]   axi_conduit_merger_0_altera_axi_slave_awprot,  //                                        .awprot
		output wire [4:0]   axi_conduit_merger_0_altera_axi_slave_awuser,  //                                        .awuser
		output wire         axi_conduit_merger_0_altera_axi_slave_awvalid, //                                        .awvalid
		input  wire         axi_conduit_merger_0_altera_axi_slave_awready, //                                        .awready
		output wire [7:0]   axi_conduit_merger_0_altera_axi_slave_wid,     //                                        .wid
		output wire [127:0] axi_conduit_merger_0_altera_axi_slave_wdata,   //                                        .wdata
		output wire [15:0]  axi_conduit_merger_0_altera_axi_slave_wstrb,   //                                        .wstrb
		output wire         axi_conduit_merger_0_altera_axi_slave_wlast,   //                                        .wlast
		output wire         axi_conduit_merger_0_altera_axi_slave_wvalid,  //                                        .wvalid
		input  wire         axi_conduit_merger_0_altera_axi_slave_wready,  //                                        .wready
		input  wire [7:0]   axi_conduit_merger_0_altera_axi_slave_bid,     //                                        .bid
		input  wire [1:0]   axi_conduit_merger_0_altera_axi_slave_bresp,   //                                        .bresp
		input  wire         axi_conduit_merger_0_altera_axi_slave_bvalid,  //                                        .bvalid
		output wire         axi_conduit_merger_0_altera_axi_slave_bready,  //                                        .bready
		output wire [7:0]   axi_conduit_merger_0_altera_axi_slave_arid,    //                                        .arid
		output wire [31:0]  axi_conduit_merger_0_altera_axi_slave_araddr,  //                                        .araddr
		output wire [3:0]   axi_conduit_merger_0_altera_axi_slave_arlen,   //                                        .arlen
		output wire [2:0]   axi_conduit_merger_0_altera_axi_slave_arsize,  //                                        .arsize
		output wire [1:0]   axi_conduit_merger_0_altera_axi_slave_arburst, //                                        .arburst
		output wire [1:0]   axi_conduit_merger_0_altera_axi_slave_arlock,  //                                        .arlock
		output wire [3:0]   axi_conduit_merger_0_altera_axi_slave_arcache, //                                        .arcache
		output wire [2:0]   axi_conduit_merger_0_altera_axi_slave_arprot,  //                                        .arprot
		output wire [4:0]   axi_conduit_merger_0_altera_axi_slave_aruser,  //                                        .aruser
		output wire         axi_conduit_merger_0_altera_axi_slave_arvalid, //                                        .arvalid
		input  wire         axi_conduit_merger_0_altera_axi_slave_arready, //                                        .arready
		input  wire [7:0]   axi_conduit_merger_0_altera_axi_slave_rid,     //                                        .rid
		input  wire [127:0] axi_conduit_merger_0_altera_axi_slave_rdata,   //                                        .rdata
		input  wire [1:0]   axi_conduit_merger_0_altera_axi_slave_rresp,   //                                        .rresp
		input  wire         axi_conduit_merger_0_altera_axi_slave_rlast,   //                                        .rlast
		input  wire         axi_conduit_merger_0_altera_axi_slave_rvalid,  //                                        .rvalid
		output wire         axi_conduit_merger_0_altera_axi_slave_rready,  //                                        .rready
		input  wire         clk_100m_clk_clk,                              //                            clk_100m_clk.clk
		input  wire         DataMover_0_reset_reset_bridge_in_reset_reset, // DataMover_0_reset_reset_bridge_in_reset.reset
		input  wire [31:0]  DataMover_0_avalon_master_address,             //               DataMover_0_avalon_master.address
		output wire         DataMover_0_avalon_master_waitrequest,         //                                        .waitrequest
		input  wire [7:0]   DataMover_0_avalon_master_burstcount,          //                                        .burstcount
		input  wire [7:0]   DataMover_0_avalon_master_byteenable,          //                                        .byteenable
		input  wire         DataMover_0_avalon_master_read,                //                                        .read
		output wire [63:0]  DataMover_0_avalon_master_readdata,            //                                        .readdata
		output wire         DataMover_0_avalon_master_readdatavalid,       //                                        .readdatavalid
		input  wire         DataMover_0_avalon_master_write,               //                                        .write
		input  wire [63:0]  DataMover_0_avalon_master_writedata            //                                        .writedata
	);

	wire          datamover_0_avalon_master_translator_avalon_universal_master_0_waitrequest;   // DataMover_0_avalon_master_agent:av_waitrequest -> DataMover_0_avalon_master_translator:uav_waitrequest
	wire   [63:0] datamover_0_avalon_master_translator_avalon_universal_master_0_readdata;      // DataMover_0_avalon_master_agent:av_readdata -> DataMover_0_avalon_master_translator:uav_readdata
	wire          datamover_0_avalon_master_translator_avalon_universal_master_0_debugaccess;   // DataMover_0_avalon_master_translator:uav_debugaccess -> DataMover_0_avalon_master_agent:av_debugaccess
	wire   [31:0] datamover_0_avalon_master_translator_avalon_universal_master_0_address;       // DataMover_0_avalon_master_translator:uav_address -> DataMover_0_avalon_master_agent:av_address
	wire          datamover_0_avalon_master_translator_avalon_universal_master_0_read;          // DataMover_0_avalon_master_translator:uav_read -> DataMover_0_avalon_master_agent:av_read
	wire    [7:0] datamover_0_avalon_master_translator_avalon_universal_master_0_byteenable;    // DataMover_0_avalon_master_translator:uav_byteenable -> DataMover_0_avalon_master_agent:av_byteenable
	wire          datamover_0_avalon_master_translator_avalon_universal_master_0_readdatavalid; // DataMover_0_avalon_master_agent:av_readdatavalid -> DataMover_0_avalon_master_translator:uav_readdatavalid
	wire          datamover_0_avalon_master_translator_avalon_universal_master_0_lock;          // DataMover_0_avalon_master_translator:uav_lock -> DataMover_0_avalon_master_agent:av_lock
	wire          datamover_0_avalon_master_translator_avalon_universal_master_0_write;         // DataMover_0_avalon_master_translator:uav_write -> DataMover_0_avalon_master_agent:av_write
	wire   [63:0] datamover_0_avalon_master_translator_avalon_universal_master_0_writedata;     // DataMover_0_avalon_master_translator:uav_writedata -> DataMover_0_avalon_master_agent:av_writedata
	wire   [10:0] datamover_0_avalon_master_translator_avalon_universal_master_0_burstcount;    // DataMover_0_avalon_master_translator:uav_burstcount -> DataMover_0_avalon_master_agent:av_burstcount
	wire          datamover_0_avalon_master_agent_cp_valid;                                     // DataMover_0_avalon_master_agent:cp_valid -> router:sink_valid
	wire  [158:0] datamover_0_avalon_master_agent_cp_data;                                      // DataMover_0_avalon_master_agent:cp_data -> router:sink_data
	wire          datamover_0_avalon_master_agent_cp_ready;                                     // router:sink_ready -> DataMover_0_avalon_master_agent:cp_ready
	wire          datamover_0_avalon_master_agent_cp_startofpacket;                             // DataMover_0_avalon_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          datamover_0_avalon_master_agent_cp_endofpacket;                               // DataMover_0_avalon_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                             // router:src_valid -> DataMover_0_avalon_master_limiter:cmd_sink_valid
	wire  [158:0] router_src_data;                                                              // router:src_data -> DataMover_0_avalon_master_limiter:cmd_sink_data
	wire          router_src_ready;                                                             // DataMover_0_avalon_master_limiter:cmd_sink_ready -> router:src_ready
	wire    [1:0] router_src_channel;                                                           // router:src_channel -> DataMover_0_avalon_master_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                     // router:src_startofpacket -> DataMover_0_avalon_master_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                       // router:src_endofpacket -> DataMover_0_avalon_master_limiter:cmd_sink_endofpacket
	wire          datamover_0_avalon_master_limiter_rsp_src_valid;                              // DataMover_0_avalon_master_limiter:rsp_src_valid -> DataMover_0_avalon_master_agent:rp_valid
	wire  [158:0] datamover_0_avalon_master_limiter_rsp_src_data;                               // DataMover_0_avalon_master_limiter:rsp_src_data -> DataMover_0_avalon_master_agent:rp_data
	wire          datamover_0_avalon_master_limiter_rsp_src_ready;                              // DataMover_0_avalon_master_agent:rp_ready -> DataMover_0_avalon_master_limiter:rsp_src_ready
	wire    [1:0] datamover_0_avalon_master_limiter_rsp_src_channel;                            // DataMover_0_avalon_master_limiter:rsp_src_channel -> DataMover_0_avalon_master_agent:rp_channel
	wire          datamover_0_avalon_master_limiter_rsp_src_startofpacket;                      // DataMover_0_avalon_master_limiter:rsp_src_startofpacket -> DataMover_0_avalon_master_agent:rp_startofpacket
	wire          datamover_0_avalon_master_limiter_rsp_src_endofpacket;                        // DataMover_0_avalon_master_limiter:rsp_src_endofpacket -> DataMover_0_avalon_master_agent:rp_endofpacket
	wire          router_001_src_valid;                                                         // router_001:src_valid -> axi_conduit_merger_0_altera_axi_slave_wr_rsp_width_adapter:in_valid
	wire  [230:0] router_001_src_data;                                                          // router_001:src_data -> axi_conduit_merger_0_altera_axi_slave_wr_rsp_width_adapter:in_data
	wire          router_001_src_ready;                                                         // axi_conduit_merger_0_altera_axi_slave_wr_rsp_width_adapter:in_ready -> router_001:src_ready
	wire    [1:0] router_001_src_channel;                                                       // router_001:src_channel -> axi_conduit_merger_0_altera_axi_slave_wr_rsp_width_adapter:in_channel
	wire          router_001_src_startofpacket;                                                 // router_001:src_startofpacket -> axi_conduit_merger_0_altera_axi_slave_wr_rsp_width_adapter:in_startofpacket
	wire          router_001_src_endofpacket;                                                   // router_001:src_endofpacket -> axi_conduit_merger_0_altera_axi_slave_wr_rsp_width_adapter:in_endofpacket
	wire          axi_conduit_merger_0_altera_axi_slave_wr_rsp_width_adapter_src_valid;         // axi_conduit_merger_0_altera_axi_slave_wr_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [158:0] axi_conduit_merger_0_altera_axi_slave_wr_rsp_width_adapter_src_data;          // axi_conduit_merger_0_altera_axi_slave_wr_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          axi_conduit_merger_0_altera_axi_slave_wr_rsp_width_adapter_src_ready;         // rsp_demux:sink_ready -> axi_conduit_merger_0_altera_axi_slave_wr_rsp_width_adapter:out_ready
	wire    [1:0] axi_conduit_merger_0_altera_axi_slave_wr_rsp_width_adapter_src_channel;       // axi_conduit_merger_0_altera_axi_slave_wr_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          axi_conduit_merger_0_altera_axi_slave_wr_rsp_width_adapter_src_startofpacket; // axi_conduit_merger_0_altera_axi_slave_wr_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          axi_conduit_merger_0_altera_axi_slave_wr_rsp_width_adapter_src_endofpacket;   // axi_conduit_merger_0_altera_axi_slave_wr_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_002_src_valid;                                                         // router_002:src_valid -> axi_conduit_merger_0_altera_axi_slave_rd_rsp_width_adapter:in_valid
	wire  [230:0] router_002_src_data;                                                          // router_002:src_data -> axi_conduit_merger_0_altera_axi_slave_rd_rsp_width_adapter:in_data
	wire          router_002_src_ready;                                                         // axi_conduit_merger_0_altera_axi_slave_rd_rsp_width_adapter:in_ready -> router_002:src_ready
	wire    [1:0] router_002_src_channel;                                                       // router_002:src_channel -> axi_conduit_merger_0_altera_axi_slave_rd_rsp_width_adapter:in_channel
	wire          router_002_src_startofpacket;                                                 // router_002:src_startofpacket -> axi_conduit_merger_0_altera_axi_slave_rd_rsp_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                                   // router_002:src_endofpacket -> axi_conduit_merger_0_altera_axi_slave_rd_rsp_width_adapter:in_endofpacket
	wire          axi_conduit_merger_0_altera_axi_slave_rd_rsp_width_adapter_src_valid;         // axi_conduit_merger_0_altera_axi_slave_rd_rsp_width_adapter:out_valid -> rsp_demux_001:sink_valid
	wire  [158:0] axi_conduit_merger_0_altera_axi_slave_rd_rsp_width_adapter_src_data;          // axi_conduit_merger_0_altera_axi_slave_rd_rsp_width_adapter:out_data -> rsp_demux_001:sink_data
	wire          axi_conduit_merger_0_altera_axi_slave_rd_rsp_width_adapter_src_ready;         // rsp_demux_001:sink_ready -> axi_conduit_merger_0_altera_axi_slave_rd_rsp_width_adapter:out_ready
	wire    [1:0] axi_conduit_merger_0_altera_axi_slave_rd_rsp_width_adapter_src_channel;       // axi_conduit_merger_0_altera_axi_slave_rd_rsp_width_adapter:out_channel -> rsp_demux_001:sink_channel
	wire          axi_conduit_merger_0_altera_axi_slave_rd_rsp_width_adapter_src_startofpacket; // axi_conduit_merger_0_altera_axi_slave_rd_rsp_width_adapter:out_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          axi_conduit_merger_0_altera_axi_slave_rd_rsp_width_adapter_src_endofpacket;   // axi_conduit_merger_0_altera_axi_slave_rd_rsp_width_adapter:out_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          cmd_mux_src_valid;                                                            // cmd_mux:src_valid -> axi_conduit_merger_0_altera_axi_slave_wr_cmd_width_adapter:in_valid
	wire  [158:0] cmd_mux_src_data;                                                             // cmd_mux:src_data -> axi_conduit_merger_0_altera_axi_slave_wr_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                            // axi_conduit_merger_0_altera_axi_slave_wr_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [1:0] cmd_mux_src_channel;                                                          // cmd_mux:src_channel -> axi_conduit_merger_0_altera_axi_slave_wr_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                                    // cmd_mux:src_startofpacket -> axi_conduit_merger_0_altera_axi_slave_wr_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                                      // cmd_mux:src_endofpacket -> axi_conduit_merger_0_altera_axi_slave_wr_cmd_width_adapter:in_endofpacket
	wire          axi_conduit_merger_0_altera_axi_slave_wr_cmd_width_adapter_src_valid;         // axi_conduit_merger_0_altera_axi_slave_wr_cmd_width_adapter:out_valid -> axi_conduit_merger_0_altera_axi_slave_wr_burst_adapter:sink0_valid
	wire  [230:0] axi_conduit_merger_0_altera_axi_slave_wr_cmd_width_adapter_src_data;          // axi_conduit_merger_0_altera_axi_slave_wr_cmd_width_adapter:out_data -> axi_conduit_merger_0_altera_axi_slave_wr_burst_adapter:sink0_data
	wire          axi_conduit_merger_0_altera_axi_slave_wr_cmd_width_adapter_src_ready;         // axi_conduit_merger_0_altera_axi_slave_wr_burst_adapter:sink0_ready -> axi_conduit_merger_0_altera_axi_slave_wr_cmd_width_adapter:out_ready
	wire    [1:0] axi_conduit_merger_0_altera_axi_slave_wr_cmd_width_adapter_src_channel;       // axi_conduit_merger_0_altera_axi_slave_wr_cmd_width_adapter:out_channel -> axi_conduit_merger_0_altera_axi_slave_wr_burst_adapter:sink0_channel
	wire          axi_conduit_merger_0_altera_axi_slave_wr_cmd_width_adapter_src_startofpacket; // axi_conduit_merger_0_altera_axi_slave_wr_cmd_width_adapter:out_startofpacket -> axi_conduit_merger_0_altera_axi_slave_wr_burst_adapter:sink0_startofpacket
	wire          axi_conduit_merger_0_altera_axi_slave_wr_cmd_width_adapter_src_endofpacket;   // axi_conduit_merger_0_altera_axi_slave_wr_cmd_width_adapter:out_endofpacket -> axi_conduit_merger_0_altera_axi_slave_wr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_001_src_valid;                                                        // cmd_mux_001:src_valid -> axi_conduit_merger_0_altera_axi_slave_rd_cmd_width_adapter:in_valid
	wire  [158:0] cmd_mux_001_src_data;                                                         // cmd_mux_001:src_data -> axi_conduit_merger_0_altera_axi_slave_rd_cmd_width_adapter:in_data
	wire          cmd_mux_001_src_ready;                                                        // axi_conduit_merger_0_altera_axi_slave_rd_cmd_width_adapter:in_ready -> cmd_mux_001:src_ready
	wire    [1:0] cmd_mux_001_src_channel;                                                      // cmd_mux_001:src_channel -> axi_conduit_merger_0_altera_axi_slave_rd_cmd_width_adapter:in_channel
	wire          cmd_mux_001_src_startofpacket;                                                // cmd_mux_001:src_startofpacket -> axi_conduit_merger_0_altera_axi_slave_rd_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                  // cmd_mux_001:src_endofpacket -> axi_conduit_merger_0_altera_axi_slave_rd_cmd_width_adapter:in_endofpacket
	wire          axi_conduit_merger_0_altera_axi_slave_rd_cmd_width_adapter_src_valid;         // axi_conduit_merger_0_altera_axi_slave_rd_cmd_width_adapter:out_valid -> axi_conduit_merger_0_altera_axi_slave_rd_burst_adapter:sink0_valid
	wire  [230:0] axi_conduit_merger_0_altera_axi_slave_rd_cmd_width_adapter_src_data;          // axi_conduit_merger_0_altera_axi_slave_rd_cmd_width_adapter:out_data -> axi_conduit_merger_0_altera_axi_slave_rd_burst_adapter:sink0_data
	wire          axi_conduit_merger_0_altera_axi_slave_rd_cmd_width_adapter_src_ready;         // axi_conduit_merger_0_altera_axi_slave_rd_burst_adapter:sink0_ready -> axi_conduit_merger_0_altera_axi_slave_rd_cmd_width_adapter:out_ready
	wire    [1:0] axi_conduit_merger_0_altera_axi_slave_rd_cmd_width_adapter_src_channel;       // axi_conduit_merger_0_altera_axi_slave_rd_cmd_width_adapter:out_channel -> axi_conduit_merger_0_altera_axi_slave_rd_burst_adapter:sink0_channel
	wire          axi_conduit_merger_0_altera_axi_slave_rd_cmd_width_adapter_src_startofpacket; // axi_conduit_merger_0_altera_axi_slave_rd_cmd_width_adapter:out_startofpacket -> axi_conduit_merger_0_altera_axi_slave_rd_burst_adapter:sink0_startofpacket
	wire          axi_conduit_merger_0_altera_axi_slave_rd_cmd_width_adapter_src_endofpacket;   // axi_conduit_merger_0_altera_axi_slave_rd_cmd_width_adapter:out_endofpacket -> axi_conduit_merger_0_altera_axi_slave_rd_burst_adapter:sink0_endofpacket
	wire    [0:0] datamover_0_avalon_master_limiter_cmd_src_valid;                              // DataMover_0_avalon_master_limiter:cmd_src_valid -> limiter_pipeline:in_valid
	wire  [158:0] datamover_0_avalon_master_limiter_cmd_src_data;                               // DataMover_0_avalon_master_limiter:cmd_src_data -> limiter_pipeline:in_data
	wire          datamover_0_avalon_master_limiter_cmd_src_ready;                              // limiter_pipeline:in_ready -> DataMover_0_avalon_master_limiter:cmd_src_ready
	wire    [1:0] datamover_0_avalon_master_limiter_cmd_src_channel;                            // DataMover_0_avalon_master_limiter:cmd_src_channel -> limiter_pipeline:in_channel
	wire          datamover_0_avalon_master_limiter_cmd_src_startofpacket;                      // DataMover_0_avalon_master_limiter:cmd_src_startofpacket -> limiter_pipeline:in_startofpacket
	wire          datamover_0_avalon_master_limiter_cmd_src_endofpacket;                        // DataMover_0_avalon_master_limiter:cmd_src_endofpacket -> limiter_pipeline:in_endofpacket
	wire          limiter_pipeline_source0_valid;                                               // limiter_pipeline:out_valid -> cmd_demux:sink_valid
	wire  [158:0] limiter_pipeline_source0_data;                                                // limiter_pipeline:out_data -> cmd_demux:sink_data
	wire          limiter_pipeline_source0_ready;                                               // cmd_demux:sink_ready -> limiter_pipeline:out_ready
	wire    [1:0] limiter_pipeline_source0_channel;                                             // limiter_pipeline:out_channel -> cmd_demux:sink_channel
	wire          limiter_pipeline_source0_startofpacket;                                       // limiter_pipeline:out_startofpacket -> cmd_demux:sink_startofpacket
	wire          limiter_pipeline_source0_endofpacket;                                         // limiter_pipeline:out_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                            // rsp_mux:src_valid -> limiter_pipeline_001:in_valid
	wire  [158:0] rsp_mux_src_data;                                                             // rsp_mux:src_data -> limiter_pipeline_001:in_data
	wire          rsp_mux_src_ready;                                                            // limiter_pipeline_001:in_ready -> rsp_mux:src_ready
	wire    [1:0] rsp_mux_src_channel;                                                          // rsp_mux:src_channel -> limiter_pipeline_001:in_channel
	wire          rsp_mux_src_startofpacket;                                                    // rsp_mux:src_startofpacket -> limiter_pipeline_001:in_startofpacket
	wire          rsp_mux_src_endofpacket;                                                      // rsp_mux:src_endofpacket -> limiter_pipeline_001:in_endofpacket
	wire          limiter_pipeline_001_source0_valid;                                           // limiter_pipeline_001:out_valid -> DataMover_0_avalon_master_limiter:rsp_sink_valid
	wire  [158:0] limiter_pipeline_001_source0_data;                                            // limiter_pipeline_001:out_data -> DataMover_0_avalon_master_limiter:rsp_sink_data
	wire          limiter_pipeline_001_source0_ready;                                           // DataMover_0_avalon_master_limiter:rsp_sink_ready -> limiter_pipeline_001:out_ready
	wire    [1:0] limiter_pipeline_001_source0_channel;                                         // limiter_pipeline_001:out_channel -> DataMover_0_avalon_master_limiter:rsp_sink_channel
	wire          limiter_pipeline_001_source0_startofpacket;                                   // limiter_pipeline_001:out_startofpacket -> DataMover_0_avalon_master_limiter:rsp_sink_startofpacket
	wire          limiter_pipeline_001_source0_endofpacket;                                     // limiter_pipeline_001:out_endofpacket -> DataMover_0_avalon_master_limiter:rsp_sink_endofpacket
	wire          axi_conduit_merger_0_altera_axi_slave_wr_burst_adapter_source0_valid;         // axi_conduit_merger_0_altera_axi_slave_wr_burst_adapter:source0_valid -> agent_pipeline:in_valid
	wire  [230:0] axi_conduit_merger_0_altera_axi_slave_wr_burst_adapter_source0_data;          // axi_conduit_merger_0_altera_axi_slave_wr_burst_adapter:source0_data -> agent_pipeline:in_data
	wire          axi_conduit_merger_0_altera_axi_slave_wr_burst_adapter_source0_ready;         // agent_pipeline:in_ready -> axi_conduit_merger_0_altera_axi_slave_wr_burst_adapter:source0_ready
	wire    [1:0] axi_conduit_merger_0_altera_axi_slave_wr_burst_adapter_source0_channel;       // axi_conduit_merger_0_altera_axi_slave_wr_burst_adapter:source0_channel -> agent_pipeline:in_channel
	wire          axi_conduit_merger_0_altera_axi_slave_wr_burst_adapter_source0_startofpacket; // axi_conduit_merger_0_altera_axi_slave_wr_burst_adapter:source0_startofpacket -> agent_pipeline:in_startofpacket
	wire          axi_conduit_merger_0_altera_axi_slave_wr_burst_adapter_source0_endofpacket;   // axi_conduit_merger_0_altera_axi_slave_wr_burst_adapter:source0_endofpacket -> agent_pipeline:in_endofpacket
	wire          agent_pipeline_source0_valid;                                                 // agent_pipeline:out_valid -> axi_conduit_merger_0_altera_axi_slave_agent:write_cp_valid
	wire  [230:0] agent_pipeline_source0_data;                                                  // agent_pipeline:out_data -> axi_conduit_merger_0_altera_axi_slave_agent:write_cp_data
	wire          agent_pipeline_source0_ready;                                                 // axi_conduit_merger_0_altera_axi_slave_agent:write_cp_ready -> agent_pipeline:out_ready
	wire    [1:0] agent_pipeline_source0_channel;                                               // agent_pipeline:out_channel -> axi_conduit_merger_0_altera_axi_slave_agent:write_cp_channel
	wire          agent_pipeline_source0_startofpacket;                                         // agent_pipeline:out_startofpacket -> axi_conduit_merger_0_altera_axi_slave_agent:write_cp_startofpacket
	wire          agent_pipeline_source0_endofpacket;                                           // agent_pipeline:out_endofpacket -> axi_conduit_merger_0_altera_axi_slave_agent:write_cp_endofpacket
	wire          axi_conduit_merger_0_altera_axi_slave_rd_burst_adapter_source0_valid;         // axi_conduit_merger_0_altera_axi_slave_rd_burst_adapter:source0_valid -> agent_pipeline_001:in_valid
	wire  [230:0] axi_conduit_merger_0_altera_axi_slave_rd_burst_adapter_source0_data;          // axi_conduit_merger_0_altera_axi_slave_rd_burst_adapter:source0_data -> agent_pipeline_001:in_data
	wire          axi_conduit_merger_0_altera_axi_slave_rd_burst_adapter_source0_ready;         // agent_pipeline_001:in_ready -> axi_conduit_merger_0_altera_axi_slave_rd_burst_adapter:source0_ready
	wire    [1:0] axi_conduit_merger_0_altera_axi_slave_rd_burst_adapter_source0_channel;       // axi_conduit_merger_0_altera_axi_slave_rd_burst_adapter:source0_channel -> agent_pipeline_001:in_channel
	wire          axi_conduit_merger_0_altera_axi_slave_rd_burst_adapter_source0_startofpacket; // axi_conduit_merger_0_altera_axi_slave_rd_burst_adapter:source0_startofpacket -> agent_pipeline_001:in_startofpacket
	wire          axi_conduit_merger_0_altera_axi_slave_rd_burst_adapter_source0_endofpacket;   // axi_conduit_merger_0_altera_axi_slave_rd_burst_adapter:source0_endofpacket -> agent_pipeline_001:in_endofpacket
	wire          agent_pipeline_001_source0_valid;                                             // agent_pipeline_001:out_valid -> axi_conduit_merger_0_altera_axi_slave_agent:read_cp_valid
	wire  [230:0] agent_pipeline_001_source0_data;                                              // agent_pipeline_001:out_data -> axi_conduit_merger_0_altera_axi_slave_agent:read_cp_data
	wire          agent_pipeline_001_source0_ready;                                             // axi_conduit_merger_0_altera_axi_slave_agent:read_cp_ready -> agent_pipeline_001:out_ready
	wire    [1:0] agent_pipeline_001_source0_channel;                                           // agent_pipeline_001:out_channel -> axi_conduit_merger_0_altera_axi_slave_agent:read_cp_channel
	wire          agent_pipeline_001_source0_startofpacket;                                     // agent_pipeline_001:out_startofpacket -> axi_conduit_merger_0_altera_axi_slave_agent:read_cp_startofpacket
	wire          agent_pipeline_001_source0_endofpacket;                                       // agent_pipeline_001:out_endofpacket -> axi_conduit_merger_0_altera_axi_slave_agent:read_cp_endofpacket
	wire          axi_conduit_merger_0_altera_axi_slave_agent_write_rp_valid;                   // axi_conduit_merger_0_altera_axi_slave_agent:write_rp_valid -> agent_pipeline_002:in_valid
	wire  [230:0] axi_conduit_merger_0_altera_axi_slave_agent_write_rp_data;                    // axi_conduit_merger_0_altera_axi_slave_agent:write_rp_data -> agent_pipeline_002:in_data
	wire          axi_conduit_merger_0_altera_axi_slave_agent_write_rp_ready;                   // agent_pipeline_002:in_ready -> axi_conduit_merger_0_altera_axi_slave_agent:write_rp_ready
	wire          axi_conduit_merger_0_altera_axi_slave_agent_write_rp_startofpacket;           // axi_conduit_merger_0_altera_axi_slave_agent:write_rp_startofpacket -> agent_pipeline_002:in_startofpacket
	wire          axi_conduit_merger_0_altera_axi_slave_agent_write_rp_endofpacket;             // axi_conduit_merger_0_altera_axi_slave_agent:write_rp_endofpacket -> agent_pipeline_002:in_endofpacket
	wire          agent_pipeline_002_source0_valid;                                             // agent_pipeline_002:out_valid -> router_001:sink_valid
	wire  [230:0] agent_pipeline_002_source0_data;                                              // agent_pipeline_002:out_data -> router_001:sink_data
	wire          agent_pipeline_002_source0_ready;                                             // router_001:sink_ready -> agent_pipeline_002:out_ready
	wire          agent_pipeline_002_source0_startofpacket;                                     // agent_pipeline_002:out_startofpacket -> router_001:sink_startofpacket
	wire          agent_pipeline_002_source0_endofpacket;                                       // agent_pipeline_002:out_endofpacket -> router_001:sink_endofpacket
	wire          axi_conduit_merger_0_altera_axi_slave_agent_read_rp_valid;                    // axi_conduit_merger_0_altera_axi_slave_agent:read_rp_valid -> agent_pipeline_003:in_valid
	wire  [230:0] axi_conduit_merger_0_altera_axi_slave_agent_read_rp_data;                     // axi_conduit_merger_0_altera_axi_slave_agent:read_rp_data -> agent_pipeline_003:in_data
	wire          axi_conduit_merger_0_altera_axi_slave_agent_read_rp_ready;                    // agent_pipeline_003:in_ready -> axi_conduit_merger_0_altera_axi_slave_agent:read_rp_ready
	wire          axi_conduit_merger_0_altera_axi_slave_agent_read_rp_startofpacket;            // axi_conduit_merger_0_altera_axi_slave_agent:read_rp_startofpacket -> agent_pipeline_003:in_startofpacket
	wire          axi_conduit_merger_0_altera_axi_slave_agent_read_rp_endofpacket;              // axi_conduit_merger_0_altera_axi_slave_agent:read_rp_endofpacket -> agent_pipeline_003:in_endofpacket
	wire          agent_pipeline_003_source0_valid;                                             // agent_pipeline_003:out_valid -> router_002:sink_valid
	wire  [230:0] agent_pipeline_003_source0_data;                                              // agent_pipeline_003:out_data -> router_002:sink_data
	wire          agent_pipeline_003_source0_ready;                                             // router_002:sink_ready -> agent_pipeline_003:out_ready
	wire          agent_pipeline_003_source0_startofpacket;                                     // agent_pipeline_003:out_startofpacket -> router_002:sink_startofpacket
	wire          agent_pipeline_003_source0_endofpacket;                                       // agent_pipeline_003:out_endofpacket -> router_002:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                         // cmd_demux:src0_valid -> mux_pipeline:in_valid
	wire  [158:0] cmd_demux_src0_data;                                                          // cmd_demux:src0_data -> mux_pipeline:in_data
	wire          cmd_demux_src0_ready;                                                         // mux_pipeline:in_ready -> cmd_demux:src0_ready
	wire    [1:0] cmd_demux_src0_channel;                                                       // cmd_demux:src0_channel -> mux_pipeline:in_channel
	wire          cmd_demux_src0_startofpacket;                                                 // cmd_demux:src0_startofpacket -> mux_pipeline:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                   // cmd_demux:src0_endofpacket -> mux_pipeline:in_endofpacket
	wire          mux_pipeline_source0_valid;                                                   // mux_pipeline:out_valid -> cmd_mux:sink0_valid
	wire  [158:0] mux_pipeline_source0_data;                                                    // mux_pipeline:out_data -> cmd_mux:sink0_data
	wire          mux_pipeline_source0_ready;                                                   // cmd_mux:sink0_ready -> mux_pipeline:out_ready
	wire    [1:0] mux_pipeline_source0_channel;                                                 // mux_pipeline:out_channel -> cmd_mux:sink0_channel
	wire          mux_pipeline_source0_startofpacket;                                           // mux_pipeline:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          mux_pipeline_source0_endofpacket;                                             // mux_pipeline:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                         // cmd_demux:src1_valid -> mux_pipeline_001:in_valid
	wire  [158:0] cmd_demux_src1_data;                                                          // cmd_demux:src1_data -> mux_pipeline_001:in_data
	wire          cmd_demux_src1_ready;                                                         // mux_pipeline_001:in_ready -> cmd_demux:src1_ready
	wire    [1:0] cmd_demux_src1_channel;                                                       // cmd_demux:src1_channel -> mux_pipeline_001:in_channel
	wire          cmd_demux_src1_startofpacket;                                                 // cmd_demux:src1_startofpacket -> mux_pipeline_001:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                   // cmd_demux:src1_endofpacket -> mux_pipeline_001:in_endofpacket
	wire          mux_pipeline_001_source0_valid;                                               // mux_pipeline_001:out_valid -> cmd_mux_001:sink0_valid
	wire  [158:0] mux_pipeline_001_source0_data;                                                // mux_pipeline_001:out_data -> cmd_mux_001:sink0_data
	wire          mux_pipeline_001_source0_ready;                                               // cmd_mux_001:sink0_ready -> mux_pipeline_001:out_ready
	wire    [1:0] mux_pipeline_001_source0_channel;                                             // mux_pipeline_001:out_channel -> cmd_mux_001:sink0_channel
	wire          mux_pipeline_001_source0_startofpacket;                                       // mux_pipeline_001:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          mux_pipeline_001_source0_endofpacket;                                         // mux_pipeline_001:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                         // rsp_demux:src0_valid -> mux_pipeline_002:in_valid
	wire  [158:0] rsp_demux_src0_data;                                                          // rsp_demux:src0_data -> mux_pipeline_002:in_data
	wire          rsp_demux_src0_ready;                                                         // mux_pipeline_002:in_ready -> rsp_demux:src0_ready
	wire    [1:0] rsp_demux_src0_channel;                                                       // rsp_demux:src0_channel -> mux_pipeline_002:in_channel
	wire          rsp_demux_src0_startofpacket;                                                 // rsp_demux:src0_startofpacket -> mux_pipeline_002:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                   // rsp_demux:src0_endofpacket -> mux_pipeline_002:in_endofpacket
	wire          mux_pipeline_002_source0_valid;                                               // mux_pipeline_002:out_valid -> rsp_mux:sink0_valid
	wire  [158:0] mux_pipeline_002_source0_data;                                                // mux_pipeline_002:out_data -> rsp_mux:sink0_data
	wire          mux_pipeline_002_source0_ready;                                               // rsp_mux:sink0_ready -> mux_pipeline_002:out_ready
	wire    [1:0] mux_pipeline_002_source0_channel;                                             // mux_pipeline_002:out_channel -> rsp_mux:sink0_channel
	wire          mux_pipeline_002_source0_startofpacket;                                       // mux_pipeline_002:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          mux_pipeline_002_source0_endofpacket;                                         // mux_pipeline_002:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                     // rsp_demux_001:src0_valid -> mux_pipeline_003:in_valid
	wire  [158:0] rsp_demux_001_src0_data;                                                      // rsp_demux_001:src0_data -> mux_pipeline_003:in_data
	wire          rsp_demux_001_src0_ready;                                                     // mux_pipeline_003:in_ready -> rsp_demux_001:src0_ready
	wire    [1:0] rsp_demux_001_src0_channel;                                                   // rsp_demux_001:src0_channel -> mux_pipeline_003:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                             // rsp_demux_001:src0_startofpacket -> mux_pipeline_003:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                               // rsp_demux_001:src0_endofpacket -> mux_pipeline_003:in_endofpacket
	wire          mux_pipeline_003_source0_valid;                                               // mux_pipeline_003:out_valid -> rsp_mux:sink1_valid
	wire  [158:0] mux_pipeline_003_source0_data;                                                // mux_pipeline_003:out_data -> rsp_mux:sink1_data
	wire          mux_pipeline_003_source0_ready;                                               // rsp_mux:sink1_ready -> mux_pipeline_003:out_ready
	wire    [1:0] mux_pipeline_003_source0_channel;                                             // mux_pipeline_003:out_channel -> rsp_mux:sink1_channel
	wire          mux_pipeline_003_source0_startofpacket;                                       // mux_pipeline_003:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          mux_pipeline_003_source0_endofpacket;                                         // mux_pipeline_003:out_endofpacket -> rsp_mux:sink1_endofpacket

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (64),
		.AV_BURSTCOUNT_W             (8),
		.AV_BYTEENABLE_W             (8),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (11),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (8),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) datamover_0_avalon_master_translator (
		.clk                    (clk_100m_clk_clk),                                                             //                       clk.clk
		.reset                  (DataMover_0_reset_reset_bridge_in_reset_reset),                                //                     reset.reset
		.uav_address            (datamover_0_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (datamover_0_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (datamover_0_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (datamover_0_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (datamover_0_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (datamover_0_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (datamover_0_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (datamover_0_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (datamover_0_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (datamover_0_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (datamover_0_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (DataMover_0_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (DataMover_0_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (DataMover_0_avalon_master_burstcount),                                         //                          .burstcount
		.av_byteenable          (DataMover_0_avalon_master_byteenable),                                         //                          .byteenable
		.av_read                (DataMover_0_avalon_master_read),                                               //                          .read
		.av_readdata            (DataMover_0_avalon_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (DataMover_0_avalon_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (DataMover_0_avalon_master_write),                                              //                          .write
		.av_writedata           (DataMover_0_avalon_master_writedata),                                          //                          .writedata
		.av_beginbursttransfer  (1'b0),                                                                         //               (terminated)
		.av_begintransfer       (1'b0),                                                                         //               (terminated)
		.av_chipselect          (1'b0),                                                                         //               (terminated)
		.av_lock                (1'b0),                                                                         //               (terminated)
		.av_debugaccess         (1'b0),                                                                         //               (terminated)
		.uav_clken              (),                                                                             //               (terminated)
		.av_clken               (1'b1),                                                                         //               (terminated)
		.uav_response           (2'b00),                                                                        //               (terminated)
		.av_response            (),                                                                             //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                         //               (terminated)
		.av_writeresponsevalid  ()                                                                              //               (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (158),
		.PKT_ORI_BURST_SIZE_L      (156),
		.PKT_RESPONSE_STATUS_H     (155),
		.PKT_RESPONSE_STATUS_L     (154),
		.PKT_QOS_H                 (143),
		.PKT_QOS_L                 (143),
		.PKT_DATA_SIDEBAND_H       (141),
		.PKT_DATA_SIDEBAND_L       (141),
		.PKT_ADDR_SIDEBAND_H       (140),
		.PKT_ADDR_SIDEBAND_L       (136),
		.PKT_BURST_TYPE_H          (135),
		.PKT_BURST_TYPE_L          (134),
		.PKT_CACHE_H               (153),
		.PKT_CACHE_L               (150),
		.PKT_THREAD_ID_H           (146),
		.PKT_THREAD_ID_L           (146),
		.PKT_BURST_SIZE_H          (133),
		.PKT_BURST_SIZE_L          (131),
		.PKT_TRANS_EXCLUSIVE       (109),
		.PKT_TRANS_LOCK            (108),
		.PKT_BEGIN_BURST           (142),
		.PKT_PROTECTION_H          (149),
		.PKT_PROTECTION_L          (147),
		.PKT_BURSTWRAP_H           (130),
		.PKT_BURSTWRAP_L           (122),
		.PKT_BYTE_CNT_H            (121),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (144),
		.PKT_SRC_ID_L              (144),
		.PKT_DEST_ID_H             (145),
		.PKT_DEST_ID_L             (145),
		.ST_DATA_W                 (159),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (11),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (511),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) datamover_0_avalon_master_agent (
		.clk                   (clk_100m_clk_clk),                                                             //       clk.clk
		.reset                 (DataMover_0_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.av_address            (datamover_0_avalon_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (datamover_0_avalon_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (datamover_0_avalon_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (datamover_0_avalon_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (datamover_0_avalon_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (datamover_0_avalon_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (datamover_0_avalon_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (datamover_0_avalon_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (datamover_0_avalon_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (datamover_0_avalon_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (datamover_0_avalon_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (datamover_0_avalon_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (datamover_0_avalon_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (datamover_0_avalon_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (datamover_0_avalon_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (datamover_0_avalon_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (datamover_0_avalon_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (datamover_0_avalon_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (datamover_0_avalon_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (datamover_0_avalon_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (datamover_0_avalon_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (datamover_0_avalon_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                             // (terminated)
		.av_writeresponsevalid ()                                                                              // (terminated)
	);

	altera_merlin_axi_slave_ni #(
		.PKT_QOS_H                   (215),
		.PKT_QOS_L                   (215),
		.PKT_THREAD_ID_H             (218),
		.PKT_THREAD_ID_L             (218),
		.PKT_RESPONSE_STATUS_H       (227),
		.PKT_RESPONSE_STATUS_L       (226),
		.PKT_BEGIN_BURST             (214),
		.PKT_CACHE_H                 (225),
		.PKT_CACHE_L                 (222),
		.PKT_DATA_SIDEBAND_H         (213),
		.PKT_DATA_SIDEBAND_L         (213),
		.PKT_ADDR_SIDEBAND_H         (212),
		.PKT_ADDR_SIDEBAND_L         (208),
		.PKT_BURST_TYPE_H            (207),
		.PKT_BURST_TYPE_L            (206),
		.PKT_PROTECTION_H            (221),
		.PKT_PROTECTION_L            (219),
		.PKT_BURST_SIZE_H            (205),
		.PKT_BURST_SIZE_L            (203),
		.PKT_BURSTWRAP_H             (202),
		.PKT_BURSTWRAP_L             (194),
		.PKT_BYTE_CNT_H              (193),
		.PKT_BYTE_CNT_L              (182),
		.PKT_ADDR_H                  (175),
		.PKT_ADDR_L                  (144),
		.PKT_TRANS_EXCLUSIVE         (181),
		.PKT_TRANS_LOCK              (180),
		.PKT_TRANS_COMPRESSED_READ   (176),
		.PKT_TRANS_POSTED            (177),
		.PKT_TRANS_WRITE             (178),
		.PKT_TRANS_READ              (179),
		.PKT_DATA_H                  (127),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (143),
		.PKT_BYTEEN_L                (128),
		.PKT_SRC_ID_H                (216),
		.PKT_SRC_ID_L                (216),
		.PKT_DEST_ID_H               (217),
		.PKT_DEST_ID_L               (217),
		.PKT_ORI_BURST_SIZE_L        (228),
		.PKT_ORI_BURST_SIZE_H        (230),
		.ADDR_USER_WIDTH             (5),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (231),
		.ADDR_WIDTH                  (32),
		.RDATA_WIDTH                 (128),
		.WDATA_WIDTH                 (128),
		.ST_CHANNEL_W                (2),
		.AXI_SLAVE_ID_W              (8),
		.PASS_ID_TO_SLAVE            (1),
		.AXI_VERSION                 ("AXI3"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1)
	) axi_conduit_merger_0_altera_axi_slave_agent (
		.aclk                   (clk_100m_clk_clk),                                                   //        clock_sink.clk
		.aresetn                (~DataMover_0_reset_reset_bridge_in_reset_reset),                     //        reset_sink.reset_n
		.read_cp_valid          (agent_pipeline_001_source0_valid),                                   //           read_cp.valid
		.read_cp_ready          (agent_pipeline_001_source0_ready),                                   //                  .ready
		.read_cp_data           (agent_pipeline_001_source0_data),                                    //                  .data
		.read_cp_channel        (agent_pipeline_001_source0_channel),                                 //                  .channel
		.read_cp_startofpacket  (agent_pipeline_001_source0_startofpacket),                           //                  .startofpacket
		.read_cp_endofpacket    (agent_pipeline_001_source0_endofpacket),                             //                  .endofpacket
		.write_cp_ready         (agent_pipeline_source0_ready),                                       //          write_cp.ready
		.write_cp_valid         (agent_pipeline_source0_valid),                                       //                  .valid
		.write_cp_data          (agent_pipeline_source0_data),                                        //                  .data
		.write_cp_channel       (agent_pipeline_source0_channel),                                     //                  .channel
		.write_cp_startofpacket (agent_pipeline_source0_startofpacket),                               //                  .startofpacket
		.write_cp_endofpacket   (agent_pipeline_source0_endofpacket),                                 //                  .endofpacket
		.read_rp_ready          (axi_conduit_merger_0_altera_axi_slave_agent_read_rp_ready),          //           read_rp.ready
		.read_rp_valid          (axi_conduit_merger_0_altera_axi_slave_agent_read_rp_valid),          //                  .valid
		.read_rp_data           (axi_conduit_merger_0_altera_axi_slave_agent_read_rp_data),           //                  .data
		.read_rp_startofpacket  (axi_conduit_merger_0_altera_axi_slave_agent_read_rp_startofpacket),  //                  .startofpacket
		.read_rp_endofpacket    (axi_conduit_merger_0_altera_axi_slave_agent_read_rp_endofpacket),    //                  .endofpacket
		.write_rp_ready         (axi_conduit_merger_0_altera_axi_slave_agent_write_rp_ready),         //          write_rp.ready
		.write_rp_valid         (axi_conduit_merger_0_altera_axi_slave_agent_write_rp_valid),         //                  .valid
		.write_rp_data          (axi_conduit_merger_0_altera_axi_slave_agent_write_rp_data),          //                  .data
		.write_rp_startofpacket (axi_conduit_merger_0_altera_axi_slave_agent_write_rp_startofpacket), //                  .startofpacket
		.write_rp_endofpacket   (axi_conduit_merger_0_altera_axi_slave_agent_write_rp_endofpacket),   //                  .endofpacket
		.awid                   (axi_conduit_merger_0_altera_axi_slave_awid),                         // altera_axi_master.awid
		.awaddr                 (axi_conduit_merger_0_altera_axi_slave_awaddr),                       //                  .awaddr
		.awlen                  (axi_conduit_merger_0_altera_axi_slave_awlen),                        //                  .awlen
		.awsize                 (axi_conduit_merger_0_altera_axi_slave_awsize),                       //                  .awsize
		.awburst                (axi_conduit_merger_0_altera_axi_slave_awburst),                      //                  .awburst
		.awlock                 (axi_conduit_merger_0_altera_axi_slave_awlock),                       //                  .awlock
		.awcache                (axi_conduit_merger_0_altera_axi_slave_awcache),                      //                  .awcache
		.awprot                 (axi_conduit_merger_0_altera_axi_slave_awprot),                       //                  .awprot
		.awuser                 (axi_conduit_merger_0_altera_axi_slave_awuser),                       //                  .awuser
		.awvalid                (axi_conduit_merger_0_altera_axi_slave_awvalid),                      //                  .awvalid
		.awready                (axi_conduit_merger_0_altera_axi_slave_awready),                      //                  .awready
		.wid                    (axi_conduit_merger_0_altera_axi_slave_wid),                          //                  .wid
		.wdata                  (axi_conduit_merger_0_altera_axi_slave_wdata),                        //                  .wdata
		.wstrb                  (axi_conduit_merger_0_altera_axi_slave_wstrb),                        //                  .wstrb
		.wlast                  (axi_conduit_merger_0_altera_axi_slave_wlast),                        //                  .wlast
		.wvalid                 (axi_conduit_merger_0_altera_axi_slave_wvalid),                       //                  .wvalid
		.wready                 (axi_conduit_merger_0_altera_axi_slave_wready),                       //                  .wready
		.bid                    (axi_conduit_merger_0_altera_axi_slave_bid),                          //                  .bid
		.bresp                  (axi_conduit_merger_0_altera_axi_slave_bresp),                        //                  .bresp
		.bvalid                 (axi_conduit_merger_0_altera_axi_slave_bvalid),                       //                  .bvalid
		.bready                 (axi_conduit_merger_0_altera_axi_slave_bready),                       //                  .bready
		.arid                   (axi_conduit_merger_0_altera_axi_slave_arid),                         //                  .arid
		.araddr                 (axi_conduit_merger_0_altera_axi_slave_araddr),                       //                  .araddr
		.arlen                  (axi_conduit_merger_0_altera_axi_slave_arlen),                        //                  .arlen
		.arsize                 (axi_conduit_merger_0_altera_axi_slave_arsize),                       //                  .arsize
		.arburst                (axi_conduit_merger_0_altera_axi_slave_arburst),                      //                  .arburst
		.arlock                 (axi_conduit_merger_0_altera_axi_slave_arlock),                       //                  .arlock
		.arcache                (axi_conduit_merger_0_altera_axi_slave_arcache),                      //                  .arcache
		.arprot                 (axi_conduit_merger_0_altera_axi_slave_arprot),                       //                  .arprot
		.aruser                 (axi_conduit_merger_0_altera_axi_slave_aruser),                       //                  .aruser
		.arvalid                (axi_conduit_merger_0_altera_axi_slave_arvalid),                      //                  .arvalid
		.arready                (axi_conduit_merger_0_altera_axi_slave_arready),                      //                  .arready
		.rid                    (axi_conduit_merger_0_altera_axi_slave_rid),                          //                  .rid
		.rdata                  (axi_conduit_merger_0_altera_axi_slave_rdata),                        //                  .rdata
		.rresp                  (axi_conduit_merger_0_altera_axi_slave_rresp),                        //                  .rresp
		.rlast                  (axi_conduit_merger_0_altera_axi_slave_rlast),                        //                  .rlast
		.rvalid                 (axi_conduit_merger_0_altera_axi_slave_rvalid),                       //                  .rvalid
		.rready                 (axi_conduit_merger_0_altera_axi_slave_rready)                        //                  .rready
	);

	soc_system_mm_interconnect_1_router router (
		.sink_ready         (datamover_0_avalon_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (datamover_0_avalon_master_agent_cp_valid),         //          .valid
		.sink_data          (datamover_0_avalon_master_agent_cp_data),          //          .data
		.sink_startofpacket (datamover_0_avalon_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (datamover_0_avalon_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_100m_clk_clk),                                 //       clk.clk
		.reset              (DataMover_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_src_ready),                                 //       src.ready
		.src_valid          (router_src_valid),                                 //          .valid
		.src_data           (router_src_data),                                  //          .data
		.src_channel        (router_src_channel),                               //          .channel
		.src_startofpacket  (router_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                            //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_001 router_001 (
		.sink_ready         (agent_pipeline_002_source0_ready),              //      sink.ready
		.sink_valid         (agent_pipeline_002_source0_valid),              //          .valid
		.sink_data          (agent_pipeline_002_source0_data),               //          .data
		.sink_startofpacket (agent_pipeline_002_source0_startofpacket),      //          .startofpacket
		.sink_endofpacket   (agent_pipeline_002_source0_endofpacket),        //          .endofpacket
		.clk                (clk_100m_clk_clk),                              //       clk.clk
		.reset              (DataMover_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                          //       src.ready
		.src_valid          (router_001_src_valid),                          //          .valid
		.src_data           (router_001_src_data),                           //          .data
		.src_channel        (router_001_src_channel),                        //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                     //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_001 router_002 (
		.sink_ready         (agent_pipeline_003_source0_ready),              //      sink.ready
		.sink_valid         (agent_pipeline_003_source0_valid),              //          .valid
		.sink_data          (agent_pipeline_003_source0_data),               //          .data
		.sink_startofpacket (agent_pipeline_003_source0_startofpacket),      //          .startofpacket
		.sink_endofpacket   (agent_pipeline_003_source0_endofpacket),        //          .endofpacket
		.clk                (clk_100m_clk_clk),                              //       clk.clk
		.reset              (DataMover_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                          //       src.ready
		.src_valid          (router_002_src_valid),                          //          .valid
		.src_data           (router_002_src_data),                           //          .data
		.src_channel        (router_002_src_channel),                        //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                     //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (145),
		.PKT_DEST_ID_L             (145),
		.PKT_SRC_ID_H              (144),
		.PKT_SRC_ID_L              (144),
		.PKT_BYTE_CNT_H            (121),
		.PKT_BYTE_CNT_L            (110),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.MAX_OUTSTANDING_RESPONSES (15),
		.PIPELINED                 (0),
		.ST_DATA_W                 (159),
		.ST_CHANNEL_W              (2),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (1),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) datamover_0_avalon_master_limiter (
		.clk                    (clk_100m_clk_clk),                                        //       clk.clk
		.reset                  (DataMover_0_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                        //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                        //          .valid
		.cmd_sink_data          (router_src_data),                                         //          .data
		.cmd_sink_channel       (router_src_channel),                                      //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                  //          .endofpacket
		.cmd_src_ready          (datamover_0_avalon_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (datamover_0_avalon_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (datamover_0_avalon_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (datamover_0_avalon_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (datamover_0_avalon_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (datamover_0_avalon_master_limiter_cmd_src_valid),         //          .valid
		.rsp_sink_ready         (limiter_pipeline_001_source0_ready),                      //  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_001_source0_valid),                      //          .valid
		.rsp_sink_channel       (limiter_pipeline_001_source0_channel),                    //          .channel
		.rsp_sink_data          (limiter_pipeline_001_source0_data),                       //          .data
		.rsp_sink_startofpacket (limiter_pipeline_001_source0_startofpacket),              //          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_001_source0_endofpacket),                //          .endofpacket
		.rsp_src_ready          (datamover_0_avalon_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (datamover_0_avalon_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (datamover_0_avalon_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (datamover_0_avalon_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (datamover_0_avalon_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (datamover_0_avalon_master_limiter_rsp_src_endofpacket)    //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_BEGIN_BURST           (214),
		.PKT_BYTE_CNT_H            (193),
		.PKT_BYTE_CNT_L            (182),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_BURST_SIZE_H          (205),
		.PKT_BURST_SIZE_L          (203),
		.PKT_BURST_TYPE_H          (207),
		.PKT_BURST_TYPE_L          (206),
		.PKT_BURSTWRAP_H           (202),
		.PKT_BURSTWRAP_L           (194),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.OUT_NARROW_SIZE           (1),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (1),
		.OUT_COMPLETE_WRAP         (1),
		.ST_DATA_W                 (231),
		.ST_CHANNEL_W              (2),
		.OUT_BYTE_CNT_H            (190),
		.OUT_BURSTWRAP_H           (202),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (0),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (511),
		.BURSTWRAP_CONST_VALUE     (511),
		.ADAPTER_VERSION           ("13.1")
	) axi_conduit_merger_0_altera_axi_slave_wr_burst_adapter (
		.clk                   (clk_100m_clk_clk),                                                             //       cr0.clk
		.reset                 (DataMover_0_reset_reset_bridge_in_reset_reset),                                // cr0_reset.reset
		.sink0_valid           (axi_conduit_merger_0_altera_axi_slave_wr_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (axi_conduit_merger_0_altera_axi_slave_wr_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (axi_conduit_merger_0_altera_axi_slave_wr_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (axi_conduit_merger_0_altera_axi_slave_wr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (axi_conduit_merger_0_altera_axi_slave_wr_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (axi_conduit_merger_0_altera_axi_slave_wr_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (axi_conduit_merger_0_altera_axi_slave_wr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (axi_conduit_merger_0_altera_axi_slave_wr_burst_adapter_source0_data),          //          .data
		.source0_channel       (axi_conduit_merger_0_altera_axi_slave_wr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (axi_conduit_merger_0_altera_axi_slave_wr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (axi_conduit_merger_0_altera_axi_slave_wr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (axi_conduit_merger_0_altera_axi_slave_wr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_BEGIN_BURST           (214),
		.PKT_BYTE_CNT_H            (193),
		.PKT_BYTE_CNT_L            (182),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_BURST_SIZE_H          (205),
		.PKT_BURST_SIZE_L          (203),
		.PKT_BURST_TYPE_H          (207),
		.PKT_BURST_TYPE_L          (206),
		.PKT_BURSTWRAP_H           (202),
		.PKT_BURSTWRAP_L           (194),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.OUT_NARROW_SIZE           (1),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (1),
		.OUT_COMPLETE_WRAP         (1),
		.ST_DATA_W                 (231),
		.ST_CHANNEL_W              (2),
		.OUT_BYTE_CNT_H            (190),
		.OUT_BURSTWRAP_H           (202),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (0),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (511),
		.BURSTWRAP_CONST_VALUE     (511),
		.ADAPTER_VERSION           ("13.1")
	) axi_conduit_merger_0_altera_axi_slave_rd_burst_adapter (
		.clk                   (clk_100m_clk_clk),                                                             //       cr0.clk
		.reset                 (DataMover_0_reset_reset_bridge_in_reset_reset),                                // cr0_reset.reset
		.sink0_valid           (axi_conduit_merger_0_altera_axi_slave_rd_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (axi_conduit_merger_0_altera_axi_slave_rd_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (axi_conduit_merger_0_altera_axi_slave_rd_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (axi_conduit_merger_0_altera_axi_slave_rd_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (axi_conduit_merger_0_altera_axi_slave_rd_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (axi_conduit_merger_0_altera_axi_slave_rd_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (axi_conduit_merger_0_altera_axi_slave_rd_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (axi_conduit_merger_0_altera_axi_slave_rd_burst_adapter_source0_data),          //          .data
		.source0_channel       (axi_conduit_merger_0_altera_axi_slave_rd_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (axi_conduit_merger_0_altera_axi_slave_rd_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (axi_conduit_merger_0_altera_axi_slave_rd_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (axi_conduit_merger_0_altera_axi_slave_rd_burst_adapter_source0_ready)          //          .ready
	);

	soc_system_mm_interconnect_1_cmd_demux cmd_demux (
		.clk                (clk_100m_clk_clk),                              //       clk.clk
		.reset              (DataMover_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (limiter_pipeline_source0_ready),                //      sink.ready
		.sink_channel       (limiter_pipeline_source0_channel),              //          .channel
		.sink_data          (limiter_pipeline_source0_data),                 //          .data
		.sink_startofpacket (limiter_pipeline_source0_startofpacket),        //          .startofpacket
		.sink_endofpacket   (limiter_pipeline_source0_endofpacket),          //          .endofpacket
		.sink_valid         (limiter_pipeline_source0_valid),                //          .valid
		.src0_ready         (cmd_demux_src0_ready),                          //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                          //          .valid
		.src0_data          (cmd_demux_src0_data),                           //          .data
		.src0_channel       (cmd_demux_src0_channel),                        //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                    //          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                          //      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                          //          .valid
		.src1_data          (cmd_demux_src1_data),                           //          .data
		.src1_channel       (cmd_demux_src1_channel),                        //          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                  //          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket)                     //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux (
		.clk                 (clk_100m_clk_clk),                              //       clk.clk
		.reset               (DataMover_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_src_valid),                             //          .valid
		.src_data            (cmd_mux_src_data),                              //          .data
		.src_channel         (cmd_mux_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (mux_pipeline_source0_ready),                    //     sink0.ready
		.sink0_valid         (mux_pipeline_source0_valid),                    //          .valid
		.sink0_channel       (mux_pipeline_source0_channel),                  //          .channel
		.sink0_data          (mux_pipeline_source0_data),                     //          .data
		.sink0_startofpacket (mux_pipeline_source0_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_source0_endofpacket)               //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_001 (
		.clk                 (clk_100m_clk_clk),                              //       clk.clk
		.reset               (DataMover_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                         //          .valid
		.src_data            (cmd_mux_001_src_data),                          //          .data
		.src_channel         (cmd_mux_001_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (mux_pipeline_001_source0_ready),                //     sink0.ready
		.sink0_valid         (mux_pipeline_001_source0_valid),                //          .valid
		.sink0_channel       (mux_pipeline_001_source0_channel),              //          .channel
		.sink0_data          (mux_pipeline_001_source0_data),                 //          .data
		.sink0_startofpacket (mux_pipeline_001_source0_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_001_source0_endofpacket)           //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux (
		.clk                (clk_100m_clk_clk),                                                             //       clk.clk
		.reset              (DataMover_0_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.sink_ready         (axi_conduit_merger_0_altera_axi_slave_wr_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (axi_conduit_merger_0_altera_axi_slave_wr_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (axi_conduit_merger_0_altera_axi_slave_wr_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (axi_conduit_merger_0_altera_axi_slave_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (axi_conduit_merger_0_altera_axi_slave_wr_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (axi_conduit_merger_0_altera_axi_slave_wr_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                                         //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                                         //          .valid
		.src0_data          (rsp_demux_src0_data),                                                          //          .data
		.src0_channel       (rsp_demux_src0_channel),                                                       //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                                    //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_001 (
		.clk                (clk_100m_clk_clk),                                                             //       clk.clk
		.reset              (DataMover_0_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.sink_ready         (axi_conduit_merger_0_altera_axi_slave_rd_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (axi_conduit_merger_0_altera_axi_slave_rd_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (axi_conduit_merger_0_altera_axi_slave_rd_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (axi_conduit_merger_0_altera_axi_slave_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (axi_conduit_merger_0_altera_axi_slave_rd_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (axi_conduit_merger_0_altera_axi_slave_rd_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                                     //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                                     //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                                      //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                                   //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                                             //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                                                //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_mux rsp_mux (
		.clk                 (clk_100m_clk_clk),                              //       clk.clk
		.reset               (DataMover_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                             //       src.ready
		.src_valid           (rsp_mux_src_valid),                             //          .valid
		.src_data            (rsp_mux_src_data),                              //          .data
		.src_channel         (rsp_mux_src_channel),                           //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (mux_pipeline_002_source0_ready),                //     sink0.ready
		.sink0_valid         (mux_pipeline_002_source0_valid),                //          .valid
		.sink0_channel       (mux_pipeline_002_source0_channel),              //          .channel
		.sink0_data          (mux_pipeline_002_source0_data),                 //          .data
		.sink0_startofpacket (mux_pipeline_002_source0_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_002_source0_endofpacket),          //          .endofpacket
		.sink1_ready         (mux_pipeline_003_source0_ready),                //     sink1.ready
		.sink1_valid         (mux_pipeline_003_source0_valid),                //          .valid
		.sink1_channel       (mux_pipeline_003_source0_channel),              //          .channel
		.sink1_data          (mux_pipeline_003_source0_data),                 //          .data
		.sink1_startofpacket (mux_pipeline_003_source0_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_003_source0_endofpacket)           //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (193),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (202),
		.IN_PKT_BURSTWRAP_L            (194),
		.IN_PKT_BURST_SIZE_H           (205),
		.IN_PKT_BURST_SIZE_L           (203),
		.IN_PKT_RESPONSE_STATUS_H      (227),
		.IN_PKT_RESPONSE_STATUS_L      (226),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (207),
		.IN_PKT_BURST_TYPE_L           (206),
		.IN_PKT_ORI_BURST_SIZE_L       (228),
		.IN_PKT_ORI_BURST_SIZE_H       (230),
		.IN_ST_DATA_W                  (231),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (121),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (133),
		.OUT_PKT_BURST_SIZE_L          (131),
		.OUT_PKT_RESPONSE_STATUS_H     (155),
		.OUT_PKT_RESPONSE_STATUS_L     (154),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (135),
		.OUT_PKT_BURST_TYPE_L          (134),
		.OUT_PKT_ORI_BURST_SIZE_L      (156),
		.OUT_PKT_ORI_BURST_SIZE_H      (158),
		.OUT_ST_DATA_W                 (159),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) axi_conduit_merger_0_altera_axi_slave_wr_rsp_width_adapter (
		.clk                  (clk_100m_clk_clk),                                                             //       clk.clk
		.reset                (DataMover_0_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.in_valid             (router_001_src_valid),                                                         //      sink.valid
		.in_channel           (router_001_src_channel),                                                       //          .channel
		.in_startofpacket     (router_001_src_startofpacket),                                                 //          .startofpacket
		.in_endofpacket       (router_001_src_endofpacket),                                                   //          .endofpacket
		.in_ready             (router_001_src_ready),                                                         //          .ready
		.in_data              (router_001_src_data),                                                          //          .data
		.out_endofpacket      (axi_conduit_merger_0_altera_axi_slave_wr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (axi_conduit_merger_0_altera_axi_slave_wr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (axi_conduit_merger_0_altera_axi_slave_wr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (axi_conduit_merger_0_altera_axi_slave_wr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (axi_conduit_merger_0_altera_axi_slave_wr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (axi_conduit_merger_0_altera_axi_slave_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (193),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (202),
		.IN_PKT_BURSTWRAP_L            (194),
		.IN_PKT_BURST_SIZE_H           (205),
		.IN_PKT_BURST_SIZE_L           (203),
		.IN_PKT_RESPONSE_STATUS_H      (227),
		.IN_PKT_RESPONSE_STATUS_L      (226),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (207),
		.IN_PKT_BURST_TYPE_L           (206),
		.IN_PKT_ORI_BURST_SIZE_L       (228),
		.IN_PKT_ORI_BURST_SIZE_H       (230),
		.IN_ST_DATA_W                  (231),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (121),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (133),
		.OUT_PKT_BURST_SIZE_L          (131),
		.OUT_PKT_RESPONSE_STATUS_H     (155),
		.OUT_PKT_RESPONSE_STATUS_L     (154),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (135),
		.OUT_PKT_BURST_TYPE_L          (134),
		.OUT_PKT_ORI_BURST_SIZE_L      (156),
		.OUT_PKT_ORI_BURST_SIZE_H      (158),
		.OUT_ST_DATA_W                 (159),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) axi_conduit_merger_0_altera_axi_slave_rd_rsp_width_adapter (
		.clk                  (clk_100m_clk_clk),                                                             //       clk.clk
		.reset                (DataMover_0_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.in_valid             (router_002_src_valid),                                                         //      sink.valid
		.in_channel           (router_002_src_channel),                                                       //          .channel
		.in_startofpacket     (router_002_src_startofpacket),                                                 //          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                                                   //          .endofpacket
		.in_ready             (router_002_src_ready),                                                         //          .ready
		.in_data              (router_002_src_data),                                                          //          .data
		.out_endofpacket      (axi_conduit_merger_0_altera_axi_slave_rd_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (axi_conduit_merger_0_altera_axi_slave_rd_rsp_width_adapter_src_data),          //          .data
		.out_channel          (axi_conduit_merger_0_altera_axi_slave_rd_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (axi_conduit_merger_0_altera_axi_slave_rd_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (axi_conduit_merger_0_altera_axi_slave_rd_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (axi_conduit_merger_0_altera_axi_slave_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (121),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (130),
		.IN_PKT_BURSTWRAP_L            (122),
		.IN_PKT_BURST_SIZE_H           (133),
		.IN_PKT_BURST_SIZE_L           (131),
		.IN_PKT_RESPONSE_STATUS_H      (155),
		.IN_PKT_RESPONSE_STATUS_L      (154),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (135),
		.IN_PKT_BURST_TYPE_L           (134),
		.IN_PKT_ORI_BURST_SIZE_L       (156),
		.IN_PKT_ORI_BURST_SIZE_H       (158),
		.IN_ST_DATA_W                  (159),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (193),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (205),
		.OUT_PKT_BURST_SIZE_L          (203),
		.OUT_PKT_RESPONSE_STATUS_H     (227),
		.OUT_PKT_RESPONSE_STATUS_L     (226),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (207),
		.OUT_PKT_BURST_TYPE_L          (206),
		.OUT_PKT_ORI_BURST_SIZE_L      (228),
		.OUT_PKT_ORI_BURST_SIZE_H      (230),
		.OUT_ST_DATA_W                 (231),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) axi_conduit_merger_0_altera_axi_slave_wr_cmd_width_adapter (
		.clk                  (clk_100m_clk_clk),                                                             //       clk.clk
		.reset                (DataMover_0_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                                            //      sink.valid
		.in_channel           (cmd_mux_src_channel),                                                          //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                                    //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                                      //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                                            //          .ready
		.in_data              (cmd_mux_src_data),                                                             //          .data
		.out_endofpacket      (axi_conduit_merger_0_altera_axi_slave_wr_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (axi_conduit_merger_0_altera_axi_slave_wr_cmd_width_adapter_src_data),          //          .data
		.out_channel          (axi_conduit_merger_0_altera_axi_slave_wr_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (axi_conduit_merger_0_altera_axi_slave_wr_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (axi_conduit_merger_0_altera_axi_slave_wr_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (axi_conduit_merger_0_altera_axi_slave_wr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (121),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (130),
		.IN_PKT_BURSTWRAP_L            (122),
		.IN_PKT_BURST_SIZE_H           (133),
		.IN_PKT_BURST_SIZE_L           (131),
		.IN_PKT_RESPONSE_STATUS_H      (155),
		.IN_PKT_RESPONSE_STATUS_L      (154),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (135),
		.IN_PKT_BURST_TYPE_L           (134),
		.IN_PKT_ORI_BURST_SIZE_L       (156),
		.IN_PKT_ORI_BURST_SIZE_H       (158),
		.IN_ST_DATA_W                  (159),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (193),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (205),
		.OUT_PKT_BURST_SIZE_L          (203),
		.OUT_PKT_RESPONSE_STATUS_H     (227),
		.OUT_PKT_RESPONSE_STATUS_L     (226),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (207),
		.OUT_PKT_BURST_TYPE_L          (206),
		.OUT_PKT_ORI_BURST_SIZE_L      (228),
		.OUT_PKT_ORI_BURST_SIZE_H      (230),
		.OUT_ST_DATA_W                 (231),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) axi_conduit_merger_0_altera_axi_slave_rd_cmd_width_adapter (
		.clk                  (clk_100m_clk_clk),                                                             //       clk.clk
		.reset                (DataMover_0_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.in_valid             (cmd_mux_001_src_valid),                                                        //      sink.valid
		.in_channel           (cmd_mux_001_src_channel),                                                      //          .channel
		.in_startofpacket     (cmd_mux_001_src_startofpacket),                                                //          .startofpacket
		.in_endofpacket       (cmd_mux_001_src_endofpacket),                                                  //          .endofpacket
		.in_ready             (cmd_mux_001_src_ready),                                                        //          .ready
		.in_data              (cmd_mux_001_src_data),                                                         //          .data
		.out_endofpacket      (axi_conduit_merger_0_altera_axi_slave_rd_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (axi_conduit_merger_0_altera_axi_slave_rd_cmd_width_adapter_src_data),          //          .data
		.out_channel          (axi_conduit_merger_0_altera_axi_slave_rd_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (axi_conduit_merger_0_altera_axi_slave_rd_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (axi_conduit_merger_0_altera_axi_slave_rd_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (axi_conduit_merger_0_altera_axi_slave_rd_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (159),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline (
		.clk               (clk_100m_clk_clk),                                        //       cr0.clk
		.reset             (DataMover_0_reset_reset_bridge_in_reset_reset),           // cr0_reset.reset
		.in_ready          (datamover_0_avalon_master_limiter_cmd_src_ready),         //     sink0.ready
		.in_valid          (datamover_0_avalon_master_limiter_cmd_src_valid),         //          .valid
		.in_startofpacket  (datamover_0_avalon_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.in_endofpacket    (datamover_0_avalon_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.in_data           (datamover_0_avalon_master_limiter_cmd_src_data),          //          .data
		.in_channel        (datamover_0_avalon_master_limiter_cmd_src_channel),       //          .channel
		.out_ready         (limiter_pipeline_source0_ready),                          //   source0.ready
		.out_valid         (limiter_pipeline_source0_valid),                          //          .valid
		.out_startofpacket (limiter_pipeline_source0_startofpacket),                  //          .startofpacket
		.out_endofpacket   (limiter_pipeline_source0_endofpacket),                    //          .endofpacket
		.out_data          (limiter_pipeline_source0_data),                           //          .data
		.out_channel       (limiter_pipeline_source0_channel),                        //          .channel
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_error          (1'b0)                                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (159),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_001 (
		.clk               (clk_100m_clk_clk),                              //       cr0.clk
		.reset             (DataMover_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_mux_src_ready),                             //     sink0.ready
		.in_valid          (rsp_mux_src_valid),                             //          .valid
		.in_startofpacket  (rsp_mux_src_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_mux_src_endofpacket),                       //          .endofpacket
		.in_data           (rsp_mux_src_data),                              //          .data
		.in_channel        (rsp_mux_src_channel),                           //          .channel
		.out_ready         (limiter_pipeline_001_source0_ready),            //   source0.ready
		.out_valid         (limiter_pipeline_001_source0_valid),            //          .valid
		.out_startofpacket (limiter_pipeline_001_source0_startofpacket),    //          .startofpacket
		.out_endofpacket   (limiter_pipeline_001_source0_endofpacket),      //          .endofpacket
		.out_data          (limiter_pipeline_001_source0_data),             //          .data
		.out_channel       (limiter_pipeline_001_source0_channel),          //          .channel
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.out_error         (),                                              // (terminated)
		.in_error          (1'b0)                                           // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (231),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline (
		.clk               (clk_100m_clk_clk),                                                             //       cr0.clk
		.reset             (DataMover_0_reset_reset_bridge_in_reset_reset),                                // cr0_reset.reset
		.in_ready          (axi_conduit_merger_0_altera_axi_slave_wr_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (axi_conduit_merger_0_altera_axi_slave_wr_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (axi_conduit_merger_0_altera_axi_slave_wr_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (axi_conduit_merger_0_altera_axi_slave_wr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (axi_conduit_merger_0_altera_axi_slave_wr_burst_adapter_source0_data),          //          .data
		.in_channel        (axi_conduit_merger_0_altera_axi_slave_wr_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_source0_ready),                                                 //   source0.ready
		.out_valid         (agent_pipeline_source0_valid),                                                 //          .valid
		.out_startofpacket (agent_pipeline_source0_startofpacket),                                         //          .startofpacket
		.out_endofpacket   (agent_pipeline_source0_endofpacket),                                           //          .endofpacket
		.out_data          (agent_pipeline_source0_data),                                                  //          .data
		.out_channel       (agent_pipeline_source0_channel),                                               //          .channel
		.in_empty          (1'b0),                                                                         // (terminated)
		.out_empty         (),                                                                             // (terminated)
		.out_error         (),                                                                             // (terminated)
		.in_error          (1'b0)                                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (231),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_001 (
		.clk               (clk_100m_clk_clk),                                                             //       cr0.clk
		.reset             (DataMover_0_reset_reset_bridge_in_reset_reset),                                // cr0_reset.reset
		.in_ready          (axi_conduit_merger_0_altera_axi_slave_rd_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (axi_conduit_merger_0_altera_axi_slave_rd_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (axi_conduit_merger_0_altera_axi_slave_rd_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (axi_conduit_merger_0_altera_axi_slave_rd_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (axi_conduit_merger_0_altera_axi_slave_rd_burst_adapter_source0_data),          //          .data
		.in_channel        (axi_conduit_merger_0_altera_axi_slave_rd_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_001_source0_ready),                                             //   source0.ready
		.out_valid         (agent_pipeline_001_source0_valid),                                             //          .valid
		.out_startofpacket (agent_pipeline_001_source0_startofpacket),                                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_001_source0_endofpacket),                                       //          .endofpacket
		.out_data          (agent_pipeline_001_source0_data),                                              //          .data
		.out_channel       (agent_pipeline_001_source0_channel),                                           //          .channel
		.in_empty          (1'b0),                                                                         // (terminated)
		.out_empty         (),                                                                             // (terminated)
		.out_error         (),                                                                             // (terminated)
		.in_error          (1'b0)                                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (231),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_002 (
		.clk               (clk_100m_clk_clk),                                                   //       cr0.clk
		.reset             (DataMover_0_reset_reset_bridge_in_reset_reset),                      // cr0_reset.reset
		.in_ready          (axi_conduit_merger_0_altera_axi_slave_agent_write_rp_ready),         //     sink0.ready
		.in_valid          (axi_conduit_merger_0_altera_axi_slave_agent_write_rp_valid),         //          .valid
		.in_startofpacket  (axi_conduit_merger_0_altera_axi_slave_agent_write_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (axi_conduit_merger_0_altera_axi_slave_agent_write_rp_endofpacket),   //          .endofpacket
		.in_data           (axi_conduit_merger_0_altera_axi_slave_agent_write_rp_data),          //          .data
		.out_ready         (agent_pipeline_002_source0_ready),                                   //   source0.ready
		.out_valid         (agent_pipeline_002_source0_valid),                                   //          .valid
		.out_startofpacket (agent_pipeline_002_source0_startofpacket),                           //          .startofpacket
		.out_endofpacket   (agent_pipeline_002_source0_endofpacket),                             //          .endofpacket
		.out_data          (agent_pipeline_002_source0_data),                                    //          .data
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_channel       (),                                                                   // (terminated)
		.in_channel        (1'b0)                                                                // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (231),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_003 (
		.clk               (clk_100m_clk_clk),                                                  //       cr0.clk
		.reset             (DataMover_0_reset_reset_bridge_in_reset_reset),                     // cr0_reset.reset
		.in_ready          (axi_conduit_merger_0_altera_axi_slave_agent_read_rp_ready),         //     sink0.ready
		.in_valid          (axi_conduit_merger_0_altera_axi_slave_agent_read_rp_valid),         //          .valid
		.in_startofpacket  (axi_conduit_merger_0_altera_axi_slave_agent_read_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (axi_conduit_merger_0_altera_axi_slave_agent_read_rp_endofpacket),   //          .endofpacket
		.in_data           (axi_conduit_merger_0_altera_axi_slave_agent_read_rp_data),          //          .data
		.out_ready         (agent_pipeline_003_source0_ready),                                  //   source0.ready
		.out_valid         (agent_pipeline_003_source0_valid),                                  //          .valid
		.out_startofpacket (agent_pipeline_003_source0_startofpacket),                          //          .startofpacket
		.out_endofpacket   (agent_pipeline_003_source0_endofpacket),                            //          .endofpacket
		.out_data          (agent_pipeline_003_source0_data),                                   //          .data
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_channel       (),                                                                  // (terminated)
		.in_channel        (1'b0)                                                               // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (159),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline (
		.clk               (clk_100m_clk_clk),                              //       cr0.clk
		.reset             (DataMover_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src0_ready),                          //     sink0.ready
		.in_valid          (cmd_demux_src0_valid),                          //          .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                  //          .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                    //          .endofpacket
		.in_data           (cmd_demux_src0_data),                           //          .data
		.in_channel        (cmd_demux_src0_channel),                        //          .channel
		.out_ready         (mux_pipeline_source0_ready),                    //   source0.ready
		.out_valid         (mux_pipeline_source0_valid),                    //          .valid
		.out_startofpacket (mux_pipeline_source0_startofpacket),            //          .startofpacket
		.out_endofpacket   (mux_pipeline_source0_endofpacket),              //          .endofpacket
		.out_data          (mux_pipeline_source0_data),                     //          .data
		.out_channel       (mux_pipeline_source0_channel),                  //          .channel
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.out_error         (),                                              // (terminated)
		.in_error          (1'b0)                                           // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (159),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_001 (
		.clk               (clk_100m_clk_clk),                              //       cr0.clk
		.reset             (DataMover_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src1_ready),                          //     sink0.ready
		.in_valid          (cmd_demux_src1_valid),                          //          .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),                  //          .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),                    //          .endofpacket
		.in_data           (cmd_demux_src1_data),                           //          .data
		.in_channel        (cmd_demux_src1_channel),                        //          .channel
		.out_ready         (mux_pipeline_001_source0_ready),                //   source0.ready
		.out_valid         (mux_pipeline_001_source0_valid),                //          .valid
		.out_startofpacket (mux_pipeline_001_source0_startofpacket),        //          .startofpacket
		.out_endofpacket   (mux_pipeline_001_source0_endofpacket),          //          .endofpacket
		.out_data          (mux_pipeline_001_source0_data),                 //          .data
		.out_channel       (mux_pipeline_001_source0_channel),              //          .channel
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.out_error         (),                                              // (terminated)
		.in_error          (1'b0)                                           // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (159),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_002 (
		.clk               (clk_100m_clk_clk),                              //       cr0.clk
		.reset             (DataMover_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_src0_ready),                          //     sink0.ready
		.in_valid          (rsp_demux_src0_valid),                          //          .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                  //          .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                    //          .endofpacket
		.in_data           (rsp_demux_src0_data),                           //          .data
		.in_channel        (rsp_demux_src0_channel),                        //          .channel
		.out_ready         (mux_pipeline_002_source0_ready),                //   source0.ready
		.out_valid         (mux_pipeline_002_source0_valid),                //          .valid
		.out_startofpacket (mux_pipeline_002_source0_startofpacket),        //          .startofpacket
		.out_endofpacket   (mux_pipeline_002_source0_endofpacket),          //          .endofpacket
		.out_data          (mux_pipeline_002_source0_data),                 //          .data
		.out_channel       (mux_pipeline_002_source0_channel),              //          .channel
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.out_error         (),                                              // (terminated)
		.in_error          (1'b0)                                           // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (159),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_003 (
		.clk               (clk_100m_clk_clk),                              //       cr0.clk
		.reset             (DataMover_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                      //     sink0.ready
		.in_valid          (rsp_demux_001_src0_valid),                      //          .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),              //          .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                //          .endofpacket
		.in_data           (rsp_demux_001_src0_data),                       //          .data
		.in_channel        (rsp_demux_001_src0_channel),                    //          .channel
		.out_ready         (mux_pipeline_003_source0_ready),                //   source0.ready
		.out_valid         (mux_pipeline_003_source0_valid),                //          .valid
		.out_startofpacket (mux_pipeline_003_source0_startofpacket),        //          .startofpacket
		.out_endofpacket   (mux_pipeline_003_source0_endofpacket),          //          .endofpacket
		.out_data          (mux_pipeline_003_source0_data),                 //          .data
		.out_channel       (mux_pipeline_003_source0_channel),              //          .channel
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.out_error         (),                                              // (terminated)
		.in_error          (1'b0)                                           // (terminated)
	);

endmodule
