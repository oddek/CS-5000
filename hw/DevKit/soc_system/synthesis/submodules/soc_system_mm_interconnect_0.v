// soc_system_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 22.1 922

`timescale 1 ps / 1 ps
module soc_system_mm_interconnect_0 (
		input  wire [7:0]   axi_conduit_merger_0_altera_axi_master_awid,                                         //                                        axi_conduit_merger_0_altera_axi_master.awid
		input  wire [31:0]  axi_conduit_merger_0_altera_axi_master_awaddr,                                       //                                                                              .awaddr
		input  wire [3:0]   axi_conduit_merger_0_altera_axi_master_awlen,                                        //                                                                              .awlen
		input  wire [2:0]   axi_conduit_merger_0_altera_axi_master_awsize,                                       //                                                                              .awsize
		input  wire [1:0]   axi_conduit_merger_0_altera_axi_master_awburst,                                      //                                                                              .awburst
		input  wire [1:0]   axi_conduit_merger_0_altera_axi_master_awlock,                                       //                                                                              .awlock
		input  wire [3:0]   axi_conduit_merger_0_altera_axi_master_awcache,                                      //                                                                              .awcache
		input  wire [2:0]   axi_conduit_merger_0_altera_axi_master_awprot,                                       //                                                                              .awprot
		input  wire [4:0]   axi_conduit_merger_0_altera_axi_master_awuser,                                       //                                                                              .awuser
		input  wire         axi_conduit_merger_0_altera_axi_master_awvalid,                                      //                                                                              .awvalid
		output wire         axi_conduit_merger_0_altera_axi_master_awready,                                      //                                                                              .awready
		input  wire [7:0]   axi_conduit_merger_0_altera_axi_master_wid,                                          //                                                                              .wid
		input  wire [127:0] axi_conduit_merger_0_altera_axi_master_wdata,                                        //                                                                              .wdata
		input  wire [15:0]  axi_conduit_merger_0_altera_axi_master_wstrb,                                        //                                                                              .wstrb
		input  wire         axi_conduit_merger_0_altera_axi_master_wlast,                                        //                                                                              .wlast
		input  wire         axi_conduit_merger_0_altera_axi_master_wvalid,                                       //                                                                              .wvalid
		output wire         axi_conduit_merger_0_altera_axi_master_wready,                                       //                                                                              .wready
		output wire [7:0]   axi_conduit_merger_0_altera_axi_master_bid,                                          //                                                                              .bid
		output wire [1:0]   axi_conduit_merger_0_altera_axi_master_bresp,                                        //                                                                              .bresp
		output wire         axi_conduit_merger_0_altera_axi_master_bvalid,                                       //                                                                              .bvalid
		input  wire         axi_conduit_merger_0_altera_axi_master_bready,                                       //                                                                              .bready
		input  wire [7:0]   axi_conduit_merger_0_altera_axi_master_arid,                                         //                                                                              .arid
		input  wire [31:0]  axi_conduit_merger_0_altera_axi_master_araddr,                                       //                                                                              .araddr
		input  wire [3:0]   axi_conduit_merger_0_altera_axi_master_arlen,                                        //                                                                              .arlen
		input  wire [2:0]   axi_conduit_merger_0_altera_axi_master_arsize,                                       //                                                                              .arsize
		input  wire [1:0]   axi_conduit_merger_0_altera_axi_master_arburst,                                      //                                                                              .arburst
		input  wire [1:0]   axi_conduit_merger_0_altera_axi_master_arlock,                                       //                                                                              .arlock
		input  wire [3:0]   axi_conduit_merger_0_altera_axi_master_arcache,                                      //                                                                              .arcache
		input  wire [2:0]   axi_conduit_merger_0_altera_axi_master_arprot,                                       //                                                                              .arprot
		input  wire [4:0]   axi_conduit_merger_0_altera_axi_master_aruser,                                       //                                                                              .aruser
		input  wire         axi_conduit_merger_0_altera_axi_master_arvalid,                                      //                                                                              .arvalid
		output wire         axi_conduit_merger_0_altera_axi_master_arready,                                      //                                                                              .arready
		output wire [7:0]   axi_conduit_merger_0_altera_axi_master_rid,                                          //                                                                              .rid
		output wire [127:0] axi_conduit_merger_0_altera_axi_master_rdata,                                        //                                                                              .rdata
		output wire [1:0]   axi_conduit_merger_0_altera_axi_master_rresp,                                        //                                                                              .rresp
		output wire         axi_conduit_merger_0_altera_axi_master_rlast,                                        //                                                                              .rlast
		output wire         axi_conduit_merger_0_altera_axi_master_rvalid,                                       //                                                                              .rvalid
		input  wire         axi_conduit_merger_0_altera_axi_master_rready,                                       //                                                                              .rready
		output wire [7:0]   hps_0_f2h_axi_slave_awid,                                                            //                                                           hps_0_f2h_axi_slave.awid
		output wire [31:0]  hps_0_f2h_axi_slave_awaddr,                                                          //                                                                              .awaddr
		output wire [3:0]   hps_0_f2h_axi_slave_awlen,                                                           //                                                                              .awlen
		output wire [2:0]   hps_0_f2h_axi_slave_awsize,                                                          //                                                                              .awsize
		output wire [1:0]   hps_0_f2h_axi_slave_awburst,                                                         //                                                                              .awburst
		output wire [1:0]   hps_0_f2h_axi_slave_awlock,                                                          //                                                                              .awlock
		output wire [3:0]   hps_0_f2h_axi_slave_awcache,                                                         //                                                                              .awcache
		output wire [2:0]   hps_0_f2h_axi_slave_awprot,                                                          //                                                                              .awprot
		output wire [4:0]   hps_0_f2h_axi_slave_awuser,                                                          //                                                                              .awuser
		output wire         hps_0_f2h_axi_slave_awvalid,                                                         //                                                                              .awvalid
		input  wire         hps_0_f2h_axi_slave_awready,                                                         //                                                                              .awready
		output wire [7:0]   hps_0_f2h_axi_slave_wid,                                                             //                                                                              .wid
		output wire [63:0]  hps_0_f2h_axi_slave_wdata,                                                           //                                                                              .wdata
		output wire [7:0]   hps_0_f2h_axi_slave_wstrb,                                                           //                                                                              .wstrb
		output wire         hps_0_f2h_axi_slave_wlast,                                                           //                                                                              .wlast
		output wire         hps_0_f2h_axi_slave_wvalid,                                                          //                                                                              .wvalid
		input  wire         hps_0_f2h_axi_slave_wready,                                                          //                                                                              .wready
		input  wire [7:0]   hps_0_f2h_axi_slave_bid,                                                             //                                                                              .bid
		input  wire [1:0]   hps_0_f2h_axi_slave_bresp,                                                           //                                                                              .bresp
		input  wire         hps_0_f2h_axi_slave_bvalid,                                                          //                                                                              .bvalid
		output wire         hps_0_f2h_axi_slave_bready,                                                          //                                                                              .bready
		output wire [7:0]   hps_0_f2h_axi_slave_arid,                                                            //                                                                              .arid
		output wire [31:0]  hps_0_f2h_axi_slave_araddr,                                                          //                                                                              .araddr
		output wire [3:0]   hps_0_f2h_axi_slave_arlen,                                                           //                                                                              .arlen
		output wire [2:0]   hps_0_f2h_axi_slave_arsize,                                                          //                                                                              .arsize
		output wire [1:0]   hps_0_f2h_axi_slave_arburst,                                                         //                                                                              .arburst
		output wire [1:0]   hps_0_f2h_axi_slave_arlock,                                                          //                                                                              .arlock
		output wire [3:0]   hps_0_f2h_axi_slave_arcache,                                                         //                                                                              .arcache
		output wire [2:0]   hps_0_f2h_axi_slave_arprot,                                                          //                                                                              .arprot
		output wire [4:0]   hps_0_f2h_axi_slave_aruser,                                                          //                                                                              .aruser
		output wire         hps_0_f2h_axi_slave_arvalid,                                                         //                                                                              .arvalid
		input  wire         hps_0_f2h_axi_slave_arready,                                                         //                                                                              .arready
		input  wire [7:0]   hps_0_f2h_axi_slave_rid,                                                             //                                                                              .rid
		input  wire [63:0]  hps_0_f2h_axi_slave_rdata,                                                           //                                                                              .rdata
		input  wire [1:0]   hps_0_f2h_axi_slave_rresp,                                                           //                                                                              .rresp
		input  wire         hps_0_f2h_axi_slave_rlast,                                                           //                                                                              .rlast
		input  wire         hps_0_f2h_axi_slave_rvalid,                                                          //                                                                              .rvalid
		output wire         hps_0_f2h_axi_slave_rready,                                                          //                                                                              .rready
		input  wire         clk_100m_clk_clk,                                                                    //                                                                  clk_100m_clk.clk
		input  wire         axi_conduit_merger_0_altera_axi_master_id_pad_clk_reset_reset_bridge_in_reset_reset, // axi_conduit_merger_0_altera_axi_master_id_pad_clk_reset_reset_bridge_in_reset.reset
		input  wire         axi_conduit_merger_0_reset_sink_reset_bridge_in_reset_reset                          //                         axi_conduit_merger_0_reset_sink_reset_bridge_in_reset.reset
	);

	wire    [1:0] axi_conduit_merger_0_altera_axi_master_id_pad_m0_awburst;            // axi_conduit_merger_0_altera_axi_master_id_pad:m0_awburst -> axi_conduit_merger_0_altera_axi_master_agent:awburst
	wire    [4:0] axi_conduit_merger_0_altera_axi_master_id_pad_m0_awuser;             // axi_conduit_merger_0_altera_axi_master_id_pad:m0_awuser -> axi_conduit_merger_0_altera_axi_master_agent:awuser
	wire    [3:0] axi_conduit_merger_0_altera_axi_master_id_pad_m0_arlen;              // axi_conduit_merger_0_altera_axi_master_id_pad:m0_arlen -> axi_conduit_merger_0_altera_axi_master_agent:arlen
	wire   [15:0] axi_conduit_merger_0_altera_axi_master_id_pad_m0_wstrb;              // axi_conduit_merger_0_altera_axi_master_id_pad:m0_wstrb -> axi_conduit_merger_0_altera_axi_master_agent:wstrb
	wire          axi_conduit_merger_0_altera_axi_master_id_pad_m0_wready;             // axi_conduit_merger_0_altera_axi_master_agent:wready -> axi_conduit_merger_0_altera_axi_master_id_pad:m0_wready
	wire    [7:0] axi_conduit_merger_0_altera_axi_master_id_pad_m0_rid;                // axi_conduit_merger_0_altera_axi_master_agent:rid -> axi_conduit_merger_0_altera_axi_master_id_pad:m0_rid
	wire          axi_conduit_merger_0_altera_axi_master_id_pad_m0_rready;             // axi_conduit_merger_0_altera_axi_master_id_pad:m0_rready -> axi_conduit_merger_0_altera_axi_master_agent:rready
	wire    [3:0] axi_conduit_merger_0_altera_axi_master_id_pad_m0_awlen;              // axi_conduit_merger_0_altera_axi_master_id_pad:m0_awlen -> axi_conduit_merger_0_altera_axi_master_agent:awlen
	wire    [7:0] axi_conduit_merger_0_altera_axi_master_id_pad_m0_wid;                // axi_conduit_merger_0_altera_axi_master_id_pad:m0_wid -> axi_conduit_merger_0_altera_axi_master_agent:wid
	wire    [3:0] axi_conduit_merger_0_altera_axi_master_id_pad_m0_arcache;            // axi_conduit_merger_0_altera_axi_master_id_pad:m0_arcache -> axi_conduit_merger_0_altera_axi_master_agent:arcache
	wire          axi_conduit_merger_0_altera_axi_master_id_pad_m0_wvalid;             // axi_conduit_merger_0_altera_axi_master_id_pad:m0_wvalid -> axi_conduit_merger_0_altera_axi_master_agent:wvalid
	wire   [31:0] axi_conduit_merger_0_altera_axi_master_id_pad_m0_araddr;             // axi_conduit_merger_0_altera_axi_master_id_pad:m0_araddr -> axi_conduit_merger_0_altera_axi_master_agent:araddr
	wire    [2:0] axi_conduit_merger_0_altera_axi_master_id_pad_m0_arprot;             // axi_conduit_merger_0_altera_axi_master_id_pad:m0_arprot -> axi_conduit_merger_0_altera_axi_master_agent:arprot
	wire    [2:0] axi_conduit_merger_0_altera_axi_master_id_pad_m0_awprot;             // axi_conduit_merger_0_altera_axi_master_id_pad:m0_awprot -> axi_conduit_merger_0_altera_axi_master_agent:awprot
	wire  [127:0] axi_conduit_merger_0_altera_axi_master_id_pad_m0_wdata;              // axi_conduit_merger_0_altera_axi_master_id_pad:m0_wdata -> axi_conduit_merger_0_altera_axi_master_agent:wdata
	wire          axi_conduit_merger_0_altera_axi_master_id_pad_m0_arvalid;            // axi_conduit_merger_0_altera_axi_master_id_pad:m0_arvalid -> axi_conduit_merger_0_altera_axi_master_agent:arvalid
	wire    [3:0] axi_conduit_merger_0_altera_axi_master_id_pad_m0_awcache;            // axi_conduit_merger_0_altera_axi_master_id_pad:m0_awcache -> axi_conduit_merger_0_altera_axi_master_agent:awcache
	wire    [7:0] axi_conduit_merger_0_altera_axi_master_id_pad_m0_arid;               // axi_conduit_merger_0_altera_axi_master_id_pad:m0_arid -> axi_conduit_merger_0_altera_axi_master_agent:arid
	wire    [1:0] axi_conduit_merger_0_altera_axi_master_id_pad_m0_arlock;             // axi_conduit_merger_0_altera_axi_master_id_pad:m0_arlock -> axi_conduit_merger_0_altera_axi_master_agent:arlock
	wire    [1:0] axi_conduit_merger_0_altera_axi_master_id_pad_m0_awlock;             // axi_conduit_merger_0_altera_axi_master_id_pad:m0_awlock -> axi_conduit_merger_0_altera_axi_master_agent:awlock
	wire   [31:0] axi_conduit_merger_0_altera_axi_master_id_pad_m0_awaddr;             // axi_conduit_merger_0_altera_axi_master_id_pad:m0_awaddr -> axi_conduit_merger_0_altera_axi_master_agent:awaddr
	wire    [1:0] axi_conduit_merger_0_altera_axi_master_id_pad_m0_bresp;              // axi_conduit_merger_0_altera_axi_master_agent:bresp -> axi_conduit_merger_0_altera_axi_master_id_pad:m0_bresp
	wire          axi_conduit_merger_0_altera_axi_master_id_pad_m0_arready;            // axi_conduit_merger_0_altera_axi_master_agent:arready -> axi_conduit_merger_0_altera_axi_master_id_pad:m0_arready
	wire  [127:0] axi_conduit_merger_0_altera_axi_master_id_pad_m0_rdata;              // axi_conduit_merger_0_altera_axi_master_agent:rdata -> axi_conduit_merger_0_altera_axi_master_id_pad:m0_rdata
	wire          axi_conduit_merger_0_altera_axi_master_id_pad_m0_awready;            // axi_conduit_merger_0_altera_axi_master_agent:awready -> axi_conduit_merger_0_altera_axi_master_id_pad:m0_awready
	wire    [1:0] axi_conduit_merger_0_altera_axi_master_id_pad_m0_arburst;            // axi_conduit_merger_0_altera_axi_master_id_pad:m0_arburst -> axi_conduit_merger_0_altera_axi_master_agent:arburst
	wire    [2:0] axi_conduit_merger_0_altera_axi_master_id_pad_m0_arsize;             // axi_conduit_merger_0_altera_axi_master_id_pad:m0_arsize -> axi_conduit_merger_0_altera_axi_master_agent:arsize
	wire          axi_conduit_merger_0_altera_axi_master_id_pad_m0_bready;             // axi_conduit_merger_0_altera_axi_master_id_pad:m0_bready -> axi_conduit_merger_0_altera_axi_master_agent:bready
	wire          axi_conduit_merger_0_altera_axi_master_id_pad_m0_rlast;              // axi_conduit_merger_0_altera_axi_master_agent:rlast -> axi_conduit_merger_0_altera_axi_master_id_pad:m0_rlast
	wire          axi_conduit_merger_0_altera_axi_master_id_pad_m0_wlast;              // axi_conduit_merger_0_altera_axi_master_id_pad:m0_wlast -> axi_conduit_merger_0_altera_axi_master_agent:wlast
	wire    [1:0] axi_conduit_merger_0_altera_axi_master_id_pad_m0_rresp;              // axi_conduit_merger_0_altera_axi_master_agent:rresp -> axi_conduit_merger_0_altera_axi_master_id_pad:m0_rresp
	wire    [7:0] axi_conduit_merger_0_altera_axi_master_id_pad_m0_awid;               // axi_conduit_merger_0_altera_axi_master_id_pad:m0_awid -> axi_conduit_merger_0_altera_axi_master_agent:awid
	wire    [7:0] axi_conduit_merger_0_altera_axi_master_id_pad_m0_bid;                // axi_conduit_merger_0_altera_axi_master_agent:bid -> axi_conduit_merger_0_altera_axi_master_id_pad:m0_bid
	wire          axi_conduit_merger_0_altera_axi_master_id_pad_m0_bvalid;             // axi_conduit_merger_0_altera_axi_master_agent:bvalid -> axi_conduit_merger_0_altera_axi_master_id_pad:m0_bvalid
	wire    [2:0] axi_conduit_merger_0_altera_axi_master_id_pad_m0_awsize;             // axi_conduit_merger_0_altera_axi_master_id_pad:m0_awsize -> axi_conduit_merger_0_altera_axi_master_agent:awsize
	wire          axi_conduit_merger_0_altera_axi_master_id_pad_m0_awvalid;            // axi_conduit_merger_0_altera_axi_master_id_pad:m0_awvalid -> axi_conduit_merger_0_altera_axi_master_agent:awvalid
	wire    [4:0] axi_conduit_merger_0_altera_axi_master_id_pad_m0_aruser;             // axi_conduit_merger_0_altera_axi_master_id_pad:m0_aruser -> axi_conduit_merger_0_altera_axi_master_agent:aruser
	wire          axi_conduit_merger_0_altera_axi_master_id_pad_m0_rvalid;             // axi_conduit_merger_0_altera_axi_master_agent:rvalid -> axi_conduit_merger_0_altera_axi_master_id_pad:m0_rvalid
	wire          rsp_mux_src_valid;                                                   // rsp_mux:src_valid -> axi_conduit_merger_0_altera_axi_master_agent:write_rp_valid
	wire  [234:0] rsp_mux_src_data;                                                    // rsp_mux:src_data -> axi_conduit_merger_0_altera_axi_master_agent:write_rp_data
	wire          rsp_mux_src_ready;                                                   // axi_conduit_merger_0_altera_axi_master_agent:write_rp_ready -> rsp_mux:src_ready
	wire    [1:0] rsp_mux_src_channel;                                                 // rsp_mux:src_channel -> axi_conduit_merger_0_altera_axi_master_agent:write_rp_channel
	wire          rsp_mux_src_startofpacket;                                           // rsp_mux:src_startofpacket -> axi_conduit_merger_0_altera_axi_master_agent:write_rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                             // rsp_mux:src_endofpacket -> axi_conduit_merger_0_altera_axi_master_agent:write_rp_endofpacket
	wire          rsp_mux_001_src_valid;                                               // rsp_mux_001:src_valid -> axi_conduit_merger_0_altera_axi_master_agent:read_rp_valid
	wire  [234:0] rsp_mux_001_src_data;                                                // rsp_mux_001:src_data -> axi_conduit_merger_0_altera_axi_master_agent:read_rp_data
	wire          rsp_mux_001_src_ready;                                               // axi_conduit_merger_0_altera_axi_master_agent:read_rp_ready -> rsp_mux_001:src_ready
	wire    [1:0] rsp_mux_001_src_channel;                                             // rsp_mux_001:src_channel -> axi_conduit_merger_0_altera_axi_master_agent:read_rp_channel
	wire          rsp_mux_001_src_startofpacket;                                       // rsp_mux_001:src_startofpacket -> axi_conduit_merger_0_altera_axi_master_agent:read_rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                         // rsp_mux_001:src_endofpacket -> axi_conduit_merger_0_altera_axi_master_agent:read_rp_endofpacket
	wire          axi_conduit_merger_0_altera_axi_master_agent_write_cp_valid;         // axi_conduit_merger_0_altera_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [234:0] axi_conduit_merger_0_altera_axi_master_agent_write_cp_data;          // axi_conduit_merger_0_altera_axi_master_agent:write_cp_data -> router:sink_data
	wire          axi_conduit_merger_0_altera_axi_master_agent_write_cp_ready;         // router:sink_ready -> axi_conduit_merger_0_altera_axi_master_agent:write_cp_ready
	wire          axi_conduit_merger_0_altera_axi_master_agent_write_cp_startofpacket; // axi_conduit_merger_0_altera_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          axi_conduit_merger_0_altera_axi_master_agent_write_cp_endofpacket;   // axi_conduit_merger_0_altera_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                    // router:src_valid -> cmd_demux:sink_valid
	wire  [234:0] router_src_data;                                                     // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                    // cmd_demux:sink_ready -> router:src_ready
	wire    [1:0] router_src_channel;                                                  // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                            // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                              // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          axi_conduit_merger_0_altera_axi_master_agent_read_cp_valid;          // axi_conduit_merger_0_altera_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [234:0] axi_conduit_merger_0_altera_axi_master_agent_read_cp_data;           // axi_conduit_merger_0_altera_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          axi_conduit_merger_0_altera_axi_master_agent_read_cp_ready;          // router_001:sink_ready -> axi_conduit_merger_0_altera_axi_master_agent:read_cp_ready
	wire          axi_conduit_merger_0_altera_axi_master_agent_read_cp_startofpacket;  // axi_conduit_merger_0_altera_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          axi_conduit_merger_0_altera_axi_master_agent_read_cp_endofpacket;    // axi_conduit_merger_0_altera_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [234:0] router_001_src_data;                                                 // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                // cmd_demux_001:sink_ready -> router_001:src_ready
	wire    [1:0] router_001_src_channel;                                              // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                        // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                          // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          router_002_src_valid;                                                // router_002:src_valid -> hps_0_f2h_axi_slave_wr_rsp_width_adapter:in_valid
	wire  [162:0] router_002_src_data;                                                 // router_002:src_data -> hps_0_f2h_axi_slave_wr_rsp_width_adapter:in_data
	wire          router_002_src_ready;                                                // hps_0_f2h_axi_slave_wr_rsp_width_adapter:in_ready -> router_002:src_ready
	wire    [1:0] router_002_src_channel;                                              // router_002:src_channel -> hps_0_f2h_axi_slave_wr_rsp_width_adapter:in_channel
	wire          router_002_src_startofpacket;                                        // router_002:src_startofpacket -> hps_0_f2h_axi_slave_wr_rsp_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                          // router_002:src_endofpacket -> hps_0_f2h_axi_slave_wr_rsp_width_adapter:in_endofpacket
	wire          hps_0_f2h_axi_slave_wr_rsp_width_adapter_src_valid;                  // hps_0_f2h_axi_slave_wr_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [234:0] hps_0_f2h_axi_slave_wr_rsp_width_adapter_src_data;                   // hps_0_f2h_axi_slave_wr_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          hps_0_f2h_axi_slave_wr_rsp_width_adapter_src_ready;                  // rsp_demux:sink_ready -> hps_0_f2h_axi_slave_wr_rsp_width_adapter:out_ready
	wire    [1:0] hps_0_f2h_axi_slave_wr_rsp_width_adapter_src_channel;                // hps_0_f2h_axi_slave_wr_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          hps_0_f2h_axi_slave_wr_rsp_width_adapter_src_startofpacket;          // hps_0_f2h_axi_slave_wr_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          hps_0_f2h_axi_slave_wr_rsp_width_adapter_src_endofpacket;            // hps_0_f2h_axi_slave_wr_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_003_src_valid;                                                // router_003:src_valid -> hps_0_f2h_axi_slave_rd_rsp_width_adapter:in_valid
	wire  [162:0] router_003_src_data;                                                 // router_003:src_data -> hps_0_f2h_axi_slave_rd_rsp_width_adapter:in_data
	wire          router_003_src_ready;                                                // hps_0_f2h_axi_slave_rd_rsp_width_adapter:in_ready -> router_003:src_ready
	wire    [1:0] router_003_src_channel;                                              // router_003:src_channel -> hps_0_f2h_axi_slave_rd_rsp_width_adapter:in_channel
	wire          router_003_src_startofpacket;                                        // router_003:src_startofpacket -> hps_0_f2h_axi_slave_rd_rsp_width_adapter:in_startofpacket
	wire          router_003_src_endofpacket;                                          // router_003:src_endofpacket -> hps_0_f2h_axi_slave_rd_rsp_width_adapter:in_endofpacket
	wire          hps_0_f2h_axi_slave_rd_rsp_width_adapter_src_valid;                  // hps_0_f2h_axi_slave_rd_rsp_width_adapter:out_valid -> rsp_demux_001:sink_valid
	wire  [234:0] hps_0_f2h_axi_slave_rd_rsp_width_adapter_src_data;                   // hps_0_f2h_axi_slave_rd_rsp_width_adapter:out_data -> rsp_demux_001:sink_data
	wire          hps_0_f2h_axi_slave_rd_rsp_width_adapter_src_ready;                  // rsp_demux_001:sink_ready -> hps_0_f2h_axi_slave_rd_rsp_width_adapter:out_ready
	wire    [1:0] hps_0_f2h_axi_slave_rd_rsp_width_adapter_src_channel;                // hps_0_f2h_axi_slave_rd_rsp_width_adapter:out_channel -> rsp_demux_001:sink_channel
	wire          hps_0_f2h_axi_slave_rd_rsp_width_adapter_src_startofpacket;          // hps_0_f2h_axi_slave_rd_rsp_width_adapter:out_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          hps_0_f2h_axi_slave_rd_rsp_width_adapter_src_endofpacket;            // hps_0_f2h_axi_slave_rd_rsp_width_adapter:out_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          cmd_mux_src_valid;                                                   // cmd_mux:src_valid -> hps_0_f2h_axi_slave_wr_cmd_width_adapter:in_valid
	wire  [234:0] cmd_mux_src_data;                                                    // cmd_mux:src_data -> hps_0_f2h_axi_slave_wr_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                   // hps_0_f2h_axi_slave_wr_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [1:0] cmd_mux_src_channel;                                                 // cmd_mux:src_channel -> hps_0_f2h_axi_slave_wr_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                           // cmd_mux:src_startofpacket -> hps_0_f2h_axi_slave_wr_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                             // cmd_mux:src_endofpacket -> hps_0_f2h_axi_slave_wr_cmd_width_adapter:in_endofpacket
	wire          hps_0_f2h_axi_slave_wr_cmd_width_adapter_src_valid;                  // hps_0_f2h_axi_slave_wr_cmd_width_adapter:out_valid -> hps_0_f2h_axi_slave_wr_burst_adapter:sink0_valid
	wire  [162:0] hps_0_f2h_axi_slave_wr_cmd_width_adapter_src_data;                   // hps_0_f2h_axi_slave_wr_cmd_width_adapter:out_data -> hps_0_f2h_axi_slave_wr_burst_adapter:sink0_data
	wire          hps_0_f2h_axi_slave_wr_cmd_width_adapter_src_ready;                  // hps_0_f2h_axi_slave_wr_burst_adapter:sink0_ready -> hps_0_f2h_axi_slave_wr_cmd_width_adapter:out_ready
	wire    [1:0] hps_0_f2h_axi_slave_wr_cmd_width_adapter_src_channel;                // hps_0_f2h_axi_slave_wr_cmd_width_adapter:out_channel -> hps_0_f2h_axi_slave_wr_burst_adapter:sink0_channel
	wire          hps_0_f2h_axi_slave_wr_cmd_width_adapter_src_startofpacket;          // hps_0_f2h_axi_slave_wr_cmd_width_adapter:out_startofpacket -> hps_0_f2h_axi_slave_wr_burst_adapter:sink0_startofpacket
	wire          hps_0_f2h_axi_slave_wr_cmd_width_adapter_src_endofpacket;            // hps_0_f2h_axi_slave_wr_cmd_width_adapter:out_endofpacket -> hps_0_f2h_axi_slave_wr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_001_src_valid;                                               // cmd_mux_001:src_valid -> hps_0_f2h_axi_slave_rd_cmd_width_adapter:in_valid
	wire  [234:0] cmd_mux_001_src_data;                                                // cmd_mux_001:src_data -> hps_0_f2h_axi_slave_rd_cmd_width_adapter:in_data
	wire          cmd_mux_001_src_ready;                                               // hps_0_f2h_axi_slave_rd_cmd_width_adapter:in_ready -> cmd_mux_001:src_ready
	wire    [1:0] cmd_mux_001_src_channel;                                             // cmd_mux_001:src_channel -> hps_0_f2h_axi_slave_rd_cmd_width_adapter:in_channel
	wire          cmd_mux_001_src_startofpacket;                                       // cmd_mux_001:src_startofpacket -> hps_0_f2h_axi_slave_rd_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                         // cmd_mux_001:src_endofpacket -> hps_0_f2h_axi_slave_rd_cmd_width_adapter:in_endofpacket
	wire          hps_0_f2h_axi_slave_rd_cmd_width_adapter_src_valid;                  // hps_0_f2h_axi_slave_rd_cmd_width_adapter:out_valid -> hps_0_f2h_axi_slave_rd_burst_adapter:sink0_valid
	wire  [162:0] hps_0_f2h_axi_slave_rd_cmd_width_adapter_src_data;                   // hps_0_f2h_axi_slave_rd_cmd_width_adapter:out_data -> hps_0_f2h_axi_slave_rd_burst_adapter:sink0_data
	wire          hps_0_f2h_axi_slave_rd_cmd_width_adapter_src_ready;                  // hps_0_f2h_axi_slave_rd_burst_adapter:sink0_ready -> hps_0_f2h_axi_slave_rd_cmd_width_adapter:out_ready
	wire    [1:0] hps_0_f2h_axi_slave_rd_cmd_width_adapter_src_channel;                // hps_0_f2h_axi_slave_rd_cmd_width_adapter:out_channel -> hps_0_f2h_axi_slave_rd_burst_adapter:sink0_channel
	wire          hps_0_f2h_axi_slave_rd_cmd_width_adapter_src_startofpacket;          // hps_0_f2h_axi_slave_rd_cmd_width_adapter:out_startofpacket -> hps_0_f2h_axi_slave_rd_burst_adapter:sink0_startofpacket
	wire          hps_0_f2h_axi_slave_rd_cmd_width_adapter_src_endofpacket;            // hps_0_f2h_axi_slave_rd_cmd_width_adapter:out_endofpacket -> hps_0_f2h_axi_slave_rd_burst_adapter:sink0_endofpacket
	wire          hps_0_f2h_axi_slave_wr_burst_adapter_source0_valid;                  // hps_0_f2h_axi_slave_wr_burst_adapter:source0_valid -> agent_pipeline:in_valid
	wire  [162:0] hps_0_f2h_axi_slave_wr_burst_adapter_source0_data;                   // hps_0_f2h_axi_slave_wr_burst_adapter:source0_data -> agent_pipeline:in_data
	wire          hps_0_f2h_axi_slave_wr_burst_adapter_source0_ready;                  // agent_pipeline:in_ready -> hps_0_f2h_axi_slave_wr_burst_adapter:source0_ready
	wire    [1:0] hps_0_f2h_axi_slave_wr_burst_adapter_source0_channel;                // hps_0_f2h_axi_slave_wr_burst_adapter:source0_channel -> agent_pipeline:in_channel
	wire          hps_0_f2h_axi_slave_wr_burst_adapter_source0_startofpacket;          // hps_0_f2h_axi_slave_wr_burst_adapter:source0_startofpacket -> agent_pipeline:in_startofpacket
	wire          hps_0_f2h_axi_slave_wr_burst_adapter_source0_endofpacket;            // hps_0_f2h_axi_slave_wr_burst_adapter:source0_endofpacket -> agent_pipeline:in_endofpacket
	wire          agent_pipeline_source0_valid;                                        // agent_pipeline:out_valid -> hps_0_f2h_axi_slave_agent:write_cp_valid
	wire  [162:0] agent_pipeline_source0_data;                                         // agent_pipeline:out_data -> hps_0_f2h_axi_slave_agent:write_cp_data
	wire          agent_pipeline_source0_ready;                                        // hps_0_f2h_axi_slave_agent:write_cp_ready -> agent_pipeline:out_ready
	wire    [1:0] agent_pipeline_source0_channel;                                      // agent_pipeline:out_channel -> hps_0_f2h_axi_slave_agent:write_cp_channel
	wire          agent_pipeline_source0_startofpacket;                                // agent_pipeline:out_startofpacket -> hps_0_f2h_axi_slave_agent:write_cp_startofpacket
	wire          agent_pipeline_source0_endofpacket;                                  // agent_pipeline:out_endofpacket -> hps_0_f2h_axi_slave_agent:write_cp_endofpacket
	wire          hps_0_f2h_axi_slave_rd_burst_adapter_source0_valid;                  // hps_0_f2h_axi_slave_rd_burst_adapter:source0_valid -> agent_pipeline_001:in_valid
	wire  [162:0] hps_0_f2h_axi_slave_rd_burst_adapter_source0_data;                   // hps_0_f2h_axi_slave_rd_burst_adapter:source0_data -> agent_pipeline_001:in_data
	wire          hps_0_f2h_axi_slave_rd_burst_adapter_source0_ready;                  // agent_pipeline_001:in_ready -> hps_0_f2h_axi_slave_rd_burst_adapter:source0_ready
	wire    [1:0] hps_0_f2h_axi_slave_rd_burst_adapter_source0_channel;                // hps_0_f2h_axi_slave_rd_burst_adapter:source0_channel -> agent_pipeline_001:in_channel
	wire          hps_0_f2h_axi_slave_rd_burst_adapter_source0_startofpacket;          // hps_0_f2h_axi_slave_rd_burst_adapter:source0_startofpacket -> agent_pipeline_001:in_startofpacket
	wire          hps_0_f2h_axi_slave_rd_burst_adapter_source0_endofpacket;            // hps_0_f2h_axi_slave_rd_burst_adapter:source0_endofpacket -> agent_pipeline_001:in_endofpacket
	wire          agent_pipeline_001_source0_valid;                                    // agent_pipeline_001:out_valid -> hps_0_f2h_axi_slave_agent:read_cp_valid
	wire  [162:0] agent_pipeline_001_source0_data;                                     // agent_pipeline_001:out_data -> hps_0_f2h_axi_slave_agent:read_cp_data
	wire          agent_pipeline_001_source0_ready;                                    // hps_0_f2h_axi_slave_agent:read_cp_ready -> agent_pipeline_001:out_ready
	wire    [1:0] agent_pipeline_001_source0_channel;                                  // agent_pipeline_001:out_channel -> hps_0_f2h_axi_slave_agent:read_cp_channel
	wire          agent_pipeline_001_source0_startofpacket;                            // agent_pipeline_001:out_startofpacket -> hps_0_f2h_axi_slave_agent:read_cp_startofpacket
	wire          agent_pipeline_001_source0_endofpacket;                              // agent_pipeline_001:out_endofpacket -> hps_0_f2h_axi_slave_agent:read_cp_endofpacket
	wire          hps_0_f2h_axi_slave_agent_write_rp_valid;                            // hps_0_f2h_axi_slave_agent:write_rp_valid -> agent_pipeline_002:in_valid
	wire  [162:0] hps_0_f2h_axi_slave_agent_write_rp_data;                             // hps_0_f2h_axi_slave_agent:write_rp_data -> agent_pipeline_002:in_data
	wire          hps_0_f2h_axi_slave_agent_write_rp_ready;                            // agent_pipeline_002:in_ready -> hps_0_f2h_axi_slave_agent:write_rp_ready
	wire          hps_0_f2h_axi_slave_agent_write_rp_startofpacket;                    // hps_0_f2h_axi_slave_agent:write_rp_startofpacket -> agent_pipeline_002:in_startofpacket
	wire          hps_0_f2h_axi_slave_agent_write_rp_endofpacket;                      // hps_0_f2h_axi_slave_agent:write_rp_endofpacket -> agent_pipeline_002:in_endofpacket
	wire          agent_pipeline_002_source0_valid;                                    // agent_pipeline_002:out_valid -> router_002:sink_valid
	wire  [162:0] agent_pipeline_002_source0_data;                                     // agent_pipeline_002:out_data -> router_002:sink_data
	wire          agent_pipeline_002_source0_ready;                                    // router_002:sink_ready -> agent_pipeline_002:out_ready
	wire          agent_pipeline_002_source0_startofpacket;                            // agent_pipeline_002:out_startofpacket -> router_002:sink_startofpacket
	wire          agent_pipeline_002_source0_endofpacket;                              // agent_pipeline_002:out_endofpacket -> router_002:sink_endofpacket
	wire          hps_0_f2h_axi_slave_agent_read_rp_valid;                             // hps_0_f2h_axi_slave_agent:read_rp_valid -> agent_pipeline_003:in_valid
	wire  [162:0] hps_0_f2h_axi_slave_agent_read_rp_data;                              // hps_0_f2h_axi_slave_agent:read_rp_data -> agent_pipeline_003:in_data
	wire          hps_0_f2h_axi_slave_agent_read_rp_ready;                             // agent_pipeline_003:in_ready -> hps_0_f2h_axi_slave_agent:read_rp_ready
	wire          hps_0_f2h_axi_slave_agent_read_rp_startofpacket;                     // hps_0_f2h_axi_slave_agent:read_rp_startofpacket -> agent_pipeline_003:in_startofpacket
	wire          hps_0_f2h_axi_slave_agent_read_rp_endofpacket;                       // hps_0_f2h_axi_slave_agent:read_rp_endofpacket -> agent_pipeline_003:in_endofpacket
	wire          agent_pipeline_003_source0_valid;                                    // agent_pipeline_003:out_valid -> router_003:sink_valid
	wire  [162:0] agent_pipeline_003_source0_data;                                     // agent_pipeline_003:out_data -> router_003:sink_data
	wire          agent_pipeline_003_source0_ready;                                    // router_003:sink_ready -> agent_pipeline_003:out_ready
	wire          agent_pipeline_003_source0_startofpacket;                            // agent_pipeline_003:out_startofpacket -> router_003:sink_startofpacket
	wire          agent_pipeline_003_source0_endofpacket;                              // agent_pipeline_003:out_endofpacket -> router_003:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                // cmd_demux:src0_valid -> mux_pipeline:in_valid
	wire  [234:0] cmd_demux_src0_data;                                                 // cmd_demux:src0_data -> mux_pipeline:in_data
	wire          cmd_demux_src0_ready;                                                // mux_pipeline:in_ready -> cmd_demux:src0_ready
	wire    [1:0] cmd_demux_src0_channel;                                              // cmd_demux:src0_channel -> mux_pipeline:in_channel
	wire          cmd_demux_src0_startofpacket;                                        // cmd_demux:src0_startofpacket -> mux_pipeline:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                          // cmd_demux:src0_endofpacket -> mux_pipeline:in_endofpacket
	wire          mux_pipeline_source0_valid;                                          // mux_pipeline:out_valid -> cmd_mux:sink0_valid
	wire  [234:0] mux_pipeline_source0_data;                                           // mux_pipeline:out_data -> cmd_mux:sink0_data
	wire          mux_pipeline_source0_ready;                                          // cmd_mux:sink0_ready -> mux_pipeline:out_ready
	wire    [1:0] mux_pipeline_source0_channel;                                        // mux_pipeline:out_channel -> cmd_mux:sink0_channel
	wire          mux_pipeline_source0_startofpacket;                                  // mux_pipeline:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          mux_pipeline_source0_endofpacket;                                    // mux_pipeline:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                            // cmd_demux_001:src0_valid -> mux_pipeline_001:in_valid
	wire  [234:0] cmd_demux_001_src0_data;                                             // cmd_demux_001:src0_data -> mux_pipeline_001:in_data
	wire          cmd_demux_001_src0_ready;                                            // mux_pipeline_001:in_ready -> cmd_demux_001:src0_ready
	wire    [1:0] cmd_demux_001_src0_channel;                                          // cmd_demux_001:src0_channel -> mux_pipeline_001:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                    // cmd_demux_001:src0_startofpacket -> mux_pipeline_001:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                      // cmd_demux_001:src0_endofpacket -> mux_pipeline_001:in_endofpacket
	wire          mux_pipeline_001_source0_valid;                                      // mux_pipeline_001:out_valid -> cmd_mux_001:sink0_valid
	wire  [234:0] mux_pipeline_001_source0_data;                                       // mux_pipeline_001:out_data -> cmd_mux_001:sink0_data
	wire          mux_pipeline_001_source0_ready;                                      // cmd_mux_001:sink0_ready -> mux_pipeline_001:out_ready
	wire    [1:0] mux_pipeline_001_source0_channel;                                    // mux_pipeline_001:out_channel -> cmd_mux_001:sink0_channel
	wire          mux_pipeline_001_source0_startofpacket;                              // mux_pipeline_001:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          mux_pipeline_001_source0_endofpacket;                                // mux_pipeline_001:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                // rsp_demux:src0_valid -> mux_pipeline_002:in_valid
	wire  [234:0] rsp_demux_src0_data;                                                 // rsp_demux:src0_data -> mux_pipeline_002:in_data
	wire          rsp_demux_src0_ready;                                                // mux_pipeline_002:in_ready -> rsp_demux:src0_ready
	wire    [1:0] rsp_demux_src0_channel;                                              // rsp_demux:src0_channel -> mux_pipeline_002:in_channel
	wire          rsp_demux_src0_startofpacket;                                        // rsp_demux:src0_startofpacket -> mux_pipeline_002:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                          // rsp_demux:src0_endofpacket -> mux_pipeline_002:in_endofpacket
	wire          mux_pipeline_002_source0_valid;                                      // mux_pipeline_002:out_valid -> rsp_mux:sink0_valid
	wire  [234:0] mux_pipeline_002_source0_data;                                       // mux_pipeline_002:out_data -> rsp_mux:sink0_data
	wire          mux_pipeline_002_source0_ready;                                      // rsp_mux:sink0_ready -> mux_pipeline_002:out_ready
	wire    [1:0] mux_pipeline_002_source0_channel;                                    // mux_pipeline_002:out_channel -> rsp_mux:sink0_channel
	wire          mux_pipeline_002_source0_startofpacket;                              // mux_pipeline_002:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          mux_pipeline_002_source0_endofpacket;                                // mux_pipeline_002:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                            // rsp_demux_001:src0_valid -> mux_pipeline_003:in_valid
	wire  [234:0] rsp_demux_001_src0_data;                                             // rsp_demux_001:src0_data -> mux_pipeline_003:in_data
	wire          rsp_demux_001_src0_ready;                                            // mux_pipeline_003:in_ready -> rsp_demux_001:src0_ready
	wire    [1:0] rsp_demux_001_src0_channel;                                          // rsp_demux_001:src0_channel -> mux_pipeline_003:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                    // rsp_demux_001:src0_startofpacket -> mux_pipeline_003:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                      // rsp_demux_001:src0_endofpacket -> mux_pipeline_003:in_endofpacket
	wire          mux_pipeline_003_source0_valid;                                      // mux_pipeline_003:out_valid -> rsp_mux_001:sink0_valid
	wire  [234:0] mux_pipeline_003_source0_data;                                       // mux_pipeline_003:out_data -> rsp_mux_001:sink0_data
	wire          mux_pipeline_003_source0_ready;                                      // rsp_mux_001:sink0_ready -> mux_pipeline_003:out_ready
	wire    [1:0] mux_pipeline_003_source0_channel;                                    // mux_pipeline_003:out_channel -> rsp_mux_001:sink0_channel
	wire          mux_pipeline_003_source0_startofpacket;                              // mux_pipeline_003:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          mux_pipeline_003_source0_endofpacket;                                // mux_pipeline_003:out_endofpacket -> rsp_mux_001:sink0_endofpacket

	altera_merlin_axi_translator #(
		.USE_S0_AWID                       (1),
		.USE_S0_AWREGION                   (0),
		.USE_M0_AWREGION                   (1),
		.USE_S0_AWLEN                      (1),
		.USE_S0_AWSIZE                     (1),
		.USE_S0_AWBURST                    (1),
		.USE_S0_AWLOCK                     (1),
		.USE_M0_AWLOCK                     (1),
		.USE_S0_AWCACHE                    (1),
		.USE_M0_AWCACHE                    (1),
		.USE_M0_AWPROT                     (1),
		.USE_S0_AWQOS                      (0),
		.USE_M0_AWQOS                      (1),
		.USE_S0_WSTRB                      (1),
		.USE_M0_WLAST                      (1),
		.USE_S0_BID                        (1),
		.USE_S0_BRESP                      (1),
		.USE_M0_BRESP                      (1),
		.USE_S0_ARID                       (1),
		.USE_S0_ARREGION                   (0),
		.USE_M0_ARREGION                   (1),
		.USE_S0_ARLEN                      (1),
		.USE_S0_ARSIZE                     (1),
		.USE_S0_ARBURST                    (1),
		.USE_S0_ARLOCK                     (1),
		.USE_M0_ARLOCK                     (1),
		.USE_M0_ARCACHE                    (1),
		.USE_M0_ARQOS                      (1),
		.USE_M0_ARPROT                     (1),
		.USE_S0_ARCACHE                    (1),
		.USE_S0_ARQOS                      (0),
		.USE_S0_RID                        (1),
		.USE_S0_RRESP                      (1),
		.USE_M0_RRESP                      (1),
		.USE_S0_RLAST                      (1),
		.M0_ID_WIDTH                       (8),
		.DATA_WIDTH                        (128),
		.S0_ID_WIDTH                       (8),
		.M0_ADDR_WIDTH                     (32),
		.S0_WRITE_ADDR_USER_WIDTH          (5),
		.S0_READ_ADDR_USER_WIDTH           (5),
		.M0_WRITE_ADDR_USER_WIDTH          (5),
		.M0_READ_ADDR_USER_WIDTH           (5),
		.S0_WRITE_DATA_USER_WIDTH          (1),
		.S0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.S0_READ_DATA_USER_WIDTH           (1),
		.M0_WRITE_DATA_USER_WIDTH          (1),
		.M0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.M0_READ_DATA_USER_WIDTH           (1),
		.S0_ADDR_WIDTH                     (32),
		.USE_S0_AWUSER                     (1),
		.USE_S0_ARUSER                     (1),
		.USE_S0_WUSER                      (0),
		.USE_S0_RUSER                      (0),
		.USE_S0_BUSER                      (0),
		.USE_M0_AWUSER                     (1),
		.USE_M0_ARUSER                     (1),
		.USE_M0_WUSER                      (0),
		.USE_M0_RUSER                      (0),
		.USE_M0_BUSER                      (0),
		.M0_AXI_VERSION                    ("AXI3"),
		.M0_BURST_LENGTH_WIDTH             (4),
		.S0_BURST_LENGTH_WIDTH             (4),
		.M0_LOCK_WIDTH                     (2),
		.S0_LOCK_WIDTH                     (2),
		.S0_AXI_VERSION                    ("AXI3")
	) axi_conduit_merger_0_altera_axi_master_id_pad (
		.aclk        (clk_100m_clk_clk),                                                                     //       clk.clk
		.aresetn     (~axi_conduit_merger_0_altera_axi_master_id_pad_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset_n
		.m0_awid     (axi_conduit_merger_0_altera_axi_master_id_pad_m0_awid),                                //        m0.awid
		.m0_awaddr   (axi_conduit_merger_0_altera_axi_master_id_pad_m0_awaddr),                              //          .awaddr
		.m0_awlen    (axi_conduit_merger_0_altera_axi_master_id_pad_m0_awlen),                               //          .awlen
		.m0_awsize   (axi_conduit_merger_0_altera_axi_master_id_pad_m0_awsize),                              //          .awsize
		.m0_awburst  (axi_conduit_merger_0_altera_axi_master_id_pad_m0_awburst),                             //          .awburst
		.m0_awlock   (axi_conduit_merger_0_altera_axi_master_id_pad_m0_awlock),                              //          .awlock
		.m0_awcache  (axi_conduit_merger_0_altera_axi_master_id_pad_m0_awcache),                             //          .awcache
		.m0_awprot   (axi_conduit_merger_0_altera_axi_master_id_pad_m0_awprot),                              //          .awprot
		.m0_awuser   (axi_conduit_merger_0_altera_axi_master_id_pad_m0_awuser),                              //          .awuser
		.m0_awvalid  (axi_conduit_merger_0_altera_axi_master_id_pad_m0_awvalid),                             //          .awvalid
		.m0_awready  (axi_conduit_merger_0_altera_axi_master_id_pad_m0_awready),                             //          .awready
		.m0_wid      (axi_conduit_merger_0_altera_axi_master_id_pad_m0_wid),                                 //          .wid
		.m0_wdata    (axi_conduit_merger_0_altera_axi_master_id_pad_m0_wdata),                               //          .wdata
		.m0_wstrb    (axi_conduit_merger_0_altera_axi_master_id_pad_m0_wstrb),                               //          .wstrb
		.m0_wlast    (axi_conduit_merger_0_altera_axi_master_id_pad_m0_wlast),                               //          .wlast
		.m0_wvalid   (axi_conduit_merger_0_altera_axi_master_id_pad_m0_wvalid),                              //          .wvalid
		.m0_wready   (axi_conduit_merger_0_altera_axi_master_id_pad_m0_wready),                              //          .wready
		.m0_bid      (axi_conduit_merger_0_altera_axi_master_id_pad_m0_bid),                                 //          .bid
		.m0_bresp    (axi_conduit_merger_0_altera_axi_master_id_pad_m0_bresp),                               //          .bresp
		.m0_bvalid   (axi_conduit_merger_0_altera_axi_master_id_pad_m0_bvalid),                              //          .bvalid
		.m0_bready   (axi_conduit_merger_0_altera_axi_master_id_pad_m0_bready),                              //          .bready
		.m0_arid     (axi_conduit_merger_0_altera_axi_master_id_pad_m0_arid),                                //          .arid
		.m0_araddr   (axi_conduit_merger_0_altera_axi_master_id_pad_m0_araddr),                              //          .araddr
		.m0_arlen    (axi_conduit_merger_0_altera_axi_master_id_pad_m0_arlen),                               //          .arlen
		.m0_arsize   (axi_conduit_merger_0_altera_axi_master_id_pad_m0_arsize),                              //          .arsize
		.m0_arburst  (axi_conduit_merger_0_altera_axi_master_id_pad_m0_arburst),                             //          .arburst
		.m0_arlock   (axi_conduit_merger_0_altera_axi_master_id_pad_m0_arlock),                              //          .arlock
		.m0_arcache  (axi_conduit_merger_0_altera_axi_master_id_pad_m0_arcache),                             //          .arcache
		.m0_arprot   (axi_conduit_merger_0_altera_axi_master_id_pad_m0_arprot),                              //          .arprot
		.m0_aruser   (axi_conduit_merger_0_altera_axi_master_id_pad_m0_aruser),                              //          .aruser
		.m0_arvalid  (axi_conduit_merger_0_altera_axi_master_id_pad_m0_arvalid),                             //          .arvalid
		.m0_arready  (axi_conduit_merger_0_altera_axi_master_id_pad_m0_arready),                             //          .arready
		.m0_rid      (axi_conduit_merger_0_altera_axi_master_id_pad_m0_rid),                                 //          .rid
		.m0_rdata    (axi_conduit_merger_0_altera_axi_master_id_pad_m0_rdata),                               //          .rdata
		.m0_rresp    (axi_conduit_merger_0_altera_axi_master_id_pad_m0_rresp),                               //          .rresp
		.m0_rlast    (axi_conduit_merger_0_altera_axi_master_id_pad_m0_rlast),                               //          .rlast
		.m0_rvalid   (axi_conduit_merger_0_altera_axi_master_id_pad_m0_rvalid),                              //          .rvalid
		.m0_rready   (axi_conduit_merger_0_altera_axi_master_id_pad_m0_rready),                              //          .rready
		.s0_awid     (axi_conduit_merger_0_altera_axi_master_awid),                                          //        s0.awid
		.s0_awaddr   (axi_conduit_merger_0_altera_axi_master_awaddr),                                        //          .awaddr
		.s0_awlen    (axi_conduit_merger_0_altera_axi_master_awlen),                                         //          .awlen
		.s0_awsize   (axi_conduit_merger_0_altera_axi_master_awsize),                                        //          .awsize
		.s0_awburst  (axi_conduit_merger_0_altera_axi_master_awburst),                                       //          .awburst
		.s0_awlock   (axi_conduit_merger_0_altera_axi_master_awlock),                                        //          .awlock
		.s0_awcache  (axi_conduit_merger_0_altera_axi_master_awcache),                                       //          .awcache
		.s0_awprot   (axi_conduit_merger_0_altera_axi_master_awprot),                                        //          .awprot
		.s0_awuser   (axi_conduit_merger_0_altera_axi_master_awuser),                                        //          .awuser
		.s0_awvalid  (axi_conduit_merger_0_altera_axi_master_awvalid),                                       //          .awvalid
		.s0_awready  (axi_conduit_merger_0_altera_axi_master_awready),                                       //          .awready
		.s0_wid      (axi_conduit_merger_0_altera_axi_master_wid),                                           //          .wid
		.s0_wdata    (axi_conduit_merger_0_altera_axi_master_wdata),                                         //          .wdata
		.s0_wstrb    (axi_conduit_merger_0_altera_axi_master_wstrb),                                         //          .wstrb
		.s0_wlast    (axi_conduit_merger_0_altera_axi_master_wlast),                                         //          .wlast
		.s0_wvalid   (axi_conduit_merger_0_altera_axi_master_wvalid),                                        //          .wvalid
		.s0_wready   (axi_conduit_merger_0_altera_axi_master_wready),                                        //          .wready
		.s0_bid      (axi_conduit_merger_0_altera_axi_master_bid),                                           //          .bid
		.s0_bresp    (axi_conduit_merger_0_altera_axi_master_bresp),                                         //          .bresp
		.s0_bvalid   (axi_conduit_merger_0_altera_axi_master_bvalid),                                        //          .bvalid
		.s0_bready   (axi_conduit_merger_0_altera_axi_master_bready),                                        //          .bready
		.s0_arid     (axi_conduit_merger_0_altera_axi_master_arid),                                          //          .arid
		.s0_araddr   (axi_conduit_merger_0_altera_axi_master_araddr),                                        //          .araddr
		.s0_arlen    (axi_conduit_merger_0_altera_axi_master_arlen),                                         //          .arlen
		.s0_arsize   (axi_conduit_merger_0_altera_axi_master_arsize),                                        //          .arsize
		.s0_arburst  (axi_conduit_merger_0_altera_axi_master_arburst),                                       //          .arburst
		.s0_arlock   (axi_conduit_merger_0_altera_axi_master_arlock),                                        //          .arlock
		.s0_arcache  (axi_conduit_merger_0_altera_axi_master_arcache),                                       //          .arcache
		.s0_arprot   (axi_conduit_merger_0_altera_axi_master_arprot),                                        //          .arprot
		.s0_aruser   (axi_conduit_merger_0_altera_axi_master_aruser),                                        //          .aruser
		.s0_arvalid  (axi_conduit_merger_0_altera_axi_master_arvalid),                                       //          .arvalid
		.s0_arready  (axi_conduit_merger_0_altera_axi_master_arready),                                       //          .arready
		.s0_rid      (axi_conduit_merger_0_altera_axi_master_rid),                                           //          .rid
		.s0_rdata    (axi_conduit_merger_0_altera_axi_master_rdata),                                         //          .rdata
		.s0_rresp    (axi_conduit_merger_0_altera_axi_master_rresp),                                         //          .rresp
		.s0_rlast    (axi_conduit_merger_0_altera_axi_master_rlast),                                         //          .rlast
		.s0_rvalid   (axi_conduit_merger_0_altera_axi_master_rvalid),                                        //          .rvalid
		.s0_rready   (axi_conduit_merger_0_altera_axi_master_rready),                                        //          .rready
		.s0_awqos    (4'b0000),                                                                              // (terminated)
		.s0_arqos    (4'b0000),                                                                              // (terminated)
		.s0_awregion (4'b0000),                                                                              // (terminated)
		.s0_arregion (4'b0000),                                                                              // (terminated)
		.s0_wuser    (64'b0000000000000000000000000000000000000000000000000000000000000000),                 // (terminated)
		.s0_ruser    (),                                                                                     // (terminated)
		.s0_buser    (),                                                                                     // (terminated)
		.m0_awqos    (),                                                                                     // (terminated)
		.m0_arqos    (),                                                                                     // (terminated)
		.m0_awregion (),                                                                                     // (terminated)
		.m0_arregion (),                                                                                     // (terminated)
		.m0_wuser    (),                                                                                     // (terminated)
		.m0_ruser    (64'b0000000000000000000000000000000000000000000000000000000000000000),                 // (terminated)
		.m0_buser    (64'b0000000000000000000000000000000000000000000000000000000000000000)                  // (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (8),
		.ADDR_WIDTH                (32),
		.RDATA_WIDTH               (128),
		.WDATA_WIDTH               (128),
		.ADDR_USER_WIDTH           (5),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (16),
		.READ_ISSUING_CAPABILITY   (16),
		.PKT_BEGIN_BURST           (211),
		.PKT_CACHE_H               (229),
		.PKT_CACHE_L               (226),
		.PKT_ADDR_SIDEBAND_H       (209),
		.PKT_ADDR_SIDEBAND_L       (205),
		.PKT_PROTECTION_H          (225),
		.PKT_PROTECTION_L          (223),
		.PKT_BURST_SIZE_H          (202),
		.PKT_BURST_SIZE_L          (200),
		.PKT_BURST_TYPE_H          (204),
		.PKT_BURST_TYPE_L          (203),
		.PKT_RESPONSE_STATUS_L     (230),
		.PKT_RESPONSE_STATUS_H     (231),
		.PKT_BURSTWRAP_H           (199),
		.PKT_BURSTWRAP_L           (191),
		.PKT_BYTE_CNT_H            (190),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_EXCLUSIVE       (181),
		.PKT_TRANS_LOCK            (180),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (213),
		.PKT_SRC_ID_L              (213),
		.PKT_DEST_ID_H             (214),
		.PKT_DEST_ID_L             (214),
		.PKT_THREAD_ID_H           (222),
		.PKT_THREAD_ID_L           (215),
		.PKT_QOS_L                 (212),
		.PKT_QOS_H                 (212),
		.PKT_ORI_BURST_SIZE_L      (232),
		.PKT_ORI_BURST_SIZE_H      (234),
		.PKT_DATA_SIDEBAND_H       (210),
		.PKT_DATA_SIDEBAND_L       (210),
		.ST_DATA_W                 (235),
		.ST_CHANNEL_W              (2),
		.ID                        (0)
	) axi_conduit_merger_0_altera_axi_master_agent (
		.aclk                   (clk_100m_clk_clk),                                                                     //              clk.clk
		.aresetn                (~axi_conduit_merger_0_altera_axi_master_id_pad_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (axi_conduit_merger_0_altera_axi_master_agent_write_cp_valid),                          //         write_cp.valid
		.write_cp_data          (axi_conduit_merger_0_altera_axi_master_agent_write_cp_data),                           //                 .data
		.write_cp_startofpacket (axi_conduit_merger_0_altera_axi_master_agent_write_cp_startofpacket),                  //                 .startofpacket
		.write_cp_endofpacket   (axi_conduit_merger_0_altera_axi_master_agent_write_cp_endofpacket),                    //                 .endofpacket
		.write_cp_ready         (axi_conduit_merger_0_altera_axi_master_agent_write_cp_ready),                          //                 .ready
		.write_rp_valid         (rsp_mux_src_valid),                                                                    //         write_rp.valid
		.write_rp_data          (rsp_mux_src_data),                                                                     //                 .data
		.write_rp_channel       (rsp_mux_src_channel),                                                                  //                 .channel
		.write_rp_startofpacket (rsp_mux_src_startofpacket),                                                            //                 .startofpacket
		.write_rp_endofpacket   (rsp_mux_src_endofpacket),                                                              //                 .endofpacket
		.write_rp_ready         (rsp_mux_src_ready),                                                                    //                 .ready
		.read_cp_valid          (axi_conduit_merger_0_altera_axi_master_agent_read_cp_valid),                           //          read_cp.valid
		.read_cp_data           (axi_conduit_merger_0_altera_axi_master_agent_read_cp_data),                            //                 .data
		.read_cp_startofpacket  (axi_conduit_merger_0_altera_axi_master_agent_read_cp_startofpacket),                   //                 .startofpacket
		.read_cp_endofpacket    (axi_conduit_merger_0_altera_axi_master_agent_read_cp_endofpacket),                     //                 .endofpacket
		.read_cp_ready          (axi_conduit_merger_0_altera_axi_master_agent_read_cp_ready),                           //                 .ready
		.read_rp_valid          (rsp_mux_001_src_valid),                                                                //          read_rp.valid
		.read_rp_data           (rsp_mux_001_src_data),                                                                 //                 .data
		.read_rp_channel        (rsp_mux_001_src_channel),                                                              //                 .channel
		.read_rp_startofpacket  (rsp_mux_001_src_startofpacket),                                                        //                 .startofpacket
		.read_rp_endofpacket    (rsp_mux_001_src_endofpacket),                                                          //                 .endofpacket
		.read_rp_ready          (rsp_mux_001_src_ready),                                                                //                 .ready
		.awid                   (axi_conduit_merger_0_altera_axi_master_id_pad_m0_awid),                                // altera_axi_slave.awid
		.awaddr                 (axi_conduit_merger_0_altera_axi_master_id_pad_m0_awaddr),                              //                 .awaddr
		.awlen                  (axi_conduit_merger_0_altera_axi_master_id_pad_m0_awlen),                               //                 .awlen
		.awsize                 (axi_conduit_merger_0_altera_axi_master_id_pad_m0_awsize),                              //                 .awsize
		.awburst                (axi_conduit_merger_0_altera_axi_master_id_pad_m0_awburst),                             //                 .awburst
		.awlock                 (axi_conduit_merger_0_altera_axi_master_id_pad_m0_awlock),                              //                 .awlock
		.awcache                (axi_conduit_merger_0_altera_axi_master_id_pad_m0_awcache),                             //                 .awcache
		.awprot                 (axi_conduit_merger_0_altera_axi_master_id_pad_m0_awprot),                              //                 .awprot
		.awuser                 (axi_conduit_merger_0_altera_axi_master_id_pad_m0_awuser),                              //                 .awuser
		.awvalid                (axi_conduit_merger_0_altera_axi_master_id_pad_m0_awvalid),                             //                 .awvalid
		.awready                (axi_conduit_merger_0_altera_axi_master_id_pad_m0_awready),                             //                 .awready
		.wid                    (axi_conduit_merger_0_altera_axi_master_id_pad_m0_wid),                                 //                 .wid
		.wdata                  (axi_conduit_merger_0_altera_axi_master_id_pad_m0_wdata),                               //                 .wdata
		.wstrb                  (axi_conduit_merger_0_altera_axi_master_id_pad_m0_wstrb),                               //                 .wstrb
		.wlast                  (axi_conduit_merger_0_altera_axi_master_id_pad_m0_wlast),                               //                 .wlast
		.wvalid                 (axi_conduit_merger_0_altera_axi_master_id_pad_m0_wvalid),                              //                 .wvalid
		.wready                 (axi_conduit_merger_0_altera_axi_master_id_pad_m0_wready),                              //                 .wready
		.bid                    (axi_conduit_merger_0_altera_axi_master_id_pad_m0_bid),                                 //                 .bid
		.bresp                  (axi_conduit_merger_0_altera_axi_master_id_pad_m0_bresp),                               //                 .bresp
		.bvalid                 (axi_conduit_merger_0_altera_axi_master_id_pad_m0_bvalid),                              //                 .bvalid
		.bready                 (axi_conduit_merger_0_altera_axi_master_id_pad_m0_bready),                              //                 .bready
		.arid                   (axi_conduit_merger_0_altera_axi_master_id_pad_m0_arid),                                //                 .arid
		.araddr                 (axi_conduit_merger_0_altera_axi_master_id_pad_m0_araddr),                              //                 .araddr
		.arlen                  (axi_conduit_merger_0_altera_axi_master_id_pad_m0_arlen),                               //                 .arlen
		.arsize                 (axi_conduit_merger_0_altera_axi_master_id_pad_m0_arsize),                              //                 .arsize
		.arburst                (axi_conduit_merger_0_altera_axi_master_id_pad_m0_arburst),                             //                 .arburst
		.arlock                 (axi_conduit_merger_0_altera_axi_master_id_pad_m0_arlock),                              //                 .arlock
		.arcache                (axi_conduit_merger_0_altera_axi_master_id_pad_m0_arcache),                             //                 .arcache
		.arprot                 (axi_conduit_merger_0_altera_axi_master_id_pad_m0_arprot),                              //                 .arprot
		.aruser                 (axi_conduit_merger_0_altera_axi_master_id_pad_m0_aruser),                              //                 .aruser
		.arvalid                (axi_conduit_merger_0_altera_axi_master_id_pad_m0_arvalid),                             //                 .arvalid
		.arready                (axi_conduit_merger_0_altera_axi_master_id_pad_m0_arready),                             //                 .arready
		.rid                    (axi_conduit_merger_0_altera_axi_master_id_pad_m0_rid),                                 //                 .rid
		.rdata                  (axi_conduit_merger_0_altera_axi_master_id_pad_m0_rdata),                               //                 .rdata
		.rresp                  (axi_conduit_merger_0_altera_axi_master_id_pad_m0_rresp),                               //                 .rresp
		.rlast                  (axi_conduit_merger_0_altera_axi_master_id_pad_m0_rlast),                               //                 .rlast
		.rvalid                 (axi_conduit_merger_0_altera_axi_master_id_pad_m0_rvalid),                              //                 .rvalid
		.rready                 (axi_conduit_merger_0_altera_axi_master_id_pad_m0_rready),                              //                 .rready
		.awqos                  (4'b0000),                                                                              //      (terminated)
		.arqos                  (4'b0000),                                                                              //      (terminated)
		.awregion               (4'b0000),                                                                              //      (terminated)
		.arregion               (4'b0000),                                                                              //      (terminated)
		.wuser                  (1'b0),                                                                                 //      (terminated)
		.ruser                  (),                                                                                     //      (terminated)
		.buser                  ()                                                                                      //      (terminated)
	);

	altera_merlin_axi_slave_ni #(
		.PKT_QOS_H                   (140),
		.PKT_QOS_L                   (140),
		.PKT_THREAD_ID_H             (150),
		.PKT_THREAD_ID_L             (143),
		.PKT_RESPONSE_STATUS_H       (159),
		.PKT_RESPONSE_STATUS_L       (158),
		.PKT_BEGIN_BURST             (139),
		.PKT_CACHE_H                 (157),
		.PKT_CACHE_L                 (154),
		.PKT_DATA_SIDEBAND_H         (138),
		.PKT_DATA_SIDEBAND_L         (138),
		.PKT_ADDR_SIDEBAND_H         (137),
		.PKT_ADDR_SIDEBAND_L         (133),
		.PKT_BURST_TYPE_H            (132),
		.PKT_BURST_TYPE_L            (131),
		.PKT_PROTECTION_H            (153),
		.PKT_PROTECTION_L            (151),
		.PKT_BURST_SIZE_H            (130),
		.PKT_BURST_SIZE_L            (128),
		.PKT_BURSTWRAP_H             (127),
		.PKT_BURSTWRAP_L             (119),
		.PKT_BYTE_CNT_H              (118),
		.PKT_BYTE_CNT_L              (110),
		.PKT_ADDR_H                  (103),
		.PKT_ADDR_L                  (72),
		.PKT_TRANS_EXCLUSIVE         (109),
		.PKT_TRANS_LOCK              (108),
		.PKT_TRANS_COMPRESSED_READ   (104),
		.PKT_TRANS_POSTED            (105),
		.PKT_TRANS_WRITE             (106),
		.PKT_TRANS_READ              (107),
		.PKT_DATA_H                  (63),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (71),
		.PKT_BYTEEN_L                (64),
		.PKT_SRC_ID_H                (141),
		.PKT_SRC_ID_L                (141),
		.PKT_DEST_ID_H               (142),
		.PKT_DEST_ID_L               (142),
		.PKT_ORI_BURST_SIZE_L        (160),
		.PKT_ORI_BURST_SIZE_H        (162),
		.ADDR_USER_WIDTH             (5),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (163),
		.ADDR_WIDTH                  (32),
		.RDATA_WIDTH                 (64),
		.WDATA_WIDTH                 (64),
		.ST_CHANNEL_W                (2),
		.AXI_SLAVE_ID_W              (8),
		.PASS_ID_TO_SLAVE            (0),
		.AXI_VERSION                 ("AXI3"),
		.WRITE_ACCEPTANCE_CAPABILITY (8),
		.READ_ACCEPTANCE_CAPABILITY  (8)
	) hps_0_f2h_axi_slave_agent (
		.aclk                   (clk_100m_clk_clk),                                                                     //        clock_sink.clk
		.aresetn                (~axi_conduit_merger_0_altera_axi_master_id_pad_clk_reset_reset_bridge_in_reset_reset), //        reset_sink.reset_n
		.read_cp_valid          (agent_pipeline_001_source0_valid),                                                     //           read_cp.valid
		.read_cp_ready          (agent_pipeline_001_source0_ready),                                                     //                  .ready
		.read_cp_data           (agent_pipeline_001_source0_data),                                                      //                  .data
		.read_cp_channel        (agent_pipeline_001_source0_channel),                                                   //                  .channel
		.read_cp_startofpacket  (agent_pipeline_001_source0_startofpacket),                                             //                  .startofpacket
		.read_cp_endofpacket    (agent_pipeline_001_source0_endofpacket),                                               //                  .endofpacket
		.write_cp_ready         (agent_pipeline_source0_ready),                                                         //          write_cp.ready
		.write_cp_valid         (agent_pipeline_source0_valid),                                                         //                  .valid
		.write_cp_data          (agent_pipeline_source0_data),                                                          //                  .data
		.write_cp_channel       (agent_pipeline_source0_channel),                                                       //                  .channel
		.write_cp_startofpacket (agent_pipeline_source0_startofpacket),                                                 //                  .startofpacket
		.write_cp_endofpacket   (agent_pipeline_source0_endofpacket),                                                   //                  .endofpacket
		.read_rp_ready          (hps_0_f2h_axi_slave_agent_read_rp_ready),                                              //           read_rp.ready
		.read_rp_valid          (hps_0_f2h_axi_slave_agent_read_rp_valid),                                              //                  .valid
		.read_rp_data           (hps_0_f2h_axi_slave_agent_read_rp_data),                                               //                  .data
		.read_rp_startofpacket  (hps_0_f2h_axi_slave_agent_read_rp_startofpacket),                                      //                  .startofpacket
		.read_rp_endofpacket    (hps_0_f2h_axi_slave_agent_read_rp_endofpacket),                                        //                  .endofpacket
		.write_rp_ready         (hps_0_f2h_axi_slave_agent_write_rp_ready),                                             //          write_rp.ready
		.write_rp_valid         (hps_0_f2h_axi_slave_agent_write_rp_valid),                                             //                  .valid
		.write_rp_data          (hps_0_f2h_axi_slave_agent_write_rp_data),                                              //                  .data
		.write_rp_startofpacket (hps_0_f2h_axi_slave_agent_write_rp_startofpacket),                                     //                  .startofpacket
		.write_rp_endofpacket   (hps_0_f2h_axi_slave_agent_write_rp_endofpacket),                                       //                  .endofpacket
		.awid                   (hps_0_f2h_axi_slave_awid),                                                             // altera_axi_master.awid
		.awaddr                 (hps_0_f2h_axi_slave_awaddr),                                                           //                  .awaddr
		.awlen                  (hps_0_f2h_axi_slave_awlen),                                                            //                  .awlen
		.awsize                 (hps_0_f2h_axi_slave_awsize),                                                           //                  .awsize
		.awburst                (hps_0_f2h_axi_slave_awburst),                                                          //                  .awburst
		.awlock                 (hps_0_f2h_axi_slave_awlock),                                                           //                  .awlock
		.awcache                (hps_0_f2h_axi_slave_awcache),                                                          //                  .awcache
		.awprot                 (hps_0_f2h_axi_slave_awprot),                                                           //                  .awprot
		.awuser                 (hps_0_f2h_axi_slave_awuser),                                                           //                  .awuser
		.awvalid                (hps_0_f2h_axi_slave_awvalid),                                                          //                  .awvalid
		.awready                (hps_0_f2h_axi_slave_awready),                                                          //                  .awready
		.wid                    (hps_0_f2h_axi_slave_wid),                                                              //                  .wid
		.wdata                  (hps_0_f2h_axi_slave_wdata),                                                            //                  .wdata
		.wstrb                  (hps_0_f2h_axi_slave_wstrb),                                                            //                  .wstrb
		.wlast                  (hps_0_f2h_axi_slave_wlast),                                                            //                  .wlast
		.wvalid                 (hps_0_f2h_axi_slave_wvalid),                                                           //                  .wvalid
		.wready                 (hps_0_f2h_axi_slave_wready),                                                           //                  .wready
		.bid                    (hps_0_f2h_axi_slave_bid),                                                              //                  .bid
		.bresp                  (hps_0_f2h_axi_slave_bresp),                                                            //                  .bresp
		.bvalid                 (hps_0_f2h_axi_slave_bvalid),                                                           //                  .bvalid
		.bready                 (hps_0_f2h_axi_slave_bready),                                                           //                  .bready
		.arid                   (hps_0_f2h_axi_slave_arid),                                                             //                  .arid
		.araddr                 (hps_0_f2h_axi_slave_araddr),                                                           //                  .araddr
		.arlen                  (hps_0_f2h_axi_slave_arlen),                                                            //                  .arlen
		.arsize                 (hps_0_f2h_axi_slave_arsize),                                                           //                  .arsize
		.arburst                (hps_0_f2h_axi_slave_arburst),                                                          //                  .arburst
		.arlock                 (hps_0_f2h_axi_slave_arlock),                                                           //                  .arlock
		.arcache                (hps_0_f2h_axi_slave_arcache),                                                          //                  .arcache
		.arprot                 (hps_0_f2h_axi_slave_arprot),                                                           //                  .arprot
		.aruser                 (hps_0_f2h_axi_slave_aruser),                                                           //                  .aruser
		.arvalid                (hps_0_f2h_axi_slave_arvalid),                                                          //                  .arvalid
		.arready                (hps_0_f2h_axi_slave_arready),                                                          //                  .arready
		.rid                    (hps_0_f2h_axi_slave_rid),                                                              //                  .rid
		.rdata                  (hps_0_f2h_axi_slave_rdata),                                                            //                  .rdata
		.rresp                  (hps_0_f2h_axi_slave_rresp),                                                            //                  .rresp
		.rlast                  (hps_0_f2h_axi_slave_rlast),                                                            //                  .rlast
		.rvalid                 (hps_0_f2h_axi_slave_rvalid),                                                           //                  .rvalid
		.rready                 (hps_0_f2h_axi_slave_rready)                                                            //                  .rready
	);

	soc_system_mm_interconnect_0_router router (
		.sink_ready         (axi_conduit_merger_0_altera_axi_master_agent_write_cp_ready),                         //      sink.ready
		.sink_valid         (axi_conduit_merger_0_altera_axi_master_agent_write_cp_valid),                         //          .valid
		.sink_data          (axi_conduit_merger_0_altera_axi_master_agent_write_cp_data),                          //          .data
		.sink_startofpacket (axi_conduit_merger_0_altera_axi_master_agent_write_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (axi_conduit_merger_0_altera_axi_master_agent_write_cp_endofpacket),                   //          .endofpacket
		.clk                (clk_100m_clk_clk),                                                                    //       clk.clk
		.reset              (axi_conduit_merger_0_altera_axi_master_id_pad_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                                    //       src.ready
		.src_valid          (router_src_valid),                                                                    //          .valid
		.src_data           (router_src_data),                                                                     //          .data
		.src_channel        (router_src_channel),                                                                  //          .channel
		.src_startofpacket  (router_src_startofpacket),                                                            //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                                               //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (axi_conduit_merger_0_altera_axi_master_agent_read_cp_ready),                          //      sink.ready
		.sink_valid         (axi_conduit_merger_0_altera_axi_master_agent_read_cp_valid),                          //          .valid
		.sink_data          (axi_conduit_merger_0_altera_axi_master_agent_read_cp_data),                           //          .data
		.sink_startofpacket (axi_conduit_merger_0_altera_axi_master_agent_read_cp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (axi_conduit_merger_0_altera_axi_master_agent_read_cp_endofpacket),                    //          .endofpacket
		.clk                (clk_100m_clk_clk),                                                                    //       clk.clk
		.reset              (axi_conduit_merger_0_altera_axi_master_id_pad_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                                                //       src.ready
		.src_valid          (router_001_src_valid),                                                                //          .valid
		.src_data           (router_001_src_data),                                                                 //          .data
		.src_channel        (router_001_src_channel),                                                              //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                                        //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (agent_pipeline_002_source0_ready),                                                    //      sink.ready
		.sink_valid         (agent_pipeline_002_source0_valid),                                                    //          .valid
		.sink_data          (agent_pipeline_002_source0_data),                                                     //          .data
		.sink_startofpacket (agent_pipeline_002_source0_startofpacket),                                            //          .startofpacket
		.sink_endofpacket   (agent_pipeline_002_source0_endofpacket),                                              //          .endofpacket
		.clk                (clk_100m_clk_clk),                                                                    //       clk.clk
		.reset              (axi_conduit_merger_0_altera_axi_master_id_pad_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                                                //       src.ready
		.src_valid          (router_002_src_valid),                                                                //          .valid
		.src_data           (router_002_src_data),                                                                 //          .data
		.src_channel        (router_002_src_channel),                                                              //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                                        //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (agent_pipeline_003_source0_ready),                                                    //      sink.ready
		.sink_valid         (agent_pipeline_003_source0_valid),                                                    //          .valid
		.sink_data          (agent_pipeline_003_source0_data),                                                     //          .data
		.sink_startofpacket (agent_pipeline_003_source0_startofpacket),                                            //          .startofpacket
		.sink_endofpacket   (agent_pipeline_003_source0_endofpacket),                                              //          .endofpacket
		.clk                (clk_100m_clk_clk),                                                                    //       clk.clk
		.reset              (axi_conduit_merger_0_altera_axi_master_id_pad_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                                                //       src.ready
		.src_valid          (router_003_src_valid),                                                                //          .valid
		.src_data           (router_003_src_data),                                                                 //          .data
		.src_channel        (router_003_src_channel),                                                              //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                                        //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                                           //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_BEGIN_BURST           (139),
		.PKT_BYTE_CNT_H            (118),
		.PKT_BYTE_CNT_L            (110),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_BURST_SIZE_H          (130),
		.PKT_BURST_SIZE_L          (128),
		.PKT_BURST_TYPE_H          (132),
		.PKT_BURST_TYPE_L          (131),
		.PKT_BURSTWRAP_H           (127),
		.PKT_BURSTWRAP_L           (119),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.OUT_NARROW_SIZE           (1),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (1),
		.OUT_COMPLETE_WRAP         (1),
		.ST_DATA_W                 (163),
		.ST_CHANNEL_W              (2),
		.OUT_BYTE_CNT_H            (117),
		.OUT_BURSTWRAP_H           (127),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (0),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) hps_0_f2h_axi_slave_wr_burst_adapter (
		.clk                   (clk_100m_clk_clk),                                                                    //       cr0.clk
		.reset                 (axi_conduit_merger_0_altera_axi_master_id_pad_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (hps_0_f2h_axi_slave_wr_cmd_width_adapter_src_valid),                                  //     sink0.valid
		.sink0_data            (hps_0_f2h_axi_slave_wr_cmd_width_adapter_src_data),                                   //          .data
		.sink0_channel         (hps_0_f2h_axi_slave_wr_cmd_width_adapter_src_channel),                                //          .channel
		.sink0_startofpacket   (hps_0_f2h_axi_slave_wr_cmd_width_adapter_src_startofpacket),                          //          .startofpacket
		.sink0_endofpacket     (hps_0_f2h_axi_slave_wr_cmd_width_adapter_src_endofpacket),                            //          .endofpacket
		.sink0_ready           (hps_0_f2h_axi_slave_wr_cmd_width_adapter_src_ready),                                  //          .ready
		.source0_valid         (hps_0_f2h_axi_slave_wr_burst_adapter_source0_valid),                                  //   source0.valid
		.source0_data          (hps_0_f2h_axi_slave_wr_burst_adapter_source0_data),                                   //          .data
		.source0_channel       (hps_0_f2h_axi_slave_wr_burst_adapter_source0_channel),                                //          .channel
		.source0_startofpacket (hps_0_f2h_axi_slave_wr_burst_adapter_source0_startofpacket),                          //          .startofpacket
		.source0_endofpacket   (hps_0_f2h_axi_slave_wr_burst_adapter_source0_endofpacket),                            //          .endofpacket
		.source0_ready         (hps_0_f2h_axi_slave_wr_burst_adapter_source0_ready)                                   //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_BEGIN_BURST           (139),
		.PKT_BYTE_CNT_H            (118),
		.PKT_BYTE_CNT_L            (110),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_BURST_SIZE_H          (130),
		.PKT_BURST_SIZE_L          (128),
		.PKT_BURST_TYPE_H          (132),
		.PKT_BURST_TYPE_L          (131),
		.PKT_BURSTWRAP_H           (127),
		.PKT_BURSTWRAP_L           (119),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.OUT_NARROW_SIZE           (1),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (1),
		.OUT_COMPLETE_WRAP         (1),
		.ST_DATA_W                 (163),
		.ST_CHANNEL_W              (2),
		.OUT_BYTE_CNT_H            (117),
		.OUT_BURSTWRAP_H           (127),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (0),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) hps_0_f2h_axi_slave_rd_burst_adapter (
		.clk                   (clk_100m_clk_clk),                                                                    //       cr0.clk
		.reset                 (axi_conduit_merger_0_altera_axi_master_id_pad_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (hps_0_f2h_axi_slave_rd_cmd_width_adapter_src_valid),                                  //     sink0.valid
		.sink0_data            (hps_0_f2h_axi_slave_rd_cmd_width_adapter_src_data),                                   //          .data
		.sink0_channel         (hps_0_f2h_axi_slave_rd_cmd_width_adapter_src_channel),                                //          .channel
		.sink0_startofpacket   (hps_0_f2h_axi_slave_rd_cmd_width_adapter_src_startofpacket),                          //          .startofpacket
		.sink0_endofpacket     (hps_0_f2h_axi_slave_rd_cmd_width_adapter_src_endofpacket),                            //          .endofpacket
		.sink0_ready           (hps_0_f2h_axi_slave_rd_cmd_width_adapter_src_ready),                                  //          .ready
		.source0_valid         (hps_0_f2h_axi_slave_rd_burst_adapter_source0_valid),                                  //   source0.valid
		.source0_data          (hps_0_f2h_axi_slave_rd_burst_adapter_source0_data),                                   //          .data
		.source0_channel       (hps_0_f2h_axi_slave_rd_burst_adapter_source0_channel),                                //          .channel
		.source0_startofpacket (hps_0_f2h_axi_slave_rd_burst_adapter_source0_startofpacket),                          //          .startofpacket
		.source0_endofpacket   (hps_0_f2h_axi_slave_rd_burst_adapter_source0_endofpacket),                            //          .endofpacket
		.source0_ready         (hps_0_f2h_axi_slave_rd_burst_adapter_source0_ready)                                   //          .ready
	);

	soc_system_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_100m_clk_clk),                                                                    //       clk.clk
		.reset              (axi_conduit_merger_0_altera_axi_master_id_pad_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                                                                    //      sink.ready
		.sink_channel       (router_src_channel),                                                                  //          .channel
		.sink_data          (router_src_data),                                                                     //          .data
		.sink_startofpacket (router_src_startofpacket),                                                            //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                                              //          .endofpacket
		.sink_valid         (router_src_valid),                                                                    //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                                                //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                                                //          .valid
		.src0_data          (cmd_demux_src0_data),                                                                 //          .data
		.src0_channel       (cmd_demux_src0_channel),                                                              //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                                        //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                (clk_100m_clk_clk),                                                                    //       clk.clk
		.reset              (axi_conduit_merger_0_altera_axi_master_id_pad_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                                                //      sink.ready
		.sink_channel       (router_001_src_channel),                                                              //          .channel
		.sink_data          (router_001_src_data),                                                                 //          .data
		.sink_startofpacket (router_001_src_startofpacket),                                                        //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                                          //          .endofpacket
		.sink_valid         (router_001_src_valid),                                                                //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                                                            //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                                            //          .valid
		.src0_data          (cmd_demux_001_src0_data),                                                             //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                                                          //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                                    //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                                                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_100m_clk_clk),                                                                    //       clk.clk
		.reset               (axi_conduit_merger_0_altera_axi_master_id_pad_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                                   //       src.ready
		.src_valid           (cmd_mux_src_valid),                                                                   //          .valid
		.src_data            (cmd_mux_src_data),                                                                    //          .data
		.src_channel         (cmd_mux_src_channel),                                                                 //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                                           //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                                             //          .endofpacket
		.sink0_ready         (mux_pipeline_source0_ready),                                                          //     sink0.ready
		.sink0_valid         (mux_pipeline_source0_valid),                                                          //          .valid
		.sink0_channel       (mux_pipeline_source0_channel),                                                        //          .channel
		.sink0_data          (mux_pipeline_source0_data),                                                           //          .data
		.sink0_startofpacket (mux_pipeline_source0_startofpacket),                                                  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_source0_endofpacket)                                                     //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (clk_100m_clk_clk),                                                                    //       clk.clk
		.reset               (axi_conduit_merger_0_altera_axi_master_id_pad_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                                               //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                                               //          .valid
		.src_data            (cmd_mux_001_src_data),                                                                //          .data
		.src_channel         (cmd_mux_001_src_channel),                                                             //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                                       //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                                         //          .endofpacket
		.sink0_ready         (mux_pipeline_001_source0_ready),                                                      //     sink0.ready
		.sink0_valid         (mux_pipeline_001_source0_valid),                                                      //          .valid
		.sink0_channel       (mux_pipeline_001_source0_channel),                                                    //          .channel
		.sink0_data          (mux_pipeline_001_source0_data),                                                       //          .data
		.sink0_startofpacket (mux_pipeline_001_source0_startofpacket),                                              //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_001_source0_endofpacket)                                                 //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux rsp_demux (
		.clk                (clk_100m_clk_clk),                                                                    //       clk.clk
		.reset              (axi_conduit_merger_0_altera_axi_master_id_pad_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (hps_0_f2h_axi_slave_wr_rsp_width_adapter_src_ready),                                  //      sink.ready
		.sink_channel       (hps_0_f2h_axi_slave_wr_rsp_width_adapter_src_channel),                                //          .channel
		.sink_data          (hps_0_f2h_axi_slave_wr_rsp_width_adapter_src_data),                                   //          .data
		.sink_startofpacket (hps_0_f2h_axi_slave_wr_rsp_width_adapter_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (hps_0_f2h_axi_slave_wr_rsp_width_adapter_src_endofpacket),                            //          .endofpacket
		.sink_valid         (hps_0_f2h_axi_slave_wr_rsp_width_adapter_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                                                //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                                                //          .valid
		.src0_data          (rsp_demux_src0_data),                                                                 //          .data
		.src0_channel       (rsp_demux_src0_channel),                                                              //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux rsp_demux_001 (
		.clk                (clk_100m_clk_clk),                                                                    //       clk.clk
		.reset              (axi_conduit_merger_0_altera_axi_master_id_pad_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (hps_0_f2h_axi_slave_rd_rsp_width_adapter_src_ready),                                  //      sink.ready
		.sink_channel       (hps_0_f2h_axi_slave_rd_rsp_width_adapter_src_channel),                                //          .channel
		.sink_data          (hps_0_f2h_axi_slave_rd_rsp_width_adapter_src_data),                                   //          .data
		.sink_startofpacket (hps_0_f2h_axi_slave_rd_rsp_width_adapter_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (hps_0_f2h_axi_slave_rd_rsp_width_adapter_src_endofpacket),                            //          .endofpacket
		.sink_valid         (hps_0_f2h_axi_slave_rd_rsp_width_adapter_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                                            //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                                            //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                                             //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                                          //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                                                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                                                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_100m_clk_clk),                                                                    //       clk.clk
		.reset               (axi_conduit_merger_0_altera_axi_master_id_pad_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                                   //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                                   //          .valid
		.src_data            (rsp_mux_src_data),                                                                    //          .data
		.src_channel         (rsp_mux_src_channel),                                                                 //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                                           //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                                             //          .endofpacket
		.sink0_ready         (mux_pipeline_002_source0_ready),                                                      //     sink0.ready
		.sink0_valid         (mux_pipeline_002_source0_valid),                                                      //          .valid
		.sink0_channel       (mux_pipeline_002_source0_channel),                                                    //          .channel
		.sink0_data          (mux_pipeline_002_source0_data),                                                       //          .data
		.sink0_startofpacket (mux_pipeline_002_source0_startofpacket),                                              //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_002_source0_endofpacket)                                                 //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                 (clk_100m_clk_clk),                                                                    //       clk.clk
		.reset               (axi_conduit_merger_0_altera_axi_master_id_pad_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                                               //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                                               //          .valid
		.src_data            (rsp_mux_001_src_data),                                                                //          .data
		.src_channel         (rsp_mux_001_src_channel),                                                             //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                                       //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                                         //          .endofpacket
		.sink0_ready         (mux_pipeline_003_source0_ready),                                                      //     sink0.ready
		.sink0_valid         (mux_pipeline_003_source0_valid),                                                      //          .valid
		.sink0_channel       (mux_pipeline_003_source0_channel),                                                    //          .channel
		.sink0_data          (mux_pipeline_003_source0_data),                                                       //          .data
		.sink0_startofpacket (mux_pipeline_003_source0_startofpacket),                                              //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_003_source0_endofpacket)                                                 //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (118),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (127),
		.IN_PKT_BURSTWRAP_L            (119),
		.IN_PKT_BURST_SIZE_H           (130),
		.IN_PKT_BURST_SIZE_L           (128),
		.IN_PKT_RESPONSE_STATUS_H      (159),
		.IN_PKT_RESPONSE_STATUS_L      (158),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (132),
		.IN_PKT_BURST_TYPE_L           (131),
		.IN_PKT_ORI_BURST_SIZE_L       (160),
		.IN_PKT_ORI_BURST_SIZE_H       (162),
		.IN_ST_DATA_W                  (163),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (231),
		.OUT_PKT_RESPONSE_STATUS_L     (230),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (232),
		.OUT_PKT_ORI_BURST_SIZE_H      (234),
		.OUT_ST_DATA_W                 (235),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_f2h_axi_slave_wr_rsp_width_adapter (
		.clk                  (clk_100m_clk_clk),                                                                    //       clk.clk
		.reset                (axi_conduit_merger_0_altera_axi_master_id_pad_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_002_src_valid),                                                                //      sink.valid
		.in_channel           (router_002_src_channel),                                                              //          .channel
		.in_startofpacket     (router_002_src_startofpacket),                                                        //          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                                                          //          .endofpacket
		.in_ready             (router_002_src_ready),                                                                //          .ready
		.in_data              (router_002_src_data),                                                                 //          .data
		.out_endofpacket      (hps_0_f2h_axi_slave_wr_rsp_width_adapter_src_endofpacket),                            //       src.endofpacket
		.out_data             (hps_0_f2h_axi_slave_wr_rsp_width_adapter_src_data),                                   //          .data
		.out_channel          (hps_0_f2h_axi_slave_wr_rsp_width_adapter_src_channel),                                //          .channel
		.out_valid            (hps_0_f2h_axi_slave_wr_rsp_width_adapter_src_valid),                                  //          .valid
		.out_ready            (hps_0_f2h_axi_slave_wr_rsp_width_adapter_src_ready),                                  //          .ready
		.out_startofpacket    (hps_0_f2h_axi_slave_wr_rsp_width_adapter_src_startofpacket),                          //          .startofpacket
		.in_command_size_data (3'b000)                                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (118),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (127),
		.IN_PKT_BURSTWRAP_L            (119),
		.IN_PKT_BURST_SIZE_H           (130),
		.IN_PKT_BURST_SIZE_L           (128),
		.IN_PKT_RESPONSE_STATUS_H      (159),
		.IN_PKT_RESPONSE_STATUS_L      (158),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (132),
		.IN_PKT_BURST_TYPE_L           (131),
		.IN_PKT_ORI_BURST_SIZE_L       (160),
		.IN_PKT_ORI_BURST_SIZE_H       (162),
		.IN_ST_DATA_W                  (163),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (231),
		.OUT_PKT_RESPONSE_STATUS_L     (230),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (232),
		.OUT_PKT_ORI_BURST_SIZE_H      (234),
		.OUT_ST_DATA_W                 (235),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_f2h_axi_slave_rd_rsp_width_adapter (
		.clk                  (clk_100m_clk_clk),                                                                    //       clk.clk
		.reset                (axi_conduit_merger_0_altera_axi_master_id_pad_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_003_src_valid),                                                                //      sink.valid
		.in_channel           (router_003_src_channel),                                                              //          .channel
		.in_startofpacket     (router_003_src_startofpacket),                                                        //          .startofpacket
		.in_endofpacket       (router_003_src_endofpacket),                                                          //          .endofpacket
		.in_ready             (router_003_src_ready),                                                                //          .ready
		.in_data              (router_003_src_data),                                                                 //          .data
		.out_endofpacket      (hps_0_f2h_axi_slave_rd_rsp_width_adapter_src_endofpacket),                            //       src.endofpacket
		.out_data             (hps_0_f2h_axi_slave_rd_rsp_width_adapter_src_data),                                   //          .data
		.out_channel          (hps_0_f2h_axi_slave_rd_rsp_width_adapter_src_channel),                                //          .channel
		.out_valid            (hps_0_f2h_axi_slave_rd_rsp_width_adapter_src_valid),                                  //          .valid
		.out_ready            (hps_0_f2h_axi_slave_rd_rsp_width_adapter_src_ready),                                  //          .ready
		.out_startofpacket    (hps_0_f2h_axi_slave_rd_rsp_width_adapter_src_startofpacket),                          //          .startofpacket
		.in_command_size_data (3'b000)                                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (231),
		.IN_PKT_RESPONSE_STATUS_L      (230),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (232),
		.IN_PKT_ORI_BURST_SIZE_H       (234),
		.IN_ST_DATA_W                  (235),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (118),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (130),
		.OUT_PKT_BURST_SIZE_L          (128),
		.OUT_PKT_RESPONSE_STATUS_H     (159),
		.OUT_PKT_RESPONSE_STATUS_L     (158),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (132),
		.OUT_PKT_BURST_TYPE_L          (131),
		.OUT_PKT_ORI_BURST_SIZE_L      (160),
		.OUT_PKT_ORI_BURST_SIZE_H      (162),
		.OUT_ST_DATA_W                 (163),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_f2h_axi_slave_wr_cmd_width_adapter (
		.clk                  (clk_100m_clk_clk),                                                                    //       clk.clk
		.reset                (axi_conduit_merger_0_altera_axi_master_id_pad_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                                                   //      sink.valid
		.in_channel           (cmd_mux_src_channel),                                                                 //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                                           //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                                             //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                                                   //          .ready
		.in_data              (cmd_mux_src_data),                                                                    //          .data
		.out_endofpacket      (hps_0_f2h_axi_slave_wr_cmd_width_adapter_src_endofpacket),                            //       src.endofpacket
		.out_data             (hps_0_f2h_axi_slave_wr_cmd_width_adapter_src_data),                                   //          .data
		.out_channel          (hps_0_f2h_axi_slave_wr_cmd_width_adapter_src_channel),                                //          .channel
		.out_valid            (hps_0_f2h_axi_slave_wr_cmd_width_adapter_src_valid),                                  //          .valid
		.out_ready            (hps_0_f2h_axi_slave_wr_cmd_width_adapter_src_ready),                                  //          .ready
		.out_startofpacket    (hps_0_f2h_axi_slave_wr_cmd_width_adapter_src_startofpacket),                          //          .startofpacket
		.in_command_size_data (3'b000)                                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (231),
		.IN_PKT_RESPONSE_STATUS_L      (230),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (232),
		.IN_PKT_ORI_BURST_SIZE_H       (234),
		.IN_ST_DATA_W                  (235),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (118),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (130),
		.OUT_PKT_BURST_SIZE_L          (128),
		.OUT_PKT_RESPONSE_STATUS_H     (159),
		.OUT_PKT_RESPONSE_STATUS_L     (158),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (132),
		.OUT_PKT_BURST_TYPE_L          (131),
		.OUT_PKT_ORI_BURST_SIZE_L      (160),
		.OUT_PKT_ORI_BURST_SIZE_H      (162),
		.OUT_ST_DATA_W                 (163),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_f2h_axi_slave_rd_cmd_width_adapter (
		.clk                  (clk_100m_clk_clk),                                                                    //       clk.clk
		.reset                (axi_conduit_merger_0_altera_axi_master_id_pad_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_001_src_valid),                                                               //      sink.valid
		.in_channel           (cmd_mux_001_src_channel),                                                             //          .channel
		.in_startofpacket     (cmd_mux_001_src_startofpacket),                                                       //          .startofpacket
		.in_endofpacket       (cmd_mux_001_src_endofpacket),                                                         //          .endofpacket
		.in_ready             (cmd_mux_001_src_ready),                                                               //          .ready
		.in_data              (cmd_mux_001_src_data),                                                                //          .data
		.out_endofpacket      (hps_0_f2h_axi_slave_rd_cmd_width_adapter_src_endofpacket),                            //       src.endofpacket
		.out_data             (hps_0_f2h_axi_slave_rd_cmd_width_adapter_src_data),                                   //          .data
		.out_channel          (hps_0_f2h_axi_slave_rd_cmd_width_adapter_src_channel),                                //          .channel
		.out_valid            (hps_0_f2h_axi_slave_rd_cmd_width_adapter_src_valid),                                  //          .valid
		.out_ready            (hps_0_f2h_axi_slave_rd_cmd_width_adapter_src_ready),                                  //          .ready
		.out_startofpacket    (hps_0_f2h_axi_slave_rd_cmd_width_adapter_src_startofpacket),                          //          .startofpacket
		.in_command_size_data (3'b000)                                                                               // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (163),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline (
		.clk               (clk_100m_clk_clk),                                                                    //       cr0.clk
		.reset             (axi_conduit_merger_0_altera_axi_master_id_pad_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (hps_0_f2h_axi_slave_wr_burst_adapter_source0_ready),                                  //     sink0.ready
		.in_valid          (hps_0_f2h_axi_slave_wr_burst_adapter_source0_valid),                                  //          .valid
		.in_startofpacket  (hps_0_f2h_axi_slave_wr_burst_adapter_source0_startofpacket),                          //          .startofpacket
		.in_endofpacket    (hps_0_f2h_axi_slave_wr_burst_adapter_source0_endofpacket),                            //          .endofpacket
		.in_data           (hps_0_f2h_axi_slave_wr_burst_adapter_source0_data),                                   //          .data
		.in_channel        (hps_0_f2h_axi_slave_wr_burst_adapter_source0_channel),                                //          .channel
		.out_ready         (agent_pipeline_source0_ready),                                                        //   source0.ready
		.out_valid         (agent_pipeline_source0_valid),                                                        //          .valid
		.out_startofpacket (agent_pipeline_source0_startofpacket),                                                //          .startofpacket
		.out_endofpacket   (agent_pipeline_source0_endofpacket),                                                  //          .endofpacket
		.out_data          (agent_pipeline_source0_data),                                                         //          .data
		.out_channel       (agent_pipeline_source0_channel),                                                      //          .channel
		.in_empty          (1'b0),                                                                                // (terminated)
		.out_empty         (),                                                                                    // (terminated)
		.out_error         (),                                                                                    // (terminated)
		.in_error          (1'b0)                                                                                 // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (163),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_001 (
		.clk               (clk_100m_clk_clk),                                                                    //       cr0.clk
		.reset             (axi_conduit_merger_0_altera_axi_master_id_pad_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (hps_0_f2h_axi_slave_rd_burst_adapter_source0_ready),                                  //     sink0.ready
		.in_valid          (hps_0_f2h_axi_slave_rd_burst_adapter_source0_valid),                                  //          .valid
		.in_startofpacket  (hps_0_f2h_axi_slave_rd_burst_adapter_source0_startofpacket),                          //          .startofpacket
		.in_endofpacket    (hps_0_f2h_axi_slave_rd_burst_adapter_source0_endofpacket),                            //          .endofpacket
		.in_data           (hps_0_f2h_axi_slave_rd_burst_adapter_source0_data),                                   //          .data
		.in_channel        (hps_0_f2h_axi_slave_rd_burst_adapter_source0_channel),                                //          .channel
		.out_ready         (agent_pipeline_001_source0_ready),                                                    //   source0.ready
		.out_valid         (agent_pipeline_001_source0_valid),                                                    //          .valid
		.out_startofpacket (agent_pipeline_001_source0_startofpacket),                                            //          .startofpacket
		.out_endofpacket   (agent_pipeline_001_source0_endofpacket),                                              //          .endofpacket
		.out_data          (agent_pipeline_001_source0_data),                                                     //          .data
		.out_channel       (agent_pipeline_001_source0_channel),                                                  //          .channel
		.in_empty          (1'b0),                                                                                // (terminated)
		.out_empty         (),                                                                                    // (terminated)
		.out_error         (),                                                                                    // (terminated)
		.in_error          (1'b0)                                                                                 // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (163),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_002 (
		.clk               (clk_100m_clk_clk),                                                                    //       cr0.clk
		.reset             (axi_conduit_merger_0_altera_axi_master_id_pad_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (hps_0_f2h_axi_slave_agent_write_rp_ready),                                            //     sink0.ready
		.in_valid          (hps_0_f2h_axi_slave_agent_write_rp_valid),                                            //          .valid
		.in_startofpacket  (hps_0_f2h_axi_slave_agent_write_rp_startofpacket),                                    //          .startofpacket
		.in_endofpacket    (hps_0_f2h_axi_slave_agent_write_rp_endofpacket),                                      //          .endofpacket
		.in_data           (hps_0_f2h_axi_slave_agent_write_rp_data),                                             //          .data
		.out_ready         (agent_pipeline_002_source0_ready),                                                    //   source0.ready
		.out_valid         (agent_pipeline_002_source0_valid),                                                    //          .valid
		.out_startofpacket (agent_pipeline_002_source0_startofpacket),                                            //          .startofpacket
		.out_endofpacket   (agent_pipeline_002_source0_endofpacket),                                              //          .endofpacket
		.out_data          (agent_pipeline_002_source0_data),                                                     //          .data
		.in_empty          (1'b0),                                                                                // (terminated)
		.out_empty         (),                                                                                    // (terminated)
		.out_error         (),                                                                                    // (terminated)
		.in_error          (1'b0),                                                                                // (terminated)
		.out_channel       (),                                                                                    // (terminated)
		.in_channel        (1'b0)                                                                                 // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (163),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_003 (
		.clk               (clk_100m_clk_clk),                                                                    //       cr0.clk
		.reset             (axi_conduit_merger_0_altera_axi_master_id_pad_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (hps_0_f2h_axi_slave_agent_read_rp_ready),                                             //     sink0.ready
		.in_valid          (hps_0_f2h_axi_slave_agent_read_rp_valid),                                             //          .valid
		.in_startofpacket  (hps_0_f2h_axi_slave_agent_read_rp_startofpacket),                                     //          .startofpacket
		.in_endofpacket    (hps_0_f2h_axi_slave_agent_read_rp_endofpacket),                                       //          .endofpacket
		.in_data           (hps_0_f2h_axi_slave_agent_read_rp_data),                                              //          .data
		.out_ready         (agent_pipeline_003_source0_ready),                                                    //   source0.ready
		.out_valid         (agent_pipeline_003_source0_valid),                                                    //          .valid
		.out_startofpacket (agent_pipeline_003_source0_startofpacket),                                            //          .startofpacket
		.out_endofpacket   (agent_pipeline_003_source0_endofpacket),                                              //          .endofpacket
		.out_data          (agent_pipeline_003_source0_data),                                                     //          .data
		.in_empty          (1'b0),                                                                                // (terminated)
		.out_empty         (),                                                                                    // (terminated)
		.out_error         (),                                                                                    // (terminated)
		.in_error          (1'b0),                                                                                // (terminated)
		.out_channel       (),                                                                                    // (terminated)
		.in_channel        (1'b0)                                                                                 // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (235),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline (
		.clk               (clk_100m_clk_clk),                                                                    //       cr0.clk
		.reset             (axi_conduit_merger_0_altera_axi_master_id_pad_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                                                //     sink0.ready
		.in_valid          (cmd_demux_src0_valid),                                                                //          .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                                                        //          .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                                                          //          .endofpacket
		.in_data           (cmd_demux_src0_data),                                                                 //          .data
		.in_channel        (cmd_demux_src0_channel),                                                              //          .channel
		.out_ready         (mux_pipeline_source0_ready),                                                          //   source0.ready
		.out_valid         (mux_pipeline_source0_valid),                                                          //          .valid
		.out_startofpacket (mux_pipeline_source0_startofpacket),                                                  //          .startofpacket
		.out_endofpacket   (mux_pipeline_source0_endofpacket),                                                    //          .endofpacket
		.out_data          (mux_pipeline_source0_data),                                                           //          .data
		.out_channel       (mux_pipeline_source0_channel),                                                        //          .channel
		.in_empty          (1'b0),                                                                                // (terminated)
		.out_empty         (),                                                                                    // (terminated)
		.out_error         (),                                                                                    // (terminated)
		.in_error          (1'b0)                                                                                 // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (235),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_001 (
		.clk               (clk_100m_clk_clk),                                                                    //       cr0.clk
		.reset             (axi_conduit_merger_0_altera_axi_master_id_pad_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src0_ready),                                                            //     sink0.ready
		.in_valid          (cmd_demux_001_src0_valid),                                                            //          .valid
		.in_startofpacket  (cmd_demux_001_src0_startofpacket),                                                    //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src0_endofpacket),                                                      //          .endofpacket
		.in_data           (cmd_demux_001_src0_data),                                                             //          .data
		.in_channel        (cmd_demux_001_src0_channel),                                                          //          .channel
		.out_ready         (mux_pipeline_001_source0_ready),                                                      //   source0.ready
		.out_valid         (mux_pipeline_001_source0_valid),                                                      //          .valid
		.out_startofpacket (mux_pipeline_001_source0_startofpacket),                                              //          .startofpacket
		.out_endofpacket   (mux_pipeline_001_source0_endofpacket),                                                //          .endofpacket
		.out_data          (mux_pipeline_001_source0_data),                                                       //          .data
		.out_channel       (mux_pipeline_001_source0_channel),                                                    //          .channel
		.in_empty          (1'b0),                                                                                // (terminated)
		.out_empty         (),                                                                                    // (terminated)
		.out_error         (),                                                                                    // (terminated)
		.in_error          (1'b0)                                                                                 // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (235),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_002 (
		.clk               (clk_100m_clk_clk),                                                                    //       cr0.clk
		.reset             (axi_conduit_merger_0_altera_axi_master_id_pad_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                                                //     sink0.ready
		.in_valid          (rsp_demux_src0_valid),                                                                //          .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                                                        //          .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                                                          //          .endofpacket
		.in_data           (rsp_demux_src0_data),                                                                 //          .data
		.in_channel        (rsp_demux_src0_channel),                                                              //          .channel
		.out_ready         (mux_pipeline_002_source0_ready),                                                      //   source0.ready
		.out_valid         (mux_pipeline_002_source0_valid),                                                      //          .valid
		.out_startofpacket (mux_pipeline_002_source0_startofpacket),                                              //          .startofpacket
		.out_endofpacket   (mux_pipeline_002_source0_endofpacket),                                                //          .endofpacket
		.out_data          (mux_pipeline_002_source0_data),                                                       //          .data
		.out_channel       (mux_pipeline_002_source0_channel),                                                    //          .channel
		.in_empty          (1'b0),                                                                                // (terminated)
		.out_empty         (),                                                                                    // (terminated)
		.out_error         (),                                                                                    // (terminated)
		.in_error          (1'b0)                                                                                 // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (235),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_003 (
		.clk               (clk_100m_clk_clk),                                                                    //       cr0.clk
		.reset             (axi_conduit_merger_0_altera_axi_master_id_pad_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                                                            //     sink0.ready
		.in_valid          (rsp_demux_001_src0_valid),                                                            //          .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),                                                    //          .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                                                      //          .endofpacket
		.in_data           (rsp_demux_001_src0_data),                                                             //          .data
		.in_channel        (rsp_demux_001_src0_channel),                                                          //          .channel
		.out_ready         (mux_pipeline_003_source0_ready),                                                      //   source0.ready
		.out_valid         (mux_pipeline_003_source0_valid),                                                      //          .valid
		.out_startofpacket (mux_pipeline_003_source0_startofpacket),                                              //          .startofpacket
		.out_endofpacket   (mux_pipeline_003_source0_endofpacket),                                                //          .endofpacket
		.out_data          (mux_pipeline_003_source0_data),                                                       //          .data
		.out_channel       (mux_pipeline_003_source0_channel),                                                    //          .channel
		.in_empty          (1'b0),                                                                                // (terminated)
		.out_empty         (),                                                                                    // (terminated)
		.out_error         (),                                                                                    // (terminated)
		.in_error          (1'b0)                                                                                 // (terminated)
	);

endmodule
