// soc_system_mm_interconnect_2.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 22.1 922

`timescale 1 ps / 1 ps
module soc_system_mm_interconnect_2 (
		input  wire [11:0]  hps_0_h2f_axi_master_awid,                                        //                                       hps_0_h2f_axi_master.awid
		input  wire [29:0]  hps_0_h2f_axi_master_awaddr,                                      //                                                           .awaddr
		input  wire [3:0]   hps_0_h2f_axi_master_awlen,                                       //                                                           .awlen
		input  wire [2:0]   hps_0_h2f_axi_master_awsize,                                      //                                                           .awsize
		input  wire [1:0]   hps_0_h2f_axi_master_awburst,                                     //                                                           .awburst
		input  wire [1:0]   hps_0_h2f_axi_master_awlock,                                      //                                                           .awlock
		input  wire [3:0]   hps_0_h2f_axi_master_awcache,                                     //                                                           .awcache
		input  wire [2:0]   hps_0_h2f_axi_master_awprot,                                      //                                                           .awprot
		input  wire         hps_0_h2f_axi_master_awvalid,                                     //                                                           .awvalid
		output wire         hps_0_h2f_axi_master_awready,                                     //                                                           .awready
		input  wire [11:0]  hps_0_h2f_axi_master_wid,                                         //                                                           .wid
		input  wire [127:0] hps_0_h2f_axi_master_wdata,                                       //                                                           .wdata
		input  wire [15:0]  hps_0_h2f_axi_master_wstrb,                                       //                                                           .wstrb
		input  wire         hps_0_h2f_axi_master_wlast,                                       //                                                           .wlast
		input  wire         hps_0_h2f_axi_master_wvalid,                                      //                                                           .wvalid
		output wire         hps_0_h2f_axi_master_wready,                                      //                                                           .wready
		output wire [11:0]  hps_0_h2f_axi_master_bid,                                         //                                                           .bid
		output wire [1:0]   hps_0_h2f_axi_master_bresp,                                       //                                                           .bresp
		output wire         hps_0_h2f_axi_master_bvalid,                                      //                                                           .bvalid
		input  wire         hps_0_h2f_axi_master_bready,                                      //                                                           .bready
		input  wire [11:0]  hps_0_h2f_axi_master_arid,                                        //                                                           .arid
		input  wire [29:0]  hps_0_h2f_axi_master_araddr,                                      //                                                           .araddr
		input  wire [3:0]   hps_0_h2f_axi_master_arlen,                                       //                                                           .arlen
		input  wire [2:0]   hps_0_h2f_axi_master_arsize,                                      //                                                           .arsize
		input  wire [1:0]   hps_0_h2f_axi_master_arburst,                                     //                                                           .arburst
		input  wire [1:0]   hps_0_h2f_axi_master_arlock,                                      //                                                           .arlock
		input  wire [3:0]   hps_0_h2f_axi_master_arcache,                                     //                                                           .arcache
		input  wire [2:0]   hps_0_h2f_axi_master_arprot,                                      //                                                           .arprot
		input  wire         hps_0_h2f_axi_master_arvalid,                                     //                                                           .arvalid
		output wire         hps_0_h2f_axi_master_arready,                                     //                                                           .arready
		output wire [11:0]  hps_0_h2f_axi_master_rid,                                         //                                                           .rid
		output wire [127:0] hps_0_h2f_axi_master_rdata,                                       //                                                           .rdata
		output wire [1:0]   hps_0_h2f_axi_master_rresp,                                       //                                                           .rresp
		output wire         hps_0_h2f_axi_master_rlast,                                       //                                                           .rlast
		output wire         hps_0_h2f_axi_master_rvalid,                                      //                                                           .rvalid
		input  wire         hps_0_h2f_axi_master_rready,                                      //                                                           .rready
		input  wire         clk_100m_clk_clk,                                                 //                                               clk_100m_clk.clk
		input  wire         hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire         sysid_qsys_reset_reset_bridge_in_reset_reset,                     //                     sysid_qsys_reset_reset_bridge_in_reset.reset
		output wire [10:0]  DataMover_0_s0_address,                                           //                                             DataMover_0_s0.address
		output wire         DataMover_0_s0_write,                                             //                                                           .write
		output wire         DataMover_0_s0_read,                                              //                                                           .read
		input  wire [31:0]  DataMover_0_s0_readdata,                                          //                                                           .readdata
		output wire [31:0]  DataMover_0_s0_writedata,                                         //                                                           .writedata
		input  wire         DataMover_0_s0_waitrequest,                                       //                                                           .waitrequest
		output wire [10:0]  Decoder_0_s0_address,                                             //                                               Decoder_0_s0.address
		output wire         Decoder_0_s0_write,                                               //                                                           .write
		output wire         Decoder_0_s0_read,                                                //                                                           .read
		input  wire [31:0]  Decoder_0_s0_readdata,                                            //                                                           .readdata
		output wire [31:0]  Decoder_0_s0_writedata,                                           //                                                           .writedata
		input  wire         Decoder_0_s0_waitrequest,                                         //                                                           .waitrequest
		output wire [10:0]  Encoder_0_s0_address,                                             //                                               Encoder_0_s0.address
		output wire         Encoder_0_s0_write,                                               //                                                           .write
		output wire         Encoder_0_s0_read,                                                //                                                           .read
		input  wire [31:0]  Encoder_0_s0_readdata,                                            //                                                           .readdata
		output wire [31:0]  Encoder_0_s0_writedata,                                           //                                                           .writedata
		input  wire         Encoder_0_s0_waitrequest,                                         //                                                           .waitrequest
		output wire [0:0]   sysid_qsys_control_slave_address,                                 //                                   sysid_qsys_control_slave.address
		input  wire [31:0]  sysid_qsys_control_slave_readdata                                 //                                                           .readdata
	);

	wire   [31:0] sysid_qsys_control_slave_agent_m0_readdata;                   // sysid_qsys_control_slave_translator:uav_readdata -> sysid_qsys_control_slave_agent:m0_readdata
	wire          sysid_qsys_control_slave_agent_m0_waitrequest;                // sysid_qsys_control_slave_translator:uav_waitrequest -> sysid_qsys_control_slave_agent:m0_waitrequest
	wire          sysid_qsys_control_slave_agent_m0_debugaccess;                // sysid_qsys_control_slave_agent:m0_debugaccess -> sysid_qsys_control_slave_translator:uav_debugaccess
	wire   [29:0] sysid_qsys_control_slave_agent_m0_address;                    // sysid_qsys_control_slave_agent:m0_address -> sysid_qsys_control_slave_translator:uav_address
	wire    [3:0] sysid_qsys_control_slave_agent_m0_byteenable;                 // sysid_qsys_control_slave_agent:m0_byteenable -> sysid_qsys_control_slave_translator:uav_byteenable
	wire          sysid_qsys_control_slave_agent_m0_read;                       // sysid_qsys_control_slave_agent:m0_read -> sysid_qsys_control_slave_translator:uav_read
	wire          sysid_qsys_control_slave_agent_m0_readdatavalid;              // sysid_qsys_control_slave_translator:uav_readdatavalid -> sysid_qsys_control_slave_agent:m0_readdatavalid
	wire          sysid_qsys_control_slave_agent_m0_lock;                       // sysid_qsys_control_slave_agent:m0_lock -> sysid_qsys_control_slave_translator:uav_lock
	wire   [31:0] sysid_qsys_control_slave_agent_m0_writedata;                  // sysid_qsys_control_slave_agent:m0_writedata -> sysid_qsys_control_slave_translator:uav_writedata
	wire          sysid_qsys_control_slave_agent_m0_write;                      // sysid_qsys_control_slave_agent:m0_write -> sysid_qsys_control_slave_translator:uav_write
	wire    [2:0] sysid_qsys_control_slave_agent_m0_burstcount;                 // sysid_qsys_control_slave_agent:m0_burstcount -> sysid_qsys_control_slave_translator:uav_burstcount
	wire          sysid_qsys_control_slave_agent_rf_source_valid;               // sysid_qsys_control_slave_agent:rf_source_valid -> sysid_qsys_control_slave_agent_rsp_fifo:in_valid
	wire  [127:0] sysid_qsys_control_slave_agent_rf_source_data;                // sysid_qsys_control_slave_agent:rf_source_data -> sysid_qsys_control_slave_agent_rsp_fifo:in_data
	wire          sysid_qsys_control_slave_agent_rf_source_ready;               // sysid_qsys_control_slave_agent_rsp_fifo:in_ready -> sysid_qsys_control_slave_agent:rf_source_ready
	wire          sysid_qsys_control_slave_agent_rf_source_startofpacket;       // sysid_qsys_control_slave_agent:rf_source_startofpacket -> sysid_qsys_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_qsys_control_slave_agent_rf_source_endofpacket;         // sysid_qsys_control_slave_agent:rf_source_endofpacket -> sysid_qsys_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_valid;            // sysid_qsys_control_slave_agent_rsp_fifo:out_valid -> sysid_qsys_control_slave_agent:rf_sink_valid
	wire  [127:0] sysid_qsys_control_slave_agent_rsp_fifo_out_data;             // sysid_qsys_control_slave_agent_rsp_fifo:out_data -> sysid_qsys_control_slave_agent:rf_sink_data
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_ready;            // sysid_qsys_control_slave_agent:rf_sink_ready -> sysid_qsys_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket;    // sysid_qsys_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_qsys_control_slave_agent:rf_sink_startofpacket
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket;      // sysid_qsys_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_qsys_control_slave_agent:rf_sink_endofpacket
	wire          sysid_qsys_control_slave_agent_rdata_fifo_src_valid;          // sysid_qsys_control_slave_agent:rdata_fifo_src_valid -> sysid_qsys_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] sysid_qsys_control_slave_agent_rdata_fifo_src_data;           // sysid_qsys_control_slave_agent:rdata_fifo_src_data -> sysid_qsys_control_slave_agent_rdata_fifo:in_data
	wire          sysid_qsys_control_slave_agent_rdata_fifo_src_ready;          // sysid_qsys_control_slave_agent_rdata_fifo:in_ready -> sysid_qsys_control_slave_agent:rdata_fifo_src_ready
	wire   [31:0] datamover_0_s0_agent_m0_readdata;                             // DataMover_0_s0_translator:uav_readdata -> DataMover_0_s0_agent:m0_readdata
	wire          datamover_0_s0_agent_m0_waitrequest;                          // DataMover_0_s0_translator:uav_waitrequest -> DataMover_0_s0_agent:m0_waitrequest
	wire          datamover_0_s0_agent_m0_debugaccess;                          // DataMover_0_s0_agent:m0_debugaccess -> DataMover_0_s0_translator:uav_debugaccess
	wire   [29:0] datamover_0_s0_agent_m0_address;                              // DataMover_0_s0_agent:m0_address -> DataMover_0_s0_translator:uav_address
	wire    [3:0] datamover_0_s0_agent_m0_byteenable;                           // DataMover_0_s0_agent:m0_byteenable -> DataMover_0_s0_translator:uav_byteenable
	wire          datamover_0_s0_agent_m0_read;                                 // DataMover_0_s0_agent:m0_read -> DataMover_0_s0_translator:uav_read
	wire          datamover_0_s0_agent_m0_readdatavalid;                        // DataMover_0_s0_translator:uav_readdatavalid -> DataMover_0_s0_agent:m0_readdatavalid
	wire          datamover_0_s0_agent_m0_lock;                                 // DataMover_0_s0_agent:m0_lock -> DataMover_0_s0_translator:uav_lock
	wire   [31:0] datamover_0_s0_agent_m0_writedata;                            // DataMover_0_s0_agent:m0_writedata -> DataMover_0_s0_translator:uav_writedata
	wire          datamover_0_s0_agent_m0_write;                                // DataMover_0_s0_agent:m0_write -> DataMover_0_s0_translator:uav_write
	wire    [2:0] datamover_0_s0_agent_m0_burstcount;                           // DataMover_0_s0_agent:m0_burstcount -> DataMover_0_s0_translator:uav_burstcount
	wire          datamover_0_s0_agent_rf_source_valid;                         // DataMover_0_s0_agent:rf_source_valid -> DataMover_0_s0_agent_rsp_fifo:in_valid
	wire  [127:0] datamover_0_s0_agent_rf_source_data;                          // DataMover_0_s0_agent:rf_source_data -> DataMover_0_s0_agent_rsp_fifo:in_data
	wire          datamover_0_s0_agent_rf_source_ready;                         // DataMover_0_s0_agent_rsp_fifo:in_ready -> DataMover_0_s0_agent:rf_source_ready
	wire          datamover_0_s0_agent_rf_source_startofpacket;                 // DataMover_0_s0_agent:rf_source_startofpacket -> DataMover_0_s0_agent_rsp_fifo:in_startofpacket
	wire          datamover_0_s0_agent_rf_source_endofpacket;                   // DataMover_0_s0_agent:rf_source_endofpacket -> DataMover_0_s0_agent_rsp_fifo:in_endofpacket
	wire          datamover_0_s0_agent_rsp_fifo_out_valid;                      // DataMover_0_s0_agent_rsp_fifo:out_valid -> DataMover_0_s0_agent:rf_sink_valid
	wire  [127:0] datamover_0_s0_agent_rsp_fifo_out_data;                       // DataMover_0_s0_agent_rsp_fifo:out_data -> DataMover_0_s0_agent:rf_sink_data
	wire          datamover_0_s0_agent_rsp_fifo_out_ready;                      // DataMover_0_s0_agent:rf_sink_ready -> DataMover_0_s0_agent_rsp_fifo:out_ready
	wire          datamover_0_s0_agent_rsp_fifo_out_startofpacket;              // DataMover_0_s0_agent_rsp_fifo:out_startofpacket -> DataMover_0_s0_agent:rf_sink_startofpacket
	wire          datamover_0_s0_agent_rsp_fifo_out_endofpacket;                // DataMover_0_s0_agent_rsp_fifo:out_endofpacket -> DataMover_0_s0_agent:rf_sink_endofpacket
	wire          datamover_0_s0_agent_rdata_fifo_src_valid;                    // DataMover_0_s0_agent:rdata_fifo_src_valid -> DataMover_0_s0_agent_rdata_fifo:in_valid
	wire   [33:0] datamover_0_s0_agent_rdata_fifo_src_data;                     // DataMover_0_s0_agent:rdata_fifo_src_data -> DataMover_0_s0_agent_rdata_fifo:in_data
	wire          datamover_0_s0_agent_rdata_fifo_src_ready;                    // DataMover_0_s0_agent_rdata_fifo:in_ready -> DataMover_0_s0_agent:rdata_fifo_src_ready
	wire   [31:0] encoder_0_s0_agent_m0_readdata;                               // Encoder_0_s0_translator:uav_readdata -> Encoder_0_s0_agent:m0_readdata
	wire          encoder_0_s0_agent_m0_waitrequest;                            // Encoder_0_s0_translator:uav_waitrequest -> Encoder_0_s0_agent:m0_waitrequest
	wire          encoder_0_s0_agent_m0_debugaccess;                            // Encoder_0_s0_agent:m0_debugaccess -> Encoder_0_s0_translator:uav_debugaccess
	wire   [29:0] encoder_0_s0_agent_m0_address;                                // Encoder_0_s0_agent:m0_address -> Encoder_0_s0_translator:uav_address
	wire    [3:0] encoder_0_s0_agent_m0_byteenable;                             // Encoder_0_s0_agent:m0_byteenable -> Encoder_0_s0_translator:uav_byteenable
	wire          encoder_0_s0_agent_m0_read;                                   // Encoder_0_s0_agent:m0_read -> Encoder_0_s0_translator:uav_read
	wire          encoder_0_s0_agent_m0_readdatavalid;                          // Encoder_0_s0_translator:uav_readdatavalid -> Encoder_0_s0_agent:m0_readdatavalid
	wire          encoder_0_s0_agent_m0_lock;                                   // Encoder_0_s0_agent:m0_lock -> Encoder_0_s0_translator:uav_lock
	wire   [31:0] encoder_0_s0_agent_m0_writedata;                              // Encoder_0_s0_agent:m0_writedata -> Encoder_0_s0_translator:uav_writedata
	wire          encoder_0_s0_agent_m0_write;                                  // Encoder_0_s0_agent:m0_write -> Encoder_0_s0_translator:uav_write
	wire    [2:0] encoder_0_s0_agent_m0_burstcount;                             // Encoder_0_s0_agent:m0_burstcount -> Encoder_0_s0_translator:uav_burstcount
	wire          encoder_0_s0_agent_rf_source_valid;                           // Encoder_0_s0_agent:rf_source_valid -> Encoder_0_s0_agent_rsp_fifo:in_valid
	wire  [127:0] encoder_0_s0_agent_rf_source_data;                            // Encoder_0_s0_agent:rf_source_data -> Encoder_0_s0_agent_rsp_fifo:in_data
	wire          encoder_0_s0_agent_rf_source_ready;                           // Encoder_0_s0_agent_rsp_fifo:in_ready -> Encoder_0_s0_agent:rf_source_ready
	wire          encoder_0_s0_agent_rf_source_startofpacket;                   // Encoder_0_s0_agent:rf_source_startofpacket -> Encoder_0_s0_agent_rsp_fifo:in_startofpacket
	wire          encoder_0_s0_agent_rf_source_endofpacket;                     // Encoder_0_s0_agent:rf_source_endofpacket -> Encoder_0_s0_agent_rsp_fifo:in_endofpacket
	wire          encoder_0_s0_agent_rsp_fifo_out_valid;                        // Encoder_0_s0_agent_rsp_fifo:out_valid -> Encoder_0_s0_agent:rf_sink_valid
	wire  [127:0] encoder_0_s0_agent_rsp_fifo_out_data;                         // Encoder_0_s0_agent_rsp_fifo:out_data -> Encoder_0_s0_agent:rf_sink_data
	wire          encoder_0_s0_agent_rsp_fifo_out_ready;                        // Encoder_0_s0_agent:rf_sink_ready -> Encoder_0_s0_agent_rsp_fifo:out_ready
	wire          encoder_0_s0_agent_rsp_fifo_out_startofpacket;                // Encoder_0_s0_agent_rsp_fifo:out_startofpacket -> Encoder_0_s0_agent:rf_sink_startofpacket
	wire          encoder_0_s0_agent_rsp_fifo_out_endofpacket;                  // Encoder_0_s0_agent_rsp_fifo:out_endofpacket -> Encoder_0_s0_agent:rf_sink_endofpacket
	wire          encoder_0_s0_agent_rdata_fifo_src_valid;                      // Encoder_0_s0_agent:rdata_fifo_src_valid -> Encoder_0_s0_agent_rdata_fifo:in_valid
	wire   [33:0] encoder_0_s0_agent_rdata_fifo_src_data;                       // Encoder_0_s0_agent:rdata_fifo_src_data -> Encoder_0_s0_agent_rdata_fifo:in_data
	wire          encoder_0_s0_agent_rdata_fifo_src_ready;                      // Encoder_0_s0_agent_rdata_fifo:in_ready -> Encoder_0_s0_agent:rdata_fifo_src_ready
	wire   [31:0] decoder_0_s0_agent_m0_readdata;                               // Decoder_0_s0_translator:uav_readdata -> Decoder_0_s0_agent:m0_readdata
	wire          decoder_0_s0_agent_m0_waitrequest;                            // Decoder_0_s0_translator:uav_waitrequest -> Decoder_0_s0_agent:m0_waitrequest
	wire          decoder_0_s0_agent_m0_debugaccess;                            // Decoder_0_s0_agent:m0_debugaccess -> Decoder_0_s0_translator:uav_debugaccess
	wire   [29:0] decoder_0_s0_agent_m0_address;                                // Decoder_0_s0_agent:m0_address -> Decoder_0_s0_translator:uav_address
	wire    [3:0] decoder_0_s0_agent_m0_byteenable;                             // Decoder_0_s0_agent:m0_byteenable -> Decoder_0_s0_translator:uav_byteenable
	wire          decoder_0_s0_agent_m0_read;                                   // Decoder_0_s0_agent:m0_read -> Decoder_0_s0_translator:uav_read
	wire          decoder_0_s0_agent_m0_readdatavalid;                          // Decoder_0_s0_translator:uav_readdatavalid -> Decoder_0_s0_agent:m0_readdatavalid
	wire          decoder_0_s0_agent_m0_lock;                                   // Decoder_0_s0_agent:m0_lock -> Decoder_0_s0_translator:uav_lock
	wire   [31:0] decoder_0_s0_agent_m0_writedata;                              // Decoder_0_s0_agent:m0_writedata -> Decoder_0_s0_translator:uav_writedata
	wire          decoder_0_s0_agent_m0_write;                                  // Decoder_0_s0_agent:m0_write -> Decoder_0_s0_translator:uav_write
	wire    [2:0] decoder_0_s0_agent_m0_burstcount;                             // Decoder_0_s0_agent:m0_burstcount -> Decoder_0_s0_translator:uav_burstcount
	wire          decoder_0_s0_agent_rf_source_valid;                           // Decoder_0_s0_agent:rf_source_valid -> Decoder_0_s0_agent_rsp_fifo:in_valid
	wire  [127:0] decoder_0_s0_agent_rf_source_data;                            // Decoder_0_s0_agent:rf_source_data -> Decoder_0_s0_agent_rsp_fifo:in_data
	wire          decoder_0_s0_agent_rf_source_ready;                           // Decoder_0_s0_agent_rsp_fifo:in_ready -> Decoder_0_s0_agent:rf_source_ready
	wire          decoder_0_s0_agent_rf_source_startofpacket;                   // Decoder_0_s0_agent:rf_source_startofpacket -> Decoder_0_s0_agent_rsp_fifo:in_startofpacket
	wire          decoder_0_s0_agent_rf_source_endofpacket;                     // Decoder_0_s0_agent:rf_source_endofpacket -> Decoder_0_s0_agent_rsp_fifo:in_endofpacket
	wire          decoder_0_s0_agent_rsp_fifo_out_valid;                        // Decoder_0_s0_agent_rsp_fifo:out_valid -> Decoder_0_s0_agent:rf_sink_valid
	wire  [127:0] decoder_0_s0_agent_rsp_fifo_out_data;                         // Decoder_0_s0_agent_rsp_fifo:out_data -> Decoder_0_s0_agent:rf_sink_data
	wire          decoder_0_s0_agent_rsp_fifo_out_ready;                        // Decoder_0_s0_agent:rf_sink_ready -> Decoder_0_s0_agent_rsp_fifo:out_ready
	wire          decoder_0_s0_agent_rsp_fifo_out_startofpacket;                // Decoder_0_s0_agent_rsp_fifo:out_startofpacket -> Decoder_0_s0_agent:rf_sink_startofpacket
	wire          decoder_0_s0_agent_rsp_fifo_out_endofpacket;                  // Decoder_0_s0_agent_rsp_fifo:out_endofpacket -> Decoder_0_s0_agent:rf_sink_endofpacket
	wire          decoder_0_s0_agent_rdata_fifo_src_valid;                      // Decoder_0_s0_agent:rdata_fifo_src_valid -> Decoder_0_s0_agent_rdata_fifo:in_valid
	wire   [33:0] decoder_0_s0_agent_rdata_fifo_src_data;                       // Decoder_0_s0_agent:rdata_fifo_src_data -> Decoder_0_s0_agent_rdata_fifo:in_data
	wire          decoder_0_s0_agent_rdata_fifo_src_ready;                      // Decoder_0_s0_agent_rdata_fifo:in_ready -> Decoder_0_s0_agent:rdata_fifo_src_ready
	wire          hps_0_h2f_axi_master_agent_write_cp_valid;                    // hps_0_h2f_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [234:0] hps_0_h2f_axi_master_agent_write_cp_data;                     // hps_0_h2f_axi_master_agent:write_cp_data -> router:sink_data
	wire          hps_0_h2f_axi_master_agent_write_cp_ready;                    // router:sink_ready -> hps_0_h2f_axi_master_agent:write_cp_ready
	wire          hps_0_h2f_axi_master_agent_write_cp_startofpacket;            // hps_0_h2f_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          hps_0_h2f_axi_master_agent_write_cp_endofpacket;              // hps_0_h2f_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          hps_0_h2f_axi_master_agent_read_cp_valid;                     // hps_0_h2f_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [234:0] hps_0_h2f_axi_master_agent_read_cp_data;                      // hps_0_h2f_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          hps_0_h2f_axi_master_agent_read_cp_ready;                     // router_001:sink_ready -> hps_0_h2f_axi_master_agent:read_cp_ready
	wire          hps_0_h2f_axi_master_agent_read_cp_startofpacket;             // hps_0_h2f_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          hps_0_h2f_axi_master_agent_read_cp_endofpacket;               // hps_0_h2f_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          router_src_valid;                                             // router:src_valid -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_valid
	wire  [234:0] router_src_data;                                              // router:src_data -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_data
	wire          router_src_ready;                                             // hps_0_h2f_axi_master_wr_limiter:cmd_sink_ready -> router:src_ready
	wire    [3:0] router_src_channel;                                           // router:src_channel -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                     // router:src_startofpacket -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                       // router:src_endofpacket -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_endofpacket
	wire          hps_0_h2f_axi_master_wr_limiter_rsp_src_valid;                // hps_0_h2f_axi_master_wr_limiter:rsp_src_valid -> hps_0_h2f_axi_master_agent:write_rp_valid
	wire  [234:0] hps_0_h2f_axi_master_wr_limiter_rsp_src_data;                 // hps_0_h2f_axi_master_wr_limiter:rsp_src_data -> hps_0_h2f_axi_master_agent:write_rp_data
	wire          hps_0_h2f_axi_master_wr_limiter_rsp_src_ready;                // hps_0_h2f_axi_master_agent:write_rp_ready -> hps_0_h2f_axi_master_wr_limiter:rsp_src_ready
	wire    [3:0] hps_0_h2f_axi_master_wr_limiter_rsp_src_channel;              // hps_0_h2f_axi_master_wr_limiter:rsp_src_channel -> hps_0_h2f_axi_master_agent:write_rp_channel
	wire          hps_0_h2f_axi_master_wr_limiter_rsp_src_startofpacket;        // hps_0_h2f_axi_master_wr_limiter:rsp_src_startofpacket -> hps_0_h2f_axi_master_agent:write_rp_startofpacket
	wire          hps_0_h2f_axi_master_wr_limiter_rsp_src_endofpacket;          // hps_0_h2f_axi_master_wr_limiter:rsp_src_endofpacket -> hps_0_h2f_axi_master_agent:write_rp_endofpacket
	wire          router_001_src_valid;                                         // router_001:src_valid -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_valid
	wire  [234:0] router_001_src_data;                                          // router_001:src_data -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_data
	wire          router_001_src_ready;                                         // hps_0_h2f_axi_master_rd_limiter:cmd_sink_ready -> router_001:src_ready
	wire    [3:0] router_001_src_channel;                                       // router_001:src_channel -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                 // router_001:src_startofpacket -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                   // router_001:src_endofpacket -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_endofpacket
	wire          hps_0_h2f_axi_master_rd_limiter_rsp_src_valid;                // hps_0_h2f_axi_master_rd_limiter:rsp_src_valid -> hps_0_h2f_axi_master_agent:read_rp_valid
	wire  [234:0] hps_0_h2f_axi_master_rd_limiter_rsp_src_data;                 // hps_0_h2f_axi_master_rd_limiter:rsp_src_data -> hps_0_h2f_axi_master_agent:read_rp_data
	wire          hps_0_h2f_axi_master_rd_limiter_rsp_src_ready;                // hps_0_h2f_axi_master_agent:read_rp_ready -> hps_0_h2f_axi_master_rd_limiter:rsp_src_ready
	wire    [3:0] hps_0_h2f_axi_master_rd_limiter_rsp_src_channel;              // hps_0_h2f_axi_master_rd_limiter:rsp_src_channel -> hps_0_h2f_axi_master_agent:read_rp_channel
	wire          hps_0_h2f_axi_master_rd_limiter_rsp_src_startofpacket;        // hps_0_h2f_axi_master_rd_limiter:rsp_src_startofpacket -> hps_0_h2f_axi_master_agent:read_rp_startofpacket
	wire          hps_0_h2f_axi_master_rd_limiter_rsp_src_endofpacket;          // hps_0_h2f_axi_master_rd_limiter:rsp_src_endofpacket -> hps_0_h2f_axi_master_agent:read_rp_endofpacket
	wire          router_002_src_valid;                                         // router_002:src_valid -> sysid_qsys_control_slave_rsp_width_adapter:in_valid
	wire  [126:0] router_002_src_data;                                          // router_002:src_data -> sysid_qsys_control_slave_rsp_width_adapter:in_data
	wire          router_002_src_ready;                                         // sysid_qsys_control_slave_rsp_width_adapter:in_ready -> router_002:src_ready
	wire    [3:0] router_002_src_channel;                                       // router_002:src_channel -> sysid_qsys_control_slave_rsp_width_adapter:in_channel
	wire          router_002_src_startofpacket;                                 // router_002:src_startofpacket -> sysid_qsys_control_slave_rsp_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                   // router_002:src_endofpacket -> sysid_qsys_control_slave_rsp_width_adapter:in_endofpacket
	wire          sysid_qsys_control_slave_rsp_width_adapter_src_valid;         // sysid_qsys_control_slave_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [234:0] sysid_qsys_control_slave_rsp_width_adapter_src_data;          // sysid_qsys_control_slave_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          sysid_qsys_control_slave_rsp_width_adapter_src_ready;         // rsp_demux:sink_ready -> sysid_qsys_control_slave_rsp_width_adapter:out_ready
	wire    [3:0] sysid_qsys_control_slave_rsp_width_adapter_src_channel;       // sysid_qsys_control_slave_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          sysid_qsys_control_slave_rsp_width_adapter_src_startofpacket; // sysid_qsys_control_slave_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          sysid_qsys_control_slave_rsp_width_adapter_src_endofpacket;   // sysid_qsys_control_slave_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_003_src_valid;                                         // router_003:src_valid -> DataMover_0_s0_rsp_width_adapter:in_valid
	wire  [126:0] router_003_src_data;                                          // router_003:src_data -> DataMover_0_s0_rsp_width_adapter:in_data
	wire          router_003_src_ready;                                         // DataMover_0_s0_rsp_width_adapter:in_ready -> router_003:src_ready
	wire    [3:0] router_003_src_channel;                                       // router_003:src_channel -> DataMover_0_s0_rsp_width_adapter:in_channel
	wire          router_003_src_startofpacket;                                 // router_003:src_startofpacket -> DataMover_0_s0_rsp_width_adapter:in_startofpacket
	wire          router_003_src_endofpacket;                                   // router_003:src_endofpacket -> DataMover_0_s0_rsp_width_adapter:in_endofpacket
	wire          datamover_0_s0_rsp_width_adapter_src_valid;                   // DataMover_0_s0_rsp_width_adapter:out_valid -> rsp_demux_001:sink_valid
	wire  [234:0] datamover_0_s0_rsp_width_adapter_src_data;                    // DataMover_0_s0_rsp_width_adapter:out_data -> rsp_demux_001:sink_data
	wire          datamover_0_s0_rsp_width_adapter_src_ready;                   // rsp_demux_001:sink_ready -> DataMover_0_s0_rsp_width_adapter:out_ready
	wire    [3:0] datamover_0_s0_rsp_width_adapter_src_channel;                 // DataMover_0_s0_rsp_width_adapter:out_channel -> rsp_demux_001:sink_channel
	wire          datamover_0_s0_rsp_width_adapter_src_startofpacket;           // DataMover_0_s0_rsp_width_adapter:out_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          datamover_0_s0_rsp_width_adapter_src_endofpacket;             // DataMover_0_s0_rsp_width_adapter:out_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_004_src_valid;                                         // router_004:src_valid -> Encoder_0_s0_rsp_width_adapter:in_valid
	wire  [126:0] router_004_src_data;                                          // router_004:src_data -> Encoder_0_s0_rsp_width_adapter:in_data
	wire          router_004_src_ready;                                         // Encoder_0_s0_rsp_width_adapter:in_ready -> router_004:src_ready
	wire    [3:0] router_004_src_channel;                                       // router_004:src_channel -> Encoder_0_s0_rsp_width_adapter:in_channel
	wire          router_004_src_startofpacket;                                 // router_004:src_startofpacket -> Encoder_0_s0_rsp_width_adapter:in_startofpacket
	wire          router_004_src_endofpacket;                                   // router_004:src_endofpacket -> Encoder_0_s0_rsp_width_adapter:in_endofpacket
	wire          encoder_0_s0_rsp_width_adapter_src_valid;                     // Encoder_0_s0_rsp_width_adapter:out_valid -> rsp_demux_002:sink_valid
	wire  [234:0] encoder_0_s0_rsp_width_adapter_src_data;                      // Encoder_0_s0_rsp_width_adapter:out_data -> rsp_demux_002:sink_data
	wire          encoder_0_s0_rsp_width_adapter_src_ready;                     // rsp_demux_002:sink_ready -> Encoder_0_s0_rsp_width_adapter:out_ready
	wire    [3:0] encoder_0_s0_rsp_width_adapter_src_channel;                   // Encoder_0_s0_rsp_width_adapter:out_channel -> rsp_demux_002:sink_channel
	wire          encoder_0_s0_rsp_width_adapter_src_startofpacket;             // Encoder_0_s0_rsp_width_adapter:out_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          encoder_0_s0_rsp_width_adapter_src_endofpacket;               // Encoder_0_s0_rsp_width_adapter:out_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_005_src_valid;                                         // router_005:src_valid -> Decoder_0_s0_rsp_width_adapter:in_valid
	wire  [126:0] router_005_src_data;                                          // router_005:src_data -> Decoder_0_s0_rsp_width_adapter:in_data
	wire          router_005_src_ready;                                         // Decoder_0_s0_rsp_width_adapter:in_ready -> router_005:src_ready
	wire    [3:0] router_005_src_channel;                                       // router_005:src_channel -> Decoder_0_s0_rsp_width_adapter:in_channel
	wire          router_005_src_startofpacket;                                 // router_005:src_startofpacket -> Decoder_0_s0_rsp_width_adapter:in_startofpacket
	wire          router_005_src_endofpacket;                                   // router_005:src_endofpacket -> Decoder_0_s0_rsp_width_adapter:in_endofpacket
	wire          decoder_0_s0_rsp_width_adapter_src_valid;                     // Decoder_0_s0_rsp_width_adapter:out_valid -> rsp_demux_003:sink_valid
	wire  [234:0] decoder_0_s0_rsp_width_adapter_src_data;                      // Decoder_0_s0_rsp_width_adapter:out_data -> rsp_demux_003:sink_data
	wire          decoder_0_s0_rsp_width_adapter_src_ready;                     // rsp_demux_003:sink_ready -> Decoder_0_s0_rsp_width_adapter:out_ready
	wire    [3:0] decoder_0_s0_rsp_width_adapter_src_channel;                   // Decoder_0_s0_rsp_width_adapter:out_channel -> rsp_demux_003:sink_channel
	wire          decoder_0_s0_rsp_width_adapter_src_startofpacket;             // Decoder_0_s0_rsp_width_adapter:out_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          decoder_0_s0_rsp_width_adapter_src_endofpacket;               // Decoder_0_s0_rsp_width_adapter:out_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          cmd_mux_src_valid;                                            // cmd_mux:src_valid -> sysid_qsys_control_slave_cmd_width_adapter:in_valid
	wire  [234:0] cmd_mux_src_data;                                             // cmd_mux:src_data -> sysid_qsys_control_slave_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                            // sysid_qsys_control_slave_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [3:0] cmd_mux_src_channel;                                          // cmd_mux:src_channel -> sysid_qsys_control_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                    // cmd_mux:src_startofpacket -> sysid_qsys_control_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                      // cmd_mux:src_endofpacket -> sysid_qsys_control_slave_cmd_width_adapter:in_endofpacket
	wire          sysid_qsys_control_slave_cmd_width_adapter_src_valid;         // sysid_qsys_control_slave_cmd_width_adapter:out_valid -> sysid_qsys_control_slave_burst_adapter:sink0_valid
	wire  [126:0] sysid_qsys_control_slave_cmd_width_adapter_src_data;          // sysid_qsys_control_slave_cmd_width_adapter:out_data -> sysid_qsys_control_slave_burst_adapter:sink0_data
	wire          sysid_qsys_control_slave_cmd_width_adapter_src_ready;         // sysid_qsys_control_slave_burst_adapter:sink0_ready -> sysid_qsys_control_slave_cmd_width_adapter:out_ready
	wire    [3:0] sysid_qsys_control_slave_cmd_width_adapter_src_channel;       // sysid_qsys_control_slave_cmd_width_adapter:out_channel -> sysid_qsys_control_slave_burst_adapter:sink0_channel
	wire          sysid_qsys_control_slave_cmd_width_adapter_src_startofpacket; // sysid_qsys_control_slave_cmd_width_adapter:out_startofpacket -> sysid_qsys_control_slave_burst_adapter:sink0_startofpacket
	wire          sysid_qsys_control_slave_cmd_width_adapter_src_endofpacket;   // sysid_qsys_control_slave_cmd_width_adapter:out_endofpacket -> sysid_qsys_control_slave_burst_adapter:sink0_endofpacket
	wire          cmd_mux_001_src_valid;                                        // cmd_mux_001:src_valid -> DataMover_0_s0_cmd_width_adapter:in_valid
	wire  [234:0] cmd_mux_001_src_data;                                         // cmd_mux_001:src_data -> DataMover_0_s0_cmd_width_adapter:in_data
	wire          cmd_mux_001_src_ready;                                        // DataMover_0_s0_cmd_width_adapter:in_ready -> cmd_mux_001:src_ready
	wire    [3:0] cmd_mux_001_src_channel;                                      // cmd_mux_001:src_channel -> DataMover_0_s0_cmd_width_adapter:in_channel
	wire          cmd_mux_001_src_startofpacket;                                // cmd_mux_001:src_startofpacket -> DataMover_0_s0_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                  // cmd_mux_001:src_endofpacket -> DataMover_0_s0_cmd_width_adapter:in_endofpacket
	wire          datamover_0_s0_cmd_width_adapter_src_valid;                   // DataMover_0_s0_cmd_width_adapter:out_valid -> DataMover_0_s0_burst_adapter:sink0_valid
	wire  [126:0] datamover_0_s0_cmd_width_adapter_src_data;                    // DataMover_0_s0_cmd_width_adapter:out_data -> DataMover_0_s0_burst_adapter:sink0_data
	wire          datamover_0_s0_cmd_width_adapter_src_ready;                   // DataMover_0_s0_burst_adapter:sink0_ready -> DataMover_0_s0_cmd_width_adapter:out_ready
	wire    [3:0] datamover_0_s0_cmd_width_adapter_src_channel;                 // DataMover_0_s0_cmd_width_adapter:out_channel -> DataMover_0_s0_burst_adapter:sink0_channel
	wire          datamover_0_s0_cmd_width_adapter_src_startofpacket;           // DataMover_0_s0_cmd_width_adapter:out_startofpacket -> DataMover_0_s0_burst_adapter:sink0_startofpacket
	wire          datamover_0_s0_cmd_width_adapter_src_endofpacket;             // DataMover_0_s0_cmd_width_adapter:out_endofpacket -> DataMover_0_s0_burst_adapter:sink0_endofpacket
	wire          cmd_mux_002_src_valid;                                        // cmd_mux_002:src_valid -> Encoder_0_s0_cmd_width_adapter:in_valid
	wire  [234:0] cmd_mux_002_src_data;                                         // cmd_mux_002:src_data -> Encoder_0_s0_cmd_width_adapter:in_data
	wire          cmd_mux_002_src_ready;                                        // Encoder_0_s0_cmd_width_adapter:in_ready -> cmd_mux_002:src_ready
	wire    [3:0] cmd_mux_002_src_channel;                                      // cmd_mux_002:src_channel -> Encoder_0_s0_cmd_width_adapter:in_channel
	wire          cmd_mux_002_src_startofpacket;                                // cmd_mux_002:src_startofpacket -> Encoder_0_s0_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                  // cmd_mux_002:src_endofpacket -> Encoder_0_s0_cmd_width_adapter:in_endofpacket
	wire          encoder_0_s0_cmd_width_adapter_src_valid;                     // Encoder_0_s0_cmd_width_adapter:out_valid -> Encoder_0_s0_burst_adapter:sink0_valid
	wire  [126:0] encoder_0_s0_cmd_width_adapter_src_data;                      // Encoder_0_s0_cmd_width_adapter:out_data -> Encoder_0_s0_burst_adapter:sink0_data
	wire          encoder_0_s0_cmd_width_adapter_src_ready;                     // Encoder_0_s0_burst_adapter:sink0_ready -> Encoder_0_s0_cmd_width_adapter:out_ready
	wire    [3:0] encoder_0_s0_cmd_width_adapter_src_channel;                   // Encoder_0_s0_cmd_width_adapter:out_channel -> Encoder_0_s0_burst_adapter:sink0_channel
	wire          encoder_0_s0_cmd_width_adapter_src_startofpacket;             // Encoder_0_s0_cmd_width_adapter:out_startofpacket -> Encoder_0_s0_burst_adapter:sink0_startofpacket
	wire          encoder_0_s0_cmd_width_adapter_src_endofpacket;               // Encoder_0_s0_cmd_width_adapter:out_endofpacket -> Encoder_0_s0_burst_adapter:sink0_endofpacket
	wire          cmd_mux_003_src_valid;                                        // cmd_mux_003:src_valid -> Decoder_0_s0_cmd_width_adapter:in_valid
	wire  [234:0] cmd_mux_003_src_data;                                         // cmd_mux_003:src_data -> Decoder_0_s0_cmd_width_adapter:in_data
	wire          cmd_mux_003_src_ready;                                        // Decoder_0_s0_cmd_width_adapter:in_ready -> cmd_mux_003:src_ready
	wire    [3:0] cmd_mux_003_src_channel;                                      // cmd_mux_003:src_channel -> Decoder_0_s0_cmd_width_adapter:in_channel
	wire          cmd_mux_003_src_startofpacket;                                // cmd_mux_003:src_startofpacket -> Decoder_0_s0_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                  // cmd_mux_003:src_endofpacket -> Decoder_0_s0_cmd_width_adapter:in_endofpacket
	wire          decoder_0_s0_cmd_width_adapter_src_valid;                     // Decoder_0_s0_cmd_width_adapter:out_valid -> Decoder_0_s0_burst_adapter:sink0_valid
	wire  [126:0] decoder_0_s0_cmd_width_adapter_src_data;                      // Decoder_0_s0_cmd_width_adapter:out_data -> Decoder_0_s0_burst_adapter:sink0_data
	wire          decoder_0_s0_cmd_width_adapter_src_ready;                     // Decoder_0_s0_burst_adapter:sink0_ready -> Decoder_0_s0_cmd_width_adapter:out_ready
	wire    [3:0] decoder_0_s0_cmd_width_adapter_src_channel;                   // Decoder_0_s0_cmd_width_adapter:out_channel -> Decoder_0_s0_burst_adapter:sink0_channel
	wire          decoder_0_s0_cmd_width_adapter_src_startofpacket;             // Decoder_0_s0_cmd_width_adapter:out_startofpacket -> Decoder_0_s0_burst_adapter:sink0_startofpacket
	wire          decoder_0_s0_cmd_width_adapter_src_endofpacket;               // Decoder_0_s0_cmd_width_adapter:out_endofpacket -> Decoder_0_s0_burst_adapter:sink0_endofpacket
	wire    [0:0] hps_0_h2f_axi_master_wr_limiter_cmd_src_valid;                // hps_0_h2f_axi_master_wr_limiter:cmd_src_valid -> limiter_pipeline:in_valid
	wire  [234:0] hps_0_h2f_axi_master_wr_limiter_cmd_src_data;                 // hps_0_h2f_axi_master_wr_limiter:cmd_src_data -> limiter_pipeline:in_data
	wire          hps_0_h2f_axi_master_wr_limiter_cmd_src_ready;                // limiter_pipeline:in_ready -> hps_0_h2f_axi_master_wr_limiter:cmd_src_ready
	wire    [3:0] hps_0_h2f_axi_master_wr_limiter_cmd_src_channel;              // hps_0_h2f_axi_master_wr_limiter:cmd_src_channel -> limiter_pipeline:in_channel
	wire          hps_0_h2f_axi_master_wr_limiter_cmd_src_startofpacket;        // hps_0_h2f_axi_master_wr_limiter:cmd_src_startofpacket -> limiter_pipeline:in_startofpacket
	wire          hps_0_h2f_axi_master_wr_limiter_cmd_src_endofpacket;          // hps_0_h2f_axi_master_wr_limiter:cmd_src_endofpacket -> limiter_pipeline:in_endofpacket
	wire          limiter_pipeline_source0_valid;                               // limiter_pipeline:out_valid -> cmd_demux:sink_valid
	wire  [234:0] limiter_pipeline_source0_data;                                // limiter_pipeline:out_data -> cmd_demux:sink_data
	wire          limiter_pipeline_source0_ready;                               // cmd_demux:sink_ready -> limiter_pipeline:out_ready
	wire    [3:0] limiter_pipeline_source0_channel;                             // limiter_pipeline:out_channel -> cmd_demux:sink_channel
	wire          limiter_pipeline_source0_startofpacket;                       // limiter_pipeline:out_startofpacket -> cmd_demux:sink_startofpacket
	wire          limiter_pipeline_source0_endofpacket;                         // limiter_pipeline:out_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                            // rsp_mux:src_valid -> limiter_pipeline_001:in_valid
	wire  [234:0] rsp_mux_src_data;                                             // rsp_mux:src_data -> limiter_pipeline_001:in_data
	wire          rsp_mux_src_ready;                                            // limiter_pipeline_001:in_ready -> rsp_mux:src_ready
	wire    [3:0] rsp_mux_src_channel;                                          // rsp_mux:src_channel -> limiter_pipeline_001:in_channel
	wire          rsp_mux_src_startofpacket;                                    // rsp_mux:src_startofpacket -> limiter_pipeline_001:in_startofpacket
	wire          rsp_mux_src_endofpacket;                                      // rsp_mux:src_endofpacket -> limiter_pipeline_001:in_endofpacket
	wire          limiter_pipeline_001_source0_valid;                           // limiter_pipeline_001:out_valid -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_valid
	wire  [234:0] limiter_pipeline_001_source0_data;                            // limiter_pipeline_001:out_data -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_data
	wire          limiter_pipeline_001_source0_ready;                           // hps_0_h2f_axi_master_wr_limiter:rsp_sink_ready -> limiter_pipeline_001:out_ready
	wire    [3:0] limiter_pipeline_001_source0_channel;                         // limiter_pipeline_001:out_channel -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_channel
	wire          limiter_pipeline_001_source0_startofpacket;                   // limiter_pipeline_001:out_startofpacket -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          limiter_pipeline_001_source0_endofpacket;                     // limiter_pipeline_001:out_endofpacket -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_endofpacket
	wire    [0:0] hps_0_h2f_axi_master_rd_limiter_cmd_src_valid;                // hps_0_h2f_axi_master_rd_limiter:cmd_src_valid -> limiter_pipeline_002:in_valid
	wire  [234:0] hps_0_h2f_axi_master_rd_limiter_cmd_src_data;                 // hps_0_h2f_axi_master_rd_limiter:cmd_src_data -> limiter_pipeline_002:in_data
	wire          hps_0_h2f_axi_master_rd_limiter_cmd_src_ready;                // limiter_pipeline_002:in_ready -> hps_0_h2f_axi_master_rd_limiter:cmd_src_ready
	wire    [3:0] hps_0_h2f_axi_master_rd_limiter_cmd_src_channel;              // hps_0_h2f_axi_master_rd_limiter:cmd_src_channel -> limiter_pipeline_002:in_channel
	wire          hps_0_h2f_axi_master_rd_limiter_cmd_src_startofpacket;        // hps_0_h2f_axi_master_rd_limiter:cmd_src_startofpacket -> limiter_pipeline_002:in_startofpacket
	wire          hps_0_h2f_axi_master_rd_limiter_cmd_src_endofpacket;          // hps_0_h2f_axi_master_rd_limiter:cmd_src_endofpacket -> limiter_pipeline_002:in_endofpacket
	wire          limiter_pipeline_002_source0_valid;                           // limiter_pipeline_002:out_valid -> cmd_demux_001:sink_valid
	wire  [234:0] limiter_pipeline_002_source0_data;                            // limiter_pipeline_002:out_data -> cmd_demux_001:sink_data
	wire          limiter_pipeline_002_source0_ready;                           // cmd_demux_001:sink_ready -> limiter_pipeline_002:out_ready
	wire    [3:0] limiter_pipeline_002_source0_channel;                         // limiter_pipeline_002:out_channel -> cmd_demux_001:sink_channel
	wire          limiter_pipeline_002_source0_startofpacket;                   // limiter_pipeline_002:out_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          limiter_pipeline_002_source0_endofpacket;                     // limiter_pipeline_002:out_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                        // rsp_mux_001:src_valid -> limiter_pipeline_003:in_valid
	wire  [234:0] rsp_mux_001_src_data;                                         // rsp_mux_001:src_data -> limiter_pipeline_003:in_data
	wire          rsp_mux_001_src_ready;                                        // limiter_pipeline_003:in_ready -> rsp_mux_001:src_ready
	wire    [3:0] rsp_mux_001_src_channel;                                      // rsp_mux_001:src_channel -> limiter_pipeline_003:in_channel
	wire          rsp_mux_001_src_startofpacket;                                // rsp_mux_001:src_startofpacket -> limiter_pipeline_003:in_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                  // rsp_mux_001:src_endofpacket -> limiter_pipeline_003:in_endofpacket
	wire          limiter_pipeline_003_source0_valid;                           // limiter_pipeline_003:out_valid -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_valid
	wire  [234:0] limiter_pipeline_003_source0_data;                            // limiter_pipeline_003:out_data -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_data
	wire          limiter_pipeline_003_source0_ready;                           // hps_0_h2f_axi_master_rd_limiter:rsp_sink_ready -> limiter_pipeline_003:out_ready
	wire    [3:0] limiter_pipeline_003_source0_channel;                         // limiter_pipeline_003:out_channel -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_channel
	wire          limiter_pipeline_003_source0_startofpacket;                   // limiter_pipeline_003:out_startofpacket -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          limiter_pipeline_003_source0_endofpacket;                     // limiter_pipeline_003:out_endofpacket -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          sysid_qsys_control_slave_burst_adapter_source0_valid;         // sysid_qsys_control_slave_burst_adapter:source0_valid -> agent_pipeline:in_valid
	wire  [126:0] sysid_qsys_control_slave_burst_adapter_source0_data;          // sysid_qsys_control_slave_burst_adapter:source0_data -> agent_pipeline:in_data
	wire          sysid_qsys_control_slave_burst_adapter_source0_ready;         // agent_pipeline:in_ready -> sysid_qsys_control_slave_burst_adapter:source0_ready
	wire    [3:0] sysid_qsys_control_slave_burst_adapter_source0_channel;       // sysid_qsys_control_slave_burst_adapter:source0_channel -> agent_pipeline:in_channel
	wire          sysid_qsys_control_slave_burst_adapter_source0_startofpacket; // sysid_qsys_control_slave_burst_adapter:source0_startofpacket -> agent_pipeline:in_startofpacket
	wire          sysid_qsys_control_slave_burst_adapter_source0_endofpacket;   // sysid_qsys_control_slave_burst_adapter:source0_endofpacket -> agent_pipeline:in_endofpacket
	wire          agent_pipeline_source0_valid;                                 // agent_pipeline:out_valid -> sysid_qsys_control_slave_agent:cp_valid
	wire  [126:0] agent_pipeline_source0_data;                                  // agent_pipeline:out_data -> sysid_qsys_control_slave_agent:cp_data
	wire          agent_pipeline_source0_ready;                                 // sysid_qsys_control_slave_agent:cp_ready -> agent_pipeline:out_ready
	wire    [3:0] agent_pipeline_source0_channel;                               // agent_pipeline:out_channel -> sysid_qsys_control_slave_agent:cp_channel
	wire          agent_pipeline_source0_startofpacket;                         // agent_pipeline:out_startofpacket -> sysid_qsys_control_slave_agent:cp_startofpacket
	wire          agent_pipeline_source0_endofpacket;                           // agent_pipeline:out_endofpacket -> sysid_qsys_control_slave_agent:cp_endofpacket
	wire          sysid_qsys_control_slave_agent_rp_valid;                      // sysid_qsys_control_slave_agent:rp_valid -> agent_pipeline_001:in_valid
	wire  [126:0] sysid_qsys_control_slave_agent_rp_data;                       // sysid_qsys_control_slave_agent:rp_data -> agent_pipeline_001:in_data
	wire          sysid_qsys_control_slave_agent_rp_ready;                      // agent_pipeline_001:in_ready -> sysid_qsys_control_slave_agent:rp_ready
	wire          sysid_qsys_control_slave_agent_rp_startofpacket;              // sysid_qsys_control_slave_agent:rp_startofpacket -> agent_pipeline_001:in_startofpacket
	wire          sysid_qsys_control_slave_agent_rp_endofpacket;                // sysid_qsys_control_slave_agent:rp_endofpacket -> agent_pipeline_001:in_endofpacket
	wire          agent_pipeline_001_source0_valid;                             // agent_pipeline_001:out_valid -> router_002:sink_valid
	wire  [126:0] agent_pipeline_001_source0_data;                              // agent_pipeline_001:out_data -> router_002:sink_data
	wire          agent_pipeline_001_source0_ready;                             // router_002:sink_ready -> agent_pipeline_001:out_ready
	wire          agent_pipeline_001_source0_startofpacket;                     // agent_pipeline_001:out_startofpacket -> router_002:sink_startofpacket
	wire          agent_pipeline_001_source0_endofpacket;                       // agent_pipeline_001:out_endofpacket -> router_002:sink_endofpacket
	wire          datamover_0_s0_burst_adapter_source0_valid;                   // DataMover_0_s0_burst_adapter:source0_valid -> agent_pipeline_002:in_valid
	wire  [126:0] datamover_0_s0_burst_adapter_source0_data;                    // DataMover_0_s0_burst_adapter:source0_data -> agent_pipeline_002:in_data
	wire          datamover_0_s0_burst_adapter_source0_ready;                   // agent_pipeline_002:in_ready -> DataMover_0_s0_burst_adapter:source0_ready
	wire    [3:0] datamover_0_s0_burst_adapter_source0_channel;                 // DataMover_0_s0_burst_adapter:source0_channel -> agent_pipeline_002:in_channel
	wire          datamover_0_s0_burst_adapter_source0_startofpacket;           // DataMover_0_s0_burst_adapter:source0_startofpacket -> agent_pipeline_002:in_startofpacket
	wire          datamover_0_s0_burst_adapter_source0_endofpacket;             // DataMover_0_s0_burst_adapter:source0_endofpacket -> agent_pipeline_002:in_endofpacket
	wire          agent_pipeline_002_source0_valid;                             // agent_pipeline_002:out_valid -> DataMover_0_s0_agent:cp_valid
	wire  [126:0] agent_pipeline_002_source0_data;                              // agent_pipeline_002:out_data -> DataMover_0_s0_agent:cp_data
	wire          agent_pipeline_002_source0_ready;                             // DataMover_0_s0_agent:cp_ready -> agent_pipeline_002:out_ready
	wire    [3:0] agent_pipeline_002_source0_channel;                           // agent_pipeline_002:out_channel -> DataMover_0_s0_agent:cp_channel
	wire          agent_pipeline_002_source0_startofpacket;                     // agent_pipeline_002:out_startofpacket -> DataMover_0_s0_agent:cp_startofpacket
	wire          agent_pipeline_002_source0_endofpacket;                       // agent_pipeline_002:out_endofpacket -> DataMover_0_s0_agent:cp_endofpacket
	wire          datamover_0_s0_agent_rp_valid;                                // DataMover_0_s0_agent:rp_valid -> agent_pipeline_003:in_valid
	wire  [126:0] datamover_0_s0_agent_rp_data;                                 // DataMover_0_s0_agent:rp_data -> agent_pipeline_003:in_data
	wire          datamover_0_s0_agent_rp_ready;                                // agent_pipeline_003:in_ready -> DataMover_0_s0_agent:rp_ready
	wire          datamover_0_s0_agent_rp_startofpacket;                        // DataMover_0_s0_agent:rp_startofpacket -> agent_pipeline_003:in_startofpacket
	wire          datamover_0_s0_agent_rp_endofpacket;                          // DataMover_0_s0_agent:rp_endofpacket -> agent_pipeline_003:in_endofpacket
	wire          agent_pipeline_003_source0_valid;                             // agent_pipeline_003:out_valid -> router_003:sink_valid
	wire  [126:0] agent_pipeline_003_source0_data;                              // agent_pipeline_003:out_data -> router_003:sink_data
	wire          agent_pipeline_003_source0_ready;                             // router_003:sink_ready -> agent_pipeline_003:out_ready
	wire          agent_pipeline_003_source0_startofpacket;                     // agent_pipeline_003:out_startofpacket -> router_003:sink_startofpacket
	wire          agent_pipeline_003_source0_endofpacket;                       // agent_pipeline_003:out_endofpacket -> router_003:sink_endofpacket
	wire          encoder_0_s0_burst_adapter_source0_valid;                     // Encoder_0_s0_burst_adapter:source0_valid -> agent_pipeline_004:in_valid
	wire  [126:0] encoder_0_s0_burst_adapter_source0_data;                      // Encoder_0_s0_burst_adapter:source0_data -> agent_pipeline_004:in_data
	wire          encoder_0_s0_burst_adapter_source0_ready;                     // agent_pipeline_004:in_ready -> Encoder_0_s0_burst_adapter:source0_ready
	wire    [3:0] encoder_0_s0_burst_adapter_source0_channel;                   // Encoder_0_s0_burst_adapter:source0_channel -> agent_pipeline_004:in_channel
	wire          encoder_0_s0_burst_adapter_source0_startofpacket;             // Encoder_0_s0_burst_adapter:source0_startofpacket -> agent_pipeline_004:in_startofpacket
	wire          encoder_0_s0_burst_adapter_source0_endofpacket;               // Encoder_0_s0_burst_adapter:source0_endofpacket -> agent_pipeline_004:in_endofpacket
	wire          agent_pipeline_004_source0_valid;                             // agent_pipeline_004:out_valid -> Encoder_0_s0_agent:cp_valid
	wire  [126:0] agent_pipeline_004_source0_data;                              // agent_pipeline_004:out_data -> Encoder_0_s0_agent:cp_data
	wire          agent_pipeline_004_source0_ready;                             // Encoder_0_s0_agent:cp_ready -> agent_pipeline_004:out_ready
	wire    [3:0] agent_pipeline_004_source0_channel;                           // agent_pipeline_004:out_channel -> Encoder_0_s0_agent:cp_channel
	wire          agent_pipeline_004_source0_startofpacket;                     // agent_pipeline_004:out_startofpacket -> Encoder_0_s0_agent:cp_startofpacket
	wire          agent_pipeline_004_source0_endofpacket;                       // agent_pipeline_004:out_endofpacket -> Encoder_0_s0_agent:cp_endofpacket
	wire          encoder_0_s0_agent_rp_valid;                                  // Encoder_0_s0_agent:rp_valid -> agent_pipeline_005:in_valid
	wire  [126:0] encoder_0_s0_agent_rp_data;                                   // Encoder_0_s0_agent:rp_data -> agent_pipeline_005:in_data
	wire          encoder_0_s0_agent_rp_ready;                                  // agent_pipeline_005:in_ready -> Encoder_0_s0_agent:rp_ready
	wire          encoder_0_s0_agent_rp_startofpacket;                          // Encoder_0_s0_agent:rp_startofpacket -> agent_pipeline_005:in_startofpacket
	wire          encoder_0_s0_agent_rp_endofpacket;                            // Encoder_0_s0_agent:rp_endofpacket -> agent_pipeline_005:in_endofpacket
	wire          agent_pipeline_005_source0_valid;                             // agent_pipeline_005:out_valid -> router_004:sink_valid
	wire  [126:0] agent_pipeline_005_source0_data;                              // agent_pipeline_005:out_data -> router_004:sink_data
	wire          agent_pipeline_005_source0_ready;                             // router_004:sink_ready -> agent_pipeline_005:out_ready
	wire          agent_pipeline_005_source0_startofpacket;                     // agent_pipeline_005:out_startofpacket -> router_004:sink_startofpacket
	wire          agent_pipeline_005_source0_endofpacket;                       // agent_pipeline_005:out_endofpacket -> router_004:sink_endofpacket
	wire          decoder_0_s0_burst_adapter_source0_valid;                     // Decoder_0_s0_burst_adapter:source0_valid -> agent_pipeline_006:in_valid
	wire  [126:0] decoder_0_s0_burst_adapter_source0_data;                      // Decoder_0_s0_burst_adapter:source0_data -> agent_pipeline_006:in_data
	wire          decoder_0_s0_burst_adapter_source0_ready;                     // agent_pipeline_006:in_ready -> Decoder_0_s0_burst_adapter:source0_ready
	wire    [3:0] decoder_0_s0_burst_adapter_source0_channel;                   // Decoder_0_s0_burst_adapter:source0_channel -> agent_pipeline_006:in_channel
	wire          decoder_0_s0_burst_adapter_source0_startofpacket;             // Decoder_0_s0_burst_adapter:source0_startofpacket -> agent_pipeline_006:in_startofpacket
	wire          decoder_0_s0_burst_adapter_source0_endofpacket;               // Decoder_0_s0_burst_adapter:source0_endofpacket -> agent_pipeline_006:in_endofpacket
	wire          agent_pipeline_006_source0_valid;                             // agent_pipeline_006:out_valid -> Decoder_0_s0_agent:cp_valid
	wire  [126:0] agent_pipeline_006_source0_data;                              // agent_pipeline_006:out_data -> Decoder_0_s0_agent:cp_data
	wire          agent_pipeline_006_source0_ready;                             // Decoder_0_s0_agent:cp_ready -> agent_pipeline_006:out_ready
	wire    [3:0] agent_pipeline_006_source0_channel;                           // agent_pipeline_006:out_channel -> Decoder_0_s0_agent:cp_channel
	wire          agent_pipeline_006_source0_startofpacket;                     // agent_pipeline_006:out_startofpacket -> Decoder_0_s0_agent:cp_startofpacket
	wire          agent_pipeline_006_source0_endofpacket;                       // agent_pipeline_006:out_endofpacket -> Decoder_0_s0_agent:cp_endofpacket
	wire          decoder_0_s0_agent_rp_valid;                                  // Decoder_0_s0_agent:rp_valid -> agent_pipeline_007:in_valid
	wire  [126:0] decoder_0_s0_agent_rp_data;                                   // Decoder_0_s0_agent:rp_data -> agent_pipeline_007:in_data
	wire          decoder_0_s0_agent_rp_ready;                                  // agent_pipeline_007:in_ready -> Decoder_0_s0_agent:rp_ready
	wire          decoder_0_s0_agent_rp_startofpacket;                          // Decoder_0_s0_agent:rp_startofpacket -> agent_pipeline_007:in_startofpacket
	wire          decoder_0_s0_agent_rp_endofpacket;                            // Decoder_0_s0_agent:rp_endofpacket -> agent_pipeline_007:in_endofpacket
	wire          agent_pipeline_007_source0_valid;                             // agent_pipeline_007:out_valid -> router_005:sink_valid
	wire  [126:0] agent_pipeline_007_source0_data;                              // agent_pipeline_007:out_data -> router_005:sink_data
	wire          agent_pipeline_007_source0_ready;                             // router_005:sink_ready -> agent_pipeline_007:out_ready
	wire          agent_pipeline_007_source0_startofpacket;                     // agent_pipeline_007:out_startofpacket -> router_005:sink_startofpacket
	wire          agent_pipeline_007_source0_endofpacket;                       // agent_pipeline_007:out_endofpacket -> router_005:sink_endofpacket
	wire          cmd_demux_src0_valid;                                         // cmd_demux:src0_valid -> mux_pipeline:in_valid
	wire  [234:0] cmd_demux_src0_data;                                          // cmd_demux:src0_data -> mux_pipeline:in_data
	wire          cmd_demux_src0_ready;                                         // mux_pipeline:in_ready -> cmd_demux:src0_ready
	wire    [3:0] cmd_demux_src0_channel;                                       // cmd_demux:src0_channel -> mux_pipeline:in_channel
	wire          cmd_demux_src0_startofpacket;                                 // cmd_demux:src0_startofpacket -> mux_pipeline:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                   // cmd_demux:src0_endofpacket -> mux_pipeline:in_endofpacket
	wire          mux_pipeline_source0_valid;                                   // mux_pipeline:out_valid -> cmd_mux:sink0_valid
	wire  [234:0] mux_pipeline_source0_data;                                    // mux_pipeline:out_data -> cmd_mux:sink0_data
	wire          mux_pipeline_source0_ready;                                   // cmd_mux:sink0_ready -> mux_pipeline:out_ready
	wire    [3:0] mux_pipeline_source0_channel;                                 // mux_pipeline:out_channel -> cmd_mux:sink0_channel
	wire          mux_pipeline_source0_startofpacket;                           // mux_pipeline:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          mux_pipeline_source0_endofpacket;                             // mux_pipeline:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                     // cmd_demux_001:src0_valid -> mux_pipeline_001:in_valid
	wire  [234:0] cmd_demux_001_src0_data;                                      // cmd_demux_001:src0_data -> mux_pipeline_001:in_data
	wire          cmd_demux_001_src0_ready;                                     // mux_pipeline_001:in_ready -> cmd_demux_001:src0_ready
	wire    [3:0] cmd_demux_001_src0_channel;                                   // cmd_demux_001:src0_channel -> mux_pipeline_001:in_channel
	wire          cmd_demux_001_src0_startofpacket;                             // cmd_demux_001:src0_startofpacket -> mux_pipeline_001:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                               // cmd_demux_001:src0_endofpacket -> mux_pipeline_001:in_endofpacket
	wire          mux_pipeline_001_source0_valid;                               // mux_pipeline_001:out_valid -> cmd_mux:sink1_valid
	wire  [234:0] mux_pipeline_001_source0_data;                                // mux_pipeline_001:out_data -> cmd_mux:sink1_data
	wire          mux_pipeline_001_source0_ready;                               // cmd_mux:sink1_ready -> mux_pipeline_001:out_ready
	wire    [3:0] mux_pipeline_001_source0_channel;                             // mux_pipeline_001:out_channel -> cmd_mux:sink1_channel
	wire          mux_pipeline_001_source0_startofpacket;                       // mux_pipeline_001:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire          mux_pipeline_001_source0_endofpacket;                         // mux_pipeline_001:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_src1_valid;                                         // cmd_demux:src1_valid -> mux_pipeline_002:in_valid
	wire  [234:0] cmd_demux_src1_data;                                          // cmd_demux:src1_data -> mux_pipeline_002:in_data
	wire          cmd_demux_src1_ready;                                         // mux_pipeline_002:in_ready -> cmd_demux:src1_ready
	wire    [3:0] cmd_demux_src1_channel;                                       // cmd_demux:src1_channel -> mux_pipeline_002:in_channel
	wire          cmd_demux_src1_startofpacket;                                 // cmd_demux:src1_startofpacket -> mux_pipeline_002:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                   // cmd_demux:src1_endofpacket -> mux_pipeline_002:in_endofpacket
	wire          mux_pipeline_002_source0_valid;                               // mux_pipeline_002:out_valid -> cmd_mux_001:sink0_valid
	wire  [234:0] mux_pipeline_002_source0_data;                                // mux_pipeline_002:out_data -> cmd_mux_001:sink0_data
	wire          mux_pipeline_002_source0_ready;                               // cmd_mux_001:sink0_ready -> mux_pipeline_002:out_ready
	wire    [3:0] mux_pipeline_002_source0_channel;                             // mux_pipeline_002:out_channel -> cmd_mux_001:sink0_channel
	wire          mux_pipeline_002_source0_startofpacket;                       // mux_pipeline_002:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          mux_pipeline_002_source0_endofpacket;                         // mux_pipeline_002:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_001_src1_valid;                                     // cmd_demux_001:src1_valid -> mux_pipeline_003:in_valid
	wire  [234:0] cmd_demux_001_src1_data;                                      // cmd_demux_001:src1_data -> mux_pipeline_003:in_data
	wire          cmd_demux_001_src1_ready;                                     // mux_pipeline_003:in_ready -> cmd_demux_001:src1_ready
	wire    [3:0] cmd_demux_001_src1_channel;                                   // cmd_demux_001:src1_channel -> mux_pipeline_003:in_channel
	wire          cmd_demux_001_src1_startofpacket;                             // cmd_demux_001:src1_startofpacket -> mux_pipeline_003:in_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                               // cmd_demux_001:src1_endofpacket -> mux_pipeline_003:in_endofpacket
	wire          mux_pipeline_003_source0_valid;                               // mux_pipeline_003:out_valid -> cmd_mux_001:sink1_valid
	wire  [234:0] mux_pipeline_003_source0_data;                                // mux_pipeline_003:out_data -> cmd_mux_001:sink1_data
	wire          mux_pipeline_003_source0_ready;                               // cmd_mux_001:sink1_ready -> mux_pipeline_003:out_ready
	wire    [3:0] mux_pipeline_003_source0_channel;                             // mux_pipeline_003:out_channel -> cmd_mux_001:sink1_channel
	wire          mux_pipeline_003_source0_startofpacket;                       // mux_pipeline_003:out_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          mux_pipeline_003_source0_endofpacket;                         // mux_pipeline_003:out_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_src2_valid;                                         // cmd_demux:src2_valid -> mux_pipeline_004:in_valid
	wire  [234:0] cmd_demux_src2_data;                                          // cmd_demux:src2_data -> mux_pipeline_004:in_data
	wire          cmd_demux_src2_ready;                                         // mux_pipeline_004:in_ready -> cmd_demux:src2_ready
	wire    [3:0] cmd_demux_src2_channel;                                       // cmd_demux:src2_channel -> mux_pipeline_004:in_channel
	wire          cmd_demux_src2_startofpacket;                                 // cmd_demux:src2_startofpacket -> mux_pipeline_004:in_startofpacket
	wire          cmd_demux_src2_endofpacket;                                   // cmd_demux:src2_endofpacket -> mux_pipeline_004:in_endofpacket
	wire          mux_pipeline_004_source0_valid;                               // mux_pipeline_004:out_valid -> cmd_mux_002:sink0_valid
	wire  [234:0] mux_pipeline_004_source0_data;                                // mux_pipeline_004:out_data -> cmd_mux_002:sink0_data
	wire          mux_pipeline_004_source0_ready;                               // cmd_mux_002:sink0_ready -> mux_pipeline_004:out_ready
	wire    [3:0] mux_pipeline_004_source0_channel;                             // mux_pipeline_004:out_channel -> cmd_mux_002:sink0_channel
	wire          mux_pipeline_004_source0_startofpacket;                       // mux_pipeline_004:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          mux_pipeline_004_source0_endofpacket;                         // mux_pipeline_004:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_001_src2_valid;                                     // cmd_demux_001:src2_valid -> mux_pipeline_005:in_valid
	wire  [234:0] cmd_demux_001_src2_data;                                      // cmd_demux_001:src2_data -> mux_pipeline_005:in_data
	wire          cmd_demux_001_src2_ready;                                     // mux_pipeline_005:in_ready -> cmd_demux_001:src2_ready
	wire    [3:0] cmd_demux_001_src2_channel;                                   // cmd_demux_001:src2_channel -> mux_pipeline_005:in_channel
	wire          cmd_demux_001_src2_startofpacket;                             // cmd_demux_001:src2_startofpacket -> mux_pipeline_005:in_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                               // cmd_demux_001:src2_endofpacket -> mux_pipeline_005:in_endofpacket
	wire          mux_pipeline_005_source0_valid;                               // mux_pipeline_005:out_valid -> cmd_mux_002:sink1_valid
	wire  [234:0] mux_pipeline_005_source0_data;                                // mux_pipeline_005:out_data -> cmd_mux_002:sink1_data
	wire          mux_pipeline_005_source0_ready;                               // cmd_mux_002:sink1_ready -> mux_pipeline_005:out_ready
	wire    [3:0] mux_pipeline_005_source0_channel;                             // mux_pipeline_005:out_channel -> cmd_mux_002:sink1_channel
	wire          mux_pipeline_005_source0_startofpacket;                       // mux_pipeline_005:out_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          mux_pipeline_005_source0_endofpacket;                         // mux_pipeline_005:out_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_src3_valid;                                         // cmd_demux:src3_valid -> mux_pipeline_006:in_valid
	wire  [234:0] cmd_demux_src3_data;                                          // cmd_demux:src3_data -> mux_pipeline_006:in_data
	wire          cmd_demux_src3_ready;                                         // mux_pipeline_006:in_ready -> cmd_demux:src3_ready
	wire    [3:0] cmd_demux_src3_channel;                                       // cmd_demux:src3_channel -> mux_pipeline_006:in_channel
	wire          cmd_demux_src3_startofpacket;                                 // cmd_demux:src3_startofpacket -> mux_pipeline_006:in_startofpacket
	wire          cmd_demux_src3_endofpacket;                                   // cmd_demux:src3_endofpacket -> mux_pipeline_006:in_endofpacket
	wire          mux_pipeline_006_source0_valid;                               // mux_pipeline_006:out_valid -> cmd_mux_003:sink0_valid
	wire  [234:0] mux_pipeline_006_source0_data;                                // mux_pipeline_006:out_data -> cmd_mux_003:sink0_data
	wire          mux_pipeline_006_source0_ready;                               // cmd_mux_003:sink0_ready -> mux_pipeline_006:out_ready
	wire    [3:0] mux_pipeline_006_source0_channel;                             // mux_pipeline_006:out_channel -> cmd_mux_003:sink0_channel
	wire          mux_pipeline_006_source0_startofpacket;                       // mux_pipeline_006:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          mux_pipeline_006_source0_endofpacket;                         // mux_pipeline_006:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_001_src3_valid;                                     // cmd_demux_001:src3_valid -> mux_pipeline_007:in_valid
	wire  [234:0] cmd_demux_001_src3_data;                                      // cmd_demux_001:src3_data -> mux_pipeline_007:in_data
	wire          cmd_demux_001_src3_ready;                                     // mux_pipeline_007:in_ready -> cmd_demux_001:src3_ready
	wire    [3:0] cmd_demux_001_src3_channel;                                   // cmd_demux_001:src3_channel -> mux_pipeline_007:in_channel
	wire          cmd_demux_001_src3_startofpacket;                             // cmd_demux_001:src3_startofpacket -> mux_pipeline_007:in_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                               // cmd_demux_001:src3_endofpacket -> mux_pipeline_007:in_endofpacket
	wire          mux_pipeline_007_source0_valid;                               // mux_pipeline_007:out_valid -> cmd_mux_003:sink1_valid
	wire  [234:0] mux_pipeline_007_source0_data;                                // mux_pipeline_007:out_data -> cmd_mux_003:sink1_data
	wire          mux_pipeline_007_source0_ready;                               // cmd_mux_003:sink1_ready -> mux_pipeline_007:out_ready
	wire    [3:0] mux_pipeline_007_source0_channel;                             // mux_pipeline_007:out_channel -> cmd_mux_003:sink1_channel
	wire          mux_pipeline_007_source0_startofpacket;                       // mux_pipeline_007:out_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          mux_pipeline_007_source0_endofpacket;                         // mux_pipeline_007:out_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                         // rsp_demux:src0_valid -> mux_pipeline_008:in_valid
	wire  [234:0] rsp_demux_src0_data;                                          // rsp_demux:src0_data -> mux_pipeline_008:in_data
	wire          rsp_demux_src0_ready;                                         // mux_pipeline_008:in_ready -> rsp_demux:src0_ready
	wire    [3:0] rsp_demux_src0_channel;                                       // rsp_demux:src0_channel -> mux_pipeline_008:in_channel
	wire          rsp_demux_src0_startofpacket;                                 // rsp_demux:src0_startofpacket -> mux_pipeline_008:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                   // rsp_demux:src0_endofpacket -> mux_pipeline_008:in_endofpacket
	wire          mux_pipeline_008_source0_valid;                               // mux_pipeline_008:out_valid -> rsp_mux:sink0_valid
	wire  [234:0] mux_pipeline_008_source0_data;                                // mux_pipeline_008:out_data -> rsp_mux:sink0_data
	wire          mux_pipeline_008_source0_ready;                               // rsp_mux:sink0_ready -> mux_pipeline_008:out_ready
	wire    [3:0] mux_pipeline_008_source0_channel;                             // mux_pipeline_008:out_channel -> rsp_mux:sink0_channel
	wire          mux_pipeline_008_source0_startofpacket;                       // mux_pipeline_008:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          mux_pipeline_008_source0_endofpacket;                         // mux_pipeline_008:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                     // rsp_demux_001:src0_valid -> mux_pipeline_009:in_valid
	wire  [234:0] rsp_demux_001_src0_data;                                      // rsp_demux_001:src0_data -> mux_pipeline_009:in_data
	wire          rsp_demux_001_src0_ready;                                     // mux_pipeline_009:in_ready -> rsp_demux_001:src0_ready
	wire    [3:0] rsp_demux_001_src0_channel;                                   // rsp_demux_001:src0_channel -> mux_pipeline_009:in_channel
	wire          rsp_demux_001_src0_startofpacket;                             // rsp_demux_001:src0_startofpacket -> mux_pipeline_009:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                               // rsp_demux_001:src0_endofpacket -> mux_pipeline_009:in_endofpacket
	wire          mux_pipeline_009_source0_valid;                               // mux_pipeline_009:out_valid -> rsp_mux:sink1_valid
	wire  [234:0] mux_pipeline_009_source0_data;                                // mux_pipeline_009:out_data -> rsp_mux:sink1_data
	wire          mux_pipeline_009_source0_ready;                               // rsp_mux:sink1_ready -> mux_pipeline_009:out_ready
	wire    [3:0] mux_pipeline_009_source0_channel;                             // mux_pipeline_009:out_channel -> rsp_mux:sink1_channel
	wire          mux_pipeline_009_source0_startofpacket;                       // mux_pipeline_009:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          mux_pipeline_009_source0_endofpacket;                         // mux_pipeline_009:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                     // rsp_demux_002:src0_valid -> mux_pipeline_010:in_valid
	wire  [234:0] rsp_demux_002_src0_data;                                      // rsp_demux_002:src0_data -> mux_pipeline_010:in_data
	wire          rsp_demux_002_src0_ready;                                     // mux_pipeline_010:in_ready -> rsp_demux_002:src0_ready
	wire    [3:0] rsp_demux_002_src0_channel;                                   // rsp_demux_002:src0_channel -> mux_pipeline_010:in_channel
	wire          rsp_demux_002_src0_startofpacket;                             // rsp_demux_002:src0_startofpacket -> mux_pipeline_010:in_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                               // rsp_demux_002:src0_endofpacket -> mux_pipeline_010:in_endofpacket
	wire          mux_pipeline_010_source0_valid;                               // mux_pipeline_010:out_valid -> rsp_mux:sink2_valid
	wire  [234:0] mux_pipeline_010_source0_data;                                // mux_pipeline_010:out_data -> rsp_mux:sink2_data
	wire          mux_pipeline_010_source0_ready;                               // rsp_mux:sink2_ready -> mux_pipeline_010:out_ready
	wire    [3:0] mux_pipeline_010_source0_channel;                             // mux_pipeline_010:out_channel -> rsp_mux:sink2_channel
	wire          mux_pipeline_010_source0_startofpacket;                       // mux_pipeline_010:out_startofpacket -> rsp_mux:sink2_startofpacket
	wire          mux_pipeline_010_source0_endofpacket;                         // mux_pipeline_010:out_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                     // rsp_demux_003:src0_valid -> mux_pipeline_011:in_valid
	wire  [234:0] rsp_demux_003_src0_data;                                      // rsp_demux_003:src0_data -> mux_pipeline_011:in_data
	wire          rsp_demux_003_src0_ready;                                     // mux_pipeline_011:in_ready -> rsp_demux_003:src0_ready
	wire    [3:0] rsp_demux_003_src0_channel;                                   // rsp_demux_003:src0_channel -> mux_pipeline_011:in_channel
	wire          rsp_demux_003_src0_startofpacket;                             // rsp_demux_003:src0_startofpacket -> mux_pipeline_011:in_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                               // rsp_demux_003:src0_endofpacket -> mux_pipeline_011:in_endofpacket
	wire          mux_pipeline_011_source0_valid;                               // mux_pipeline_011:out_valid -> rsp_mux:sink3_valid
	wire  [234:0] mux_pipeline_011_source0_data;                                // mux_pipeline_011:out_data -> rsp_mux:sink3_data
	wire          mux_pipeline_011_source0_ready;                               // rsp_mux:sink3_ready -> mux_pipeline_011:out_ready
	wire    [3:0] mux_pipeline_011_source0_channel;                             // mux_pipeline_011:out_channel -> rsp_mux:sink3_channel
	wire          mux_pipeline_011_source0_startofpacket;                       // mux_pipeline_011:out_startofpacket -> rsp_mux:sink3_startofpacket
	wire          mux_pipeline_011_source0_endofpacket;                         // mux_pipeline_011:out_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_src1_valid;                                         // rsp_demux:src1_valid -> mux_pipeline_012:in_valid
	wire  [234:0] rsp_demux_src1_data;                                          // rsp_demux:src1_data -> mux_pipeline_012:in_data
	wire          rsp_demux_src1_ready;                                         // mux_pipeline_012:in_ready -> rsp_demux:src1_ready
	wire    [3:0] rsp_demux_src1_channel;                                       // rsp_demux:src1_channel -> mux_pipeline_012:in_channel
	wire          rsp_demux_src1_startofpacket;                                 // rsp_demux:src1_startofpacket -> mux_pipeline_012:in_startofpacket
	wire          rsp_demux_src1_endofpacket;                                   // rsp_demux:src1_endofpacket -> mux_pipeline_012:in_endofpacket
	wire          mux_pipeline_012_source0_valid;                               // mux_pipeline_012:out_valid -> rsp_mux_001:sink0_valid
	wire  [234:0] mux_pipeline_012_source0_data;                                // mux_pipeline_012:out_data -> rsp_mux_001:sink0_data
	wire          mux_pipeline_012_source0_ready;                               // rsp_mux_001:sink0_ready -> mux_pipeline_012:out_ready
	wire    [3:0] mux_pipeline_012_source0_channel;                             // mux_pipeline_012:out_channel -> rsp_mux_001:sink0_channel
	wire          mux_pipeline_012_source0_startofpacket;                       // mux_pipeline_012:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          mux_pipeline_012_source0_endofpacket;                         // mux_pipeline_012:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src1_valid;                                     // rsp_demux_001:src1_valid -> mux_pipeline_013:in_valid
	wire  [234:0] rsp_demux_001_src1_data;                                      // rsp_demux_001:src1_data -> mux_pipeline_013:in_data
	wire          rsp_demux_001_src1_ready;                                     // mux_pipeline_013:in_ready -> rsp_demux_001:src1_ready
	wire    [3:0] rsp_demux_001_src1_channel;                                   // rsp_demux_001:src1_channel -> mux_pipeline_013:in_channel
	wire          rsp_demux_001_src1_startofpacket;                             // rsp_demux_001:src1_startofpacket -> mux_pipeline_013:in_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                               // rsp_demux_001:src1_endofpacket -> mux_pipeline_013:in_endofpacket
	wire          mux_pipeline_013_source0_valid;                               // mux_pipeline_013:out_valid -> rsp_mux_001:sink1_valid
	wire  [234:0] mux_pipeline_013_source0_data;                                // mux_pipeline_013:out_data -> rsp_mux_001:sink1_data
	wire          mux_pipeline_013_source0_ready;                               // rsp_mux_001:sink1_ready -> mux_pipeline_013:out_ready
	wire    [3:0] mux_pipeline_013_source0_channel;                             // mux_pipeline_013:out_channel -> rsp_mux_001:sink1_channel
	wire          mux_pipeline_013_source0_startofpacket;                       // mux_pipeline_013:out_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          mux_pipeline_013_source0_endofpacket;                         // mux_pipeline_013:out_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src1_valid;                                     // rsp_demux_002:src1_valid -> mux_pipeline_014:in_valid
	wire  [234:0] rsp_demux_002_src1_data;                                      // rsp_demux_002:src1_data -> mux_pipeline_014:in_data
	wire          rsp_demux_002_src1_ready;                                     // mux_pipeline_014:in_ready -> rsp_demux_002:src1_ready
	wire    [3:0] rsp_demux_002_src1_channel;                                   // rsp_demux_002:src1_channel -> mux_pipeline_014:in_channel
	wire          rsp_demux_002_src1_startofpacket;                             // rsp_demux_002:src1_startofpacket -> mux_pipeline_014:in_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                               // rsp_demux_002:src1_endofpacket -> mux_pipeline_014:in_endofpacket
	wire          mux_pipeline_014_source0_valid;                               // mux_pipeline_014:out_valid -> rsp_mux_001:sink2_valid
	wire  [234:0] mux_pipeline_014_source0_data;                                // mux_pipeline_014:out_data -> rsp_mux_001:sink2_data
	wire          mux_pipeline_014_source0_ready;                               // rsp_mux_001:sink2_ready -> mux_pipeline_014:out_ready
	wire    [3:0] mux_pipeline_014_source0_channel;                             // mux_pipeline_014:out_channel -> rsp_mux_001:sink2_channel
	wire          mux_pipeline_014_source0_startofpacket;                       // mux_pipeline_014:out_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          mux_pipeline_014_source0_endofpacket;                         // mux_pipeline_014:out_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_003_src1_valid;                                     // rsp_demux_003:src1_valid -> mux_pipeline_015:in_valid
	wire  [234:0] rsp_demux_003_src1_data;                                      // rsp_demux_003:src1_data -> mux_pipeline_015:in_data
	wire          rsp_demux_003_src1_ready;                                     // mux_pipeline_015:in_ready -> rsp_demux_003:src1_ready
	wire    [3:0] rsp_demux_003_src1_channel;                                   // rsp_demux_003:src1_channel -> mux_pipeline_015:in_channel
	wire          rsp_demux_003_src1_startofpacket;                             // rsp_demux_003:src1_startofpacket -> mux_pipeline_015:in_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                               // rsp_demux_003:src1_endofpacket -> mux_pipeline_015:in_endofpacket
	wire          mux_pipeline_015_source0_valid;                               // mux_pipeline_015:out_valid -> rsp_mux_001:sink3_valid
	wire  [234:0] mux_pipeline_015_source0_data;                                // mux_pipeline_015:out_data -> rsp_mux_001:sink3_data
	wire          mux_pipeline_015_source0_ready;                               // rsp_mux_001:sink3_ready -> mux_pipeline_015:out_ready
	wire    [3:0] mux_pipeline_015_source0_channel;                             // mux_pipeline_015:out_channel -> rsp_mux_001:sink3_channel
	wire          mux_pipeline_015_source0_startofpacket;                       // mux_pipeline_015:out_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          mux_pipeline_015_source0_endofpacket;                         // mux_pipeline_015:out_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          sysid_qsys_control_slave_agent_rdata_fifo_out_valid;          // sysid_qsys_control_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] sysid_qsys_control_slave_agent_rdata_fifo_out_data;           // sysid_qsys_control_slave_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          sysid_qsys_control_slave_agent_rdata_fifo_out_ready;          // avalon_st_adapter:in_0_ready -> sysid_qsys_control_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                // avalon_st_adapter:out_0_valid -> sysid_qsys_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                 // avalon_st_adapter:out_0_data -> sysid_qsys_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                // sysid_qsys_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                // avalon_st_adapter:out_0_error -> sysid_qsys_control_slave_agent:rdata_fifo_sink_error
	wire          datamover_0_s0_agent_rdata_fifo_out_valid;                    // DataMover_0_s0_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] datamover_0_s0_agent_rdata_fifo_out_data;                     // DataMover_0_s0_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          datamover_0_s0_agent_rdata_fifo_out_ready;                    // avalon_st_adapter_001:in_0_ready -> DataMover_0_s0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                            // avalon_st_adapter_001:out_0_valid -> DataMover_0_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                             // avalon_st_adapter_001:out_0_data -> DataMover_0_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                            // DataMover_0_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                            // avalon_st_adapter_001:out_0_error -> DataMover_0_s0_agent:rdata_fifo_sink_error
	wire          encoder_0_s0_agent_rdata_fifo_out_valid;                      // Encoder_0_s0_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] encoder_0_s0_agent_rdata_fifo_out_data;                       // Encoder_0_s0_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          encoder_0_s0_agent_rdata_fifo_out_ready;                      // avalon_st_adapter_002:in_0_ready -> Encoder_0_s0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                            // avalon_st_adapter_002:out_0_valid -> Encoder_0_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                             // avalon_st_adapter_002:out_0_data -> Encoder_0_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                            // Encoder_0_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                            // avalon_st_adapter_002:out_0_error -> Encoder_0_s0_agent:rdata_fifo_sink_error
	wire          decoder_0_s0_agent_rdata_fifo_out_valid;                      // Decoder_0_s0_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] decoder_0_s0_agent_rdata_fifo_out_data;                       // Decoder_0_s0_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          decoder_0_s0_agent_rdata_fifo_out_ready;                      // avalon_st_adapter_003:in_0_ready -> Decoder_0_s0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                            // avalon_st_adapter_003:out_0_valid -> Decoder_0_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                             // avalon_st_adapter_003:out_0_data -> Decoder_0_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                            // Decoder_0_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                            // avalon_st_adapter_003:out_0_error -> Decoder_0_s0_agent:rdata_fifo_sink_error

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_qsys_control_slave_translator (
		.clk                    (clk_100m_clk_clk),                                //                      clk.clk
		.reset                  (sysid_qsys_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (sysid_qsys_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_qsys_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sysid_qsys_control_slave_agent_m0_read),          //                         .read
		.uav_write              (sysid_qsys_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (sysid_qsys_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sysid_qsys_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sysid_qsys_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sysid_qsys_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sysid_qsys_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sysid_qsys_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sysid_qsys_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (sysid_qsys_control_slave_address),                //      avalon_anti_slave_0.address
		.av_readdata            (sysid_qsys_control_slave_readdata),               //                         .readdata
		.av_write               (),                                                //              (terminated)
		.av_read                (),                                                //              (terminated)
		.av_writedata           (),                                                //              (terminated)
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_byteenable          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_chipselect          (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (11),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) datamover_0_s0_translator (
		.clk                    (clk_100m_clk_clk),                             //                      clk.clk
		.reset                  (sysid_qsys_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (datamover_0_s0_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (datamover_0_s0_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (datamover_0_s0_agent_m0_read),                 //                         .read
		.uav_write              (datamover_0_s0_agent_m0_write),                //                         .write
		.uav_waitrequest        (datamover_0_s0_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (datamover_0_s0_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (datamover_0_s0_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (datamover_0_s0_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (datamover_0_s0_agent_m0_writedata),            //                         .writedata
		.uav_lock               (datamover_0_s0_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (datamover_0_s0_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (DataMover_0_s0_address),                       //      avalon_anti_slave_0.address
		.av_write               (DataMover_0_s0_write),                         //                         .write
		.av_read                (DataMover_0_s0_read),                          //                         .read
		.av_readdata            (DataMover_0_s0_readdata),                      //                         .readdata
		.av_writedata           (DataMover_0_s0_writedata),                     //                         .writedata
		.av_waitrequest         (DataMover_0_s0_waitrequest),                   //                         .waitrequest
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (11),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) encoder_0_s0_translator (
		.clk                    (clk_100m_clk_clk),                             //                      clk.clk
		.reset                  (sysid_qsys_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (encoder_0_s0_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (encoder_0_s0_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (encoder_0_s0_agent_m0_read),                   //                         .read
		.uav_write              (encoder_0_s0_agent_m0_write),                  //                         .write
		.uav_waitrequest        (encoder_0_s0_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (encoder_0_s0_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (encoder_0_s0_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (encoder_0_s0_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (encoder_0_s0_agent_m0_writedata),              //                         .writedata
		.uav_lock               (encoder_0_s0_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (encoder_0_s0_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (Encoder_0_s0_address),                         //      avalon_anti_slave_0.address
		.av_write               (Encoder_0_s0_write),                           //                         .write
		.av_read                (Encoder_0_s0_read),                            //                         .read
		.av_readdata            (Encoder_0_s0_readdata),                        //                         .readdata
		.av_writedata           (Encoder_0_s0_writedata),                       //                         .writedata
		.av_waitrequest         (Encoder_0_s0_waitrequest),                     //                         .waitrequest
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (11),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) decoder_0_s0_translator (
		.clk                    (clk_100m_clk_clk),                             //                      clk.clk
		.reset                  (sysid_qsys_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (decoder_0_s0_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (decoder_0_s0_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (decoder_0_s0_agent_m0_read),                   //                         .read
		.uav_write              (decoder_0_s0_agent_m0_write),                  //                         .write
		.uav_waitrequest        (decoder_0_s0_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (decoder_0_s0_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (decoder_0_s0_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (decoder_0_s0_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (decoder_0_s0_agent_m0_writedata),              //                         .writedata
		.uav_lock               (decoder_0_s0_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (decoder_0_s0_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (Decoder_0_s0_address),                         //      avalon_anti_slave_0.address
		.av_write               (Decoder_0_s0_write),                           //                         .write
		.av_read                (Decoder_0_s0_read),                            //                         .read
		.av_readdata            (Decoder_0_s0_readdata),                        //                         .readdata
		.av_writedata           (Decoder_0_s0_writedata),                       //                         .writedata
		.av_waitrequest         (Decoder_0_s0_waitrequest),                     //                         .waitrequest
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (30),
		.RDATA_WIDTH               (128),
		.WDATA_WIDTH               (128),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (205),
		.PKT_CACHE_H               (229),
		.PKT_CACHE_L               (226),
		.PKT_ADDR_SIDEBAND_H       (203),
		.PKT_ADDR_SIDEBAND_L       (203),
		.PKT_PROTECTION_H          (225),
		.PKT_PROTECTION_L          (223),
		.PKT_BURST_SIZE_H          (200),
		.PKT_BURST_SIZE_L          (198),
		.PKT_BURST_TYPE_H          (202),
		.PKT_BURST_TYPE_L          (201),
		.PKT_RESPONSE_STATUS_L     (230),
		.PKT_RESPONSE_STATUS_H     (231),
		.PKT_BURSTWRAP_H           (197),
		.PKT_BURSTWRAP_L           (189),
		.PKT_BYTE_CNT_H            (188),
		.PKT_BYTE_CNT_L            (180),
		.PKT_ADDR_H                (173),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_EXCLUSIVE       (179),
		.PKT_TRANS_LOCK            (178),
		.PKT_TRANS_COMPRESSED_READ (174),
		.PKT_TRANS_POSTED          (175),
		.PKT_TRANS_WRITE           (176),
		.PKT_TRANS_READ            (177),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (208),
		.PKT_SRC_ID_L              (207),
		.PKT_DEST_ID_H             (210),
		.PKT_DEST_ID_L             (209),
		.PKT_THREAD_ID_H           (222),
		.PKT_THREAD_ID_L           (211),
		.PKT_QOS_L                 (206),
		.PKT_QOS_H                 (206),
		.PKT_ORI_BURST_SIZE_L      (232),
		.PKT_ORI_BURST_SIZE_H      (234),
		.PKT_DATA_SIDEBAND_H       (204),
		.PKT_DATA_SIDEBAND_L       (204),
		.ST_DATA_W                 (235),
		.ST_CHANNEL_W              (4),
		.ID                        (0)
	) hps_0_h2f_axi_master_agent (
		.aclk                   (clk_100m_clk_clk),                                                  //              clk.clk
		.aresetn                (~hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (hps_0_h2f_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (hps_0_h2f_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (hps_0_h2f_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (hps_0_h2f_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (hps_0_h2f_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (hps_0_h2f_axi_master_wr_limiter_rsp_src_valid),                     //         write_rp.valid
		.write_rp_data          (hps_0_h2f_axi_master_wr_limiter_rsp_src_data),                      //                 .data
		.write_rp_channel       (hps_0_h2f_axi_master_wr_limiter_rsp_src_channel),                   //                 .channel
		.write_rp_startofpacket (hps_0_h2f_axi_master_wr_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.write_rp_endofpacket   (hps_0_h2f_axi_master_wr_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.write_rp_ready         (hps_0_h2f_axi_master_wr_limiter_rsp_src_ready),                     //                 .ready
		.read_cp_valid          (hps_0_h2f_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (hps_0_h2f_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (hps_0_h2f_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (hps_0_h2f_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (hps_0_h2f_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (hps_0_h2f_axi_master_rd_limiter_rsp_src_valid),                     //          read_rp.valid
		.read_rp_data           (hps_0_h2f_axi_master_rd_limiter_rsp_src_data),                      //                 .data
		.read_rp_channel        (hps_0_h2f_axi_master_rd_limiter_rsp_src_channel),                   //                 .channel
		.read_rp_startofpacket  (hps_0_h2f_axi_master_rd_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.read_rp_endofpacket    (hps_0_h2f_axi_master_rd_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.read_rp_ready          (hps_0_h2f_axi_master_rd_limiter_rsp_src_ready),                     //                 .ready
		.awid                   (hps_0_h2f_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (hps_0_h2f_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (hps_0_h2f_axi_master_awlen),                                        //                 .awlen
		.awsize                 (hps_0_h2f_axi_master_awsize),                                       //                 .awsize
		.awburst                (hps_0_h2f_axi_master_awburst),                                      //                 .awburst
		.awlock                 (hps_0_h2f_axi_master_awlock),                                       //                 .awlock
		.awcache                (hps_0_h2f_axi_master_awcache),                                      //                 .awcache
		.awprot                 (hps_0_h2f_axi_master_awprot),                                       //                 .awprot
		.awvalid                (hps_0_h2f_axi_master_awvalid),                                      //                 .awvalid
		.awready                (hps_0_h2f_axi_master_awready),                                      //                 .awready
		.wid                    (hps_0_h2f_axi_master_wid),                                          //                 .wid
		.wdata                  (hps_0_h2f_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (hps_0_h2f_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (hps_0_h2f_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (hps_0_h2f_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (hps_0_h2f_axi_master_wready),                                       //                 .wready
		.bid                    (hps_0_h2f_axi_master_bid),                                          //                 .bid
		.bresp                  (hps_0_h2f_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (hps_0_h2f_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (hps_0_h2f_axi_master_bready),                                       //                 .bready
		.arid                   (hps_0_h2f_axi_master_arid),                                         //                 .arid
		.araddr                 (hps_0_h2f_axi_master_araddr),                                       //                 .araddr
		.arlen                  (hps_0_h2f_axi_master_arlen),                                        //                 .arlen
		.arsize                 (hps_0_h2f_axi_master_arsize),                                       //                 .arsize
		.arburst                (hps_0_h2f_axi_master_arburst),                                      //                 .arburst
		.arlock                 (hps_0_h2f_axi_master_arlock),                                       //                 .arlock
		.arcache                (hps_0_h2f_axi_master_arcache),                                      //                 .arcache
		.arprot                 (hps_0_h2f_axi_master_arprot),                                       //                 .arprot
		.arvalid                (hps_0_h2f_axi_master_arvalid),                                      //                 .arvalid
		.arready                (hps_0_h2f_axi_master_arready),                                      //                 .arready
		.rid                    (hps_0_h2f_axi_master_rid),                                          //                 .rid
		.rdata                  (hps_0_h2f_axi_master_rdata),                                        //                 .rdata
		.rresp                  (hps_0_h2f_axi_master_rresp),                                        //                 .rresp
		.rlast                  (hps_0_h2f_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (hps_0_h2f_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (hps_0_h2f_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                              //      (terminated)
		.aruser                 (1'b0),                                                              //      (terminated)
		.awqos                  (4'b0000),                                                           //      (terminated)
		.arqos                  (4'b0000),                                                           //      (terminated)
		.awregion               (4'b0000),                                                           //      (terminated)
		.arregion               (4'b0000),                                                           //      (terminated)
		.wuser                  (1'b0),                                                              //      (terminated)
		.ruser                  (),                                                                  //      (terminated)
		.buser                  ()                                                                   //      (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (126),
		.PKT_ORI_BURST_SIZE_L      (124),
		.PKT_RESPONSE_STATUS_H     (123),
		.PKT_RESPONSE_STATUS_L     (122),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (117),
		.PKT_PROTECTION_L          (115),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (101),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (127),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_qsys_control_slave_agent (
		.clk                     (clk_100m_clk_clk),                                          //             clk.clk
		.reset                   (sysid_qsys_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (sysid_qsys_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sysid_qsys_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sysid_qsys_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sysid_qsys_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sysid_qsys_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sysid_qsys_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sysid_qsys_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sysid_qsys_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sysid_qsys_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sysid_qsys_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sysid_qsys_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sysid_qsys_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sysid_qsys_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sysid_qsys_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sysid_qsys_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sysid_qsys_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_source0_ready),                              //              cp.ready
		.cp_valid                (agent_pipeline_source0_valid),                              //                .valid
		.cp_data                 (agent_pipeline_source0_data),                               //                .data
		.cp_startofpacket        (agent_pipeline_source0_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (agent_pipeline_source0_endofpacket),                        //                .endofpacket
		.cp_channel              (agent_pipeline_source0_channel),                            //                .channel
		.rf_sink_ready           (sysid_qsys_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sysid_qsys_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sysid_qsys_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sysid_qsys_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sysid_qsys_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sysid_qsys_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sysid_qsys_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sysid_qsys_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (sysid_qsys_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_qsys_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sysid_qsys_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (128),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_control_slave_agent_rsp_fifo (
		.clk               (clk_100m_clk_clk),                                          //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (sysid_qsys_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_qsys_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_qsys_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_qsys_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_qsys_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_qsys_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_qsys_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_qsys_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_control_slave_agent_rdata_fifo (
		.clk               (clk_100m_clk_clk),                                    //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (sysid_qsys_control_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sysid_qsys_control_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sysid_qsys_control_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sysid_qsys_control_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sysid_qsys_control_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sysid_qsys_control_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (126),
		.PKT_ORI_BURST_SIZE_L      (124),
		.PKT_RESPONSE_STATUS_H     (123),
		.PKT_RESPONSE_STATUS_L     (122),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (117),
		.PKT_PROTECTION_L          (115),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (101),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (127),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) datamover_0_s0_agent (
		.clk                     (clk_100m_clk_clk),                                //             clk.clk
		.reset                   (sysid_qsys_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (datamover_0_s0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (datamover_0_s0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (datamover_0_s0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (datamover_0_s0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (datamover_0_s0_agent_m0_lock),                    //                .lock
		.m0_readdata             (datamover_0_s0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (datamover_0_s0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (datamover_0_s0_agent_m0_read),                    //                .read
		.m0_waitrequest          (datamover_0_s0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (datamover_0_s0_agent_m0_writedata),               //                .writedata
		.m0_write                (datamover_0_s0_agent_m0_write),                   //                .write
		.rp_endofpacket          (datamover_0_s0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (datamover_0_s0_agent_rp_ready),                   //                .ready
		.rp_valid                (datamover_0_s0_agent_rp_valid),                   //                .valid
		.rp_data                 (datamover_0_s0_agent_rp_data),                    //                .data
		.rp_startofpacket        (datamover_0_s0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_002_source0_ready),                //              cp.ready
		.cp_valid                (agent_pipeline_002_source0_valid),                //                .valid
		.cp_data                 (agent_pipeline_002_source0_data),                 //                .data
		.cp_startofpacket        (agent_pipeline_002_source0_startofpacket),        //                .startofpacket
		.cp_endofpacket          (agent_pipeline_002_source0_endofpacket),          //                .endofpacket
		.cp_channel              (agent_pipeline_002_source0_channel),              //                .channel
		.rf_sink_ready           (datamover_0_s0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (datamover_0_s0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (datamover_0_s0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (datamover_0_s0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (datamover_0_s0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (datamover_0_s0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (datamover_0_s0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (datamover_0_s0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (datamover_0_s0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (datamover_0_s0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),               //                .error
		.rdata_fifo_src_ready    (datamover_0_s0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (datamover_0_s0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (datamover_0_s0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (128),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) datamover_0_s0_agent_rsp_fifo (
		.clk               (clk_100m_clk_clk),                                //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (datamover_0_s0_agent_rf_source_data),             //        in.data
		.in_valid          (datamover_0_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (datamover_0_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (datamover_0_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (datamover_0_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (datamover_0_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (datamover_0_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (datamover_0_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (datamover_0_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (datamover_0_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) datamover_0_s0_agent_rdata_fifo (
		.clk               (clk_100m_clk_clk),                             //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (datamover_0_s0_agent_rdata_fifo_src_data),     //        in.data
		.in_valid          (datamover_0_s0_agent_rdata_fifo_src_valid),    //          .valid
		.in_ready          (datamover_0_s0_agent_rdata_fifo_src_ready),    //          .ready
		.out_data          (datamover_0_s0_agent_rdata_fifo_out_data),     //       out.data
		.out_valid         (datamover_0_s0_agent_rdata_fifo_out_valid),    //          .valid
		.out_ready         (datamover_0_s0_agent_rdata_fifo_out_ready),    //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (126),
		.PKT_ORI_BURST_SIZE_L      (124),
		.PKT_RESPONSE_STATUS_H     (123),
		.PKT_RESPONSE_STATUS_L     (122),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (117),
		.PKT_PROTECTION_L          (115),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (101),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (127),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) encoder_0_s0_agent (
		.clk                     (clk_100m_clk_clk),                              //             clk.clk
		.reset                   (sysid_qsys_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (encoder_0_s0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (encoder_0_s0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (encoder_0_s0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (encoder_0_s0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (encoder_0_s0_agent_m0_lock),                    //                .lock
		.m0_readdata             (encoder_0_s0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (encoder_0_s0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (encoder_0_s0_agent_m0_read),                    //                .read
		.m0_waitrequest          (encoder_0_s0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (encoder_0_s0_agent_m0_writedata),               //                .writedata
		.m0_write                (encoder_0_s0_agent_m0_write),                   //                .write
		.rp_endofpacket          (encoder_0_s0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (encoder_0_s0_agent_rp_ready),                   //                .ready
		.rp_valid                (encoder_0_s0_agent_rp_valid),                   //                .valid
		.rp_data                 (encoder_0_s0_agent_rp_data),                    //                .data
		.rp_startofpacket        (encoder_0_s0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_004_source0_ready),              //              cp.ready
		.cp_valid                (agent_pipeline_004_source0_valid),              //                .valid
		.cp_data                 (agent_pipeline_004_source0_data),               //                .data
		.cp_startofpacket        (agent_pipeline_004_source0_startofpacket),      //                .startofpacket
		.cp_endofpacket          (agent_pipeline_004_source0_endofpacket),        //                .endofpacket
		.cp_channel              (agent_pipeline_004_source0_channel),            //                .channel
		.rf_sink_ready           (encoder_0_s0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (encoder_0_s0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (encoder_0_s0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (encoder_0_s0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (encoder_0_s0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (encoder_0_s0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (encoder_0_s0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (encoder_0_s0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (encoder_0_s0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (encoder_0_s0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),             //                .error
		.rdata_fifo_src_ready    (encoder_0_s0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (encoder_0_s0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (encoder_0_s0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (128),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) encoder_0_s0_agent_rsp_fifo (
		.clk               (clk_100m_clk_clk),                              //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (encoder_0_s0_agent_rf_source_data),             //        in.data
		.in_valid          (encoder_0_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (encoder_0_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (encoder_0_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (encoder_0_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (encoder_0_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (encoder_0_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (encoder_0_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (encoder_0_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (encoder_0_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) encoder_0_s0_agent_rdata_fifo (
		.clk               (clk_100m_clk_clk),                             //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (encoder_0_s0_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (encoder_0_s0_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (encoder_0_s0_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (encoder_0_s0_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (encoder_0_s0_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (encoder_0_s0_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (126),
		.PKT_ORI_BURST_SIZE_L      (124),
		.PKT_RESPONSE_STATUS_H     (123),
		.PKT_RESPONSE_STATUS_L     (122),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (117),
		.PKT_PROTECTION_L          (115),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (101),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (127),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) decoder_0_s0_agent (
		.clk                     (clk_100m_clk_clk),                              //             clk.clk
		.reset                   (sysid_qsys_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (decoder_0_s0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (decoder_0_s0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (decoder_0_s0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (decoder_0_s0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (decoder_0_s0_agent_m0_lock),                    //                .lock
		.m0_readdata             (decoder_0_s0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (decoder_0_s0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (decoder_0_s0_agent_m0_read),                    //                .read
		.m0_waitrequest          (decoder_0_s0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (decoder_0_s0_agent_m0_writedata),               //                .writedata
		.m0_write                (decoder_0_s0_agent_m0_write),                   //                .write
		.rp_endofpacket          (decoder_0_s0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (decoder_0_s0_agent_rp_ready),                   //                .ready
		.rp_valid                (decoder_0_s0_agent_rp_valid),                   //                .valid
		.rp_data                 (decoder_0_s0_agent_rp_data),                    //                .data
		.rp_startofpacket        (decoder_0_s0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_006_source0_ready),              //              cp.ready
		.cp_valid                (agent_pipeline_006_source0_valid),              //                .valid
		.cp_data                 (agent_pipeline_006_source0_data),               //                .data
		.cp_startofpacket        (agent_pipeline_006_source0_startofpacket),      //                .startofpacket
		.cp_endofpacket          (agent_pipeline_006_source0_endofpacket),        //                .endofpacket
		.cp_channel              (agent_pipeline_006_source0_channel),            //                .channel
		.rf_sink_ready           (decoder_0_s0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (decoder_0_s0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (decoder_0_s0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (decoder_0_s0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (decoder_0_s0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (decoder_0_s0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (decoder_0_s0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (decoder_0_s0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (decoder_0_s0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (decoder_0_s0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),             //                .error
		.rdata_fifo_src_ready    (decoder_0_s0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (decoder_0_s0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (decoder_0_s0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (128),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) decoder_0_s0_agent_rsp_fifo (
		.clk               (clk_100m_clk_clk),                              //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (decoder_0_s0_agent_rf_source_data),             //        in.data
		.in_valid          (decoder_0_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (decoder_0_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (decoder_0_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (decoder_0_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (decoder_0_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (decoder_0_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (decoder_0_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (decoder_0_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (decoder_0_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) decoder_0_s0_agent_rdata_fifo (
		.clk               (clk_100m_clk_clk),                             //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (decoder_0_s0_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (decoder_0_s0_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (decoder_0_s0_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (decoder_0_s0_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (decoder_0_s0_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (decoder_0_s0_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	soc_system_mm_interconnect_2_router router (
		.sink_ready         (hps_0_h2f_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (hps_0_h2f_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (hps_0_h2f_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (hps_0_h2f_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (clk_100m_clk_clk),                                                 //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                 //       src.ready
		.src_valid          (router_src_valid),                                                 //          .valid
		.src_data           (router_src_data),                                                  //          .data
		.src_channel        (router_src_channel),                                               //          .channel
		.src_startofpacket  (router_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_2_router router_001 (
		.sink_ready         (hps_0_h2f_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (hps_0_h2f_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (hps_0_h2f_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (hps_0_h2f_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (clk_100m_clk_clk),                                                 //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                             //       src.ready
		.src_valid          (router_001_src_valid),                                             //          .valid
		.src_data           (router_001_src_data),                                              //          .data
		.src_channel        (router_001_src_channel),                                           //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_2_router_002 router_002 (
		.sink_ready         (agent_pipeline_001_source0_ready),             //      sink.ready
		.sink_valid         (agent_pipeline_001_source0_valid),             //          .valid
		.sink_data          (agent_pipeline_001_source0_data),              //          .data
		.sink_startofpacket (agent_pipeline_001_source0_startofpacket),     //          .startofpacket
		.sink_endofpacket   (agent_pipeline_001_source0_endofpacket),       //          .endofpacket
		.clk                (clk_100m_clk_clk),                             //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                         //       src.ready
		.src_valid          (router_002_src_valid),                         //          .valid
		.src_data           (router_002_src_data),                          //          .data
		.src_channel        (router_002_src_channel),                       //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_2_router_002 router_003 (
		.sink_ready         (agent_pipeline_003_source0_ready),             //      sink.ready
		.sink_valid         (agent_pipeline_003_source0_valid),             //          .valid
		.sink_data          (agent_pipeline_003_source0_data),              //          .data
		.sink_startofpacket (agent_pipeline_003_source0_startofpacket),     //          .startofpacket
		.sink_endofpacket   (agent_pipeline_003_source0_endofpacket),       //          .endofpacket
		.clk                (clk_100m_clk_clk),                             //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                         //       src.ready
		.src_valid          (router_003_src_valid),                         //          .valid
		.src_data           (router_003_src_data),                          //          .data
		.src_channel        (router_003_src_channel),                       //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_2_router_002 router_004 (
		.sink_ready         (agent_pipeline_005_source0_ready),             //      sink.ready
		.sink_valid         (agent_pipeline_005_source0_valid),             //          .valid
		.sink_data          (agent_pipeline_005_source0_data),              //          .data
		.sink_startofpacket (agent_pipeline_005_source0_startofpacket),     //          .startofpacket
		.sink_endofpacket   (agent_pipeline_005_source0_endofpacket),       //          .endofpacket
		.clk                (clk_100m_clk_clk),                             //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                         //       src.ready
		.src_valid          (router_004_src_valid),                         //          .valid
		.src_data           (router_004_src_data),                          //          .data
		.src_channel        (router_004_src_channel),                       //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_2_router_002 router_005 (
		.sink_ready         (agent_pipeline_007_source0_ready),             //      sink.ready
		.sink_valid         (agent_pipeline_007_source0_valid),             //          .valid
		.sink_data          (agent_pipeline_007_source0_data),              //          .data
		.sink_startofpacket (agent_pipeline_007_source0_startofpacket),     //          .startofpacket
		.sink_endofpacket   (agent_pipeline_007_source0_endofpacket),       //          .endofpacket
		.clk                (clk_100m_clk_clk),                             //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                         //       src.ready
		.src_valid          (router_005_src_valid),                         //          .valid
		.src_data           (router_005_src_data),                          //          .data
		.src_channel        (router_005_src_channel),                       //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                    //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (210),
		.PKT_DEST_ID_L             (209),
		.PKT_SRC_ID_H              (208),
		.PKT_SRC_ID_L              (207),
		.PKT_BYTE_CNT_H            (188),
		.PKT_BYTE_CNT_L            (180),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_TRANS_POSTED          (175),
		.PKT_TRANS_WRITE           (176),
		.MAX_OUTSTANDING_RESPONSES (15),
		.PIPELINED                 (0),
		.ST_DATA_W                 (235),
		.ST_CHANNEL_W              (4),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_axi_master_wr_limiter (
		.clk                    (clk_100m_clk_clk),                                                 //       clk.clk
		.reset                  (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                 //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                 //          .valid
		.cmd_sink_data          (router_src_data),                                                  //          .data
		.cmd_sink_channel       (router_src_channel),                                               //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                         //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                           //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_axi_master_wr_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_axi_master_wr_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_axi_master_wr_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_axi_master_wr_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_axi_master_wr_limiter_cmd_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_axi_master_wr_limiter_cmd_src_valid),                    //          .valid
		.rsp_sink_ready         (limiter_pipeline_001_source0_ready),                               //  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_001_source0_valid),                               //          .valid
		.rsp_sink_channel       (limiter_pipeline_001_source0_channel),                             //          .channel
		.rsp_sink_data          (limiter_pipeline_001_source0_data),                                //          .data
		.rsp_sink_startofpacket (limiter_pipeline_001_source0_startofpacket),                       //          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_001_source0_endofpacket),                         //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_axi_master_wr_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_axi_master_wr_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_axi_master_wr_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_axi_master_wr_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_axi_master_wr_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_axi_master_wr_limiter_rsp_src_endofpacket)               //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (210),
		.PKT_DEST_ID_L             (209),
		.PKT_SRC_ID_H              (208),
		.PKT_SRC_ID_L              (207),
		.PKT_BYTE_CNT_H            (188),
		.PKT_BYTE_CNT_L            (180),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_TRANS_POSTED          (175),
		.PKT_TRANS_WRITE           (176),
		.MAX_OUTSTANDING_RESPONSES (15),
		.PIPELINED                 (0),
		.ST_DATA_W                 (235),
		.ST_CHANNEL_W              (4),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_axi_master_rd_limiter (
		.clk                    (clk_100m_clk_clk),                                                 //       clk.clk
		.reset                  (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                             //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                             //          .valid
		.cmd_sink_data          (router_001_src_data),                                              //          .data
		.cmd_sink_channel       (router_001_src_channel),                                           //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                     //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                       //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_axi_master_rd_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_axi_master_rd_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_axi_master_rd_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_axi_master_rd_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_axi_master_rd_limiter_cmd_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_axi_master_rd_limiter_cmd_src_valid),                    //          .valid
		.rsp_sink_ready         (limiter_pipeline_003_source0_ready),                               //  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_003_source0_valid),                               //          .valid
		.rsp_sink_channel       (limiter_pipeline_003_source0_channel),                             //          .channel
		.rsp_sink_data          (limiter_pipeline_003_source0_data),                                //          .data
		.rsp_sink_startofpacket (limiter_pipeline_003_source0_startofpacket),                       //          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_003_source0_endofpacket),                         //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_axi_master_rd_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_axi_master_rd_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_axi_master_rd_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_axi_master_rd_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_axi_master_rd_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_axi_master_rd_limiter_rsp_src_endofpacket)               //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (81),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (127),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sysid_qsys_control_slave_burst_adapter (
		.clk                   (clk_100m_clk_clk),                                             //       cr0.clk
		.reset                 (sysid_qsys_reset_reset_bridge_in_reset_reset),                 // cr0_reset.reset
		.sink0_valid           (sysid_qsys_control_slave_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sysid_qsys_control_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sysid_qsys_control_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sysid_qsys_control_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sysid_qsys_control_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sysid_qsys_control_slave_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sysid_qsys_control_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sysid_qsys_control_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (sysid_qsys_control_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sysid_qsys_control_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sysid_qsys_control_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sysid_qsys_control_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (81),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (127),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) datamover_0_s0_burst_adapter (
		.clk                   (clk_100m_clk_clk),                                   //       cr0.clk
		.reset                 (sysid_qsys_reset_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.sink0_valid           (datamover_0_s0_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (datamover_0_s0_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (datamover_0_s0_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (datamover_0_s0_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (datamover_0_s0_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (datamover_0_s0_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (datamover_0_s0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (datamover_0_s0_burst_adapter_source0_data),          //          .data
		.source0_channel       (datamover_0_s0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (datamover_0_s0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (datamover_0_s0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (datamover_0_s0_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (81),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (127),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) encoder_0_s0_burst_adapter (
		.clk                   (clk_100m_clk_clk),                                 //       cr0.clk
		.reset                 (sysid_qsys_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (encoder_0_s0_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (encoder_0_s0_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (encoder_0_s0_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (encoder_0_s0_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (encoder_0_s0_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (encoder_0_s0_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (encoder_0_s0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (encoder_0_s0_burst_adapter_source0_data),          //          .data
		.source0_channel       (encoder_0_s0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (encoder_0_s0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (encoder_0_s0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (encoder_0_s0_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (81),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (127),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) decoder_0_s0_burst_adapter (
		.clk                   (clk_100m_clk_clk),                                 //       cr0.clk
		.reset                 (sysid_qsys_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (decoder_0_s0_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (decoder_0_s0_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (decoder_0_s0_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (decoder_0_s0_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (decoder_0_s0_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (decoder_0_s0_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (decoder_0_s0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (decoder_0_s0_burst_adapter_source0_data),          //          .data
		.source0_channel       (decoder_0_s0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (decoder_0_s0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (decoder_0_s0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (decoder_0_s0_burst_adapter_source0_ready)          //          .ready
	);

	soc_system_mm_interconnect_2_cmd_demux cmd_demux (
		.clk                (clk_100m_clk_clk),                                                 //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (limiter_pipeline_source0_ready),                                   //      sink.ready
		.sink_channel       (limiter_pipeline_source0_channel),                                 //          .channel
		.sink_data          (limiter_pipeline_source0_data),                                    //          .data
		.sink_startofpacket (limiter_pipeline_source0_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (limiter_pipeline_source0_endofpacket),                             //          .endofpacket
		.sink_valid         (limiter_pipeline_source0_valid),                                   //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                             //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                             //          .valid
		.src0_data          (cmd_demux_src0_data),                                              //          .data
		.src0_channel       (cmd_demux_src0_channel),                                           //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                     //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                       //          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                             //      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                             //          .valid
		.src1_data          (cmd_demux_src1_data),                                              //          .data
		.src1_channel       (cmd_demux_src1_channel),                                           //          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                     //          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                                       //          .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                             //      src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                             //          .valid
		.src2_data          (cmd_demux_src2_data),                                              //          .data
		.src2_channel       (cmd_demux_src2_channel),                                           //          .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                                     //          .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                                       //          .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                             //      src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                             //          .valid
		.src3_data          (cmd_demux_src3_data),                                              //          .data
		.src3_channel       (cmd_demux_src3_channel),                                           //          .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                                     //          .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_2_cmd_demux cmd_demux_001 (
		.clk                (clk_100m_clk_clk),                                                 //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (limiter_pipeline_002_source0_ready),                               //      sink.ready
		.sink_channel       (limiter_pipeline_002_source0_channel),                             //          .channel
		.sink_data          (limiter_pipeline_002_source0_data),                                //          .data
		.sink_startofpacket (limiter_pipeline_002_source0_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (limiter_pipeline_002_source0_endofpacket),                         //          .endofpacket
		.sink_valid         (limiter_pipeline_002_source0_valid),                               //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                                         //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                         //          .valid
		.src0_data          (cmd_demux_001_src0_data),                                          //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                                       //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                 //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                                   //          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                                         //      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                                         //          .valid
		.src1_data          (cmd_demux_001_src1_data),                                          //          .data
		.src1_channel       (cmd_demux_001_src1_channel),                                       //          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                                 //          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                                   //          .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                                         //      src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                                         //          .valid
		.src2_data          (cmd_demux_001_src2_data),                                          //          .data
		.src2_channel       (cmd_demux_001_src2_channel),                                       //          .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                                 //          .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),                                   //          .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                                         //      src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                                         //          .valid
		.src3_data          (cmd_demux_001_src3_data),                                          //          .data
		.src3_channel       (cmd_demux_001_src3_channel),                                       //          .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),                                 //          .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket)                                    //          .endofpacket
	);

	soc_system_mm_interconnect_2_cmd_mux cmd_mux (
		.clk                 (clk_100m_clk_clk),                             //       clk.clk
		.reset               (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_src_valid),                            //          .valid
		.src_data            (cmd_mux_src_data),                             //          .data
		.src_channel         (cmd_mux_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (mux_pipeline_source0_ready),                   //     sink0.ready
		.sink0_valid         (mux_pipeline_source0_valid),                   //          .valid
		.sink0_channel       (mux_pipeline_source0_channel),                 //          .channel
		.sink0_data          (mux_pipeline_source0_data),                    //          .data
		.sink0_startofpacket (mux_pipeline_source0_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_source0_endofpacket),             //          .endofpacket
		.sink1_ready         (mux_pipeline_001_source0_ready),               //     sink1.ready
		.sink1_valid         (mux_pipeline_001_source0_valid),               //          .valid
		.sink1_channel       (mux_pipeline_001_source0_channel),             //          .channel
		.sink1_data          (mux_pipeline_001_source0_data),                //          .data
		.sink1_startofpacket (mux_pipeline_001_source0_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_001_source0_endofpacket)          //          .endofpacket
	);

	soc_system_mm_interconnect_2_cmd_mux cmd_mux_001 (
		.clk                 (clk_100m_clk_clk),                             //       clk.clk
		.reset               (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                        //          .valid
		.src_data            (cmd_mux_001_src_data),                         //          .data
		.src_channel         (cmd_mux_001_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (mux_pipeline_002_source0_ready),               //     sink0.ready
		.sink0_valid         (mux_pipeline_002_source0_valid),               //          .valid
		.sink0_channel       (mux_pipeline_002_source0_channel),             //          .channel
		.sink0_data          (mux_pipeline_002_source0_data),                //          .data
		.sink0_startofpacket (mux_pipeline_002_source0_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_002_source0_endofpacket),         //          .endofpacket
		.sink1_ready         (mux_pipeline_003_source0_ready),               //     sink1.ready
		.sink1_valid         (mux_pipeline_003_source0_valid),               //          .valid
		.sink1_channel       (mux_pipeline_003_source0_channel),             //          .channel
		.sink1_data          (mux_pipeline_003_source0_data),                //          .data
		.sink1_startofpacket (mux_pipeline_003_source0_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_003_source0_endofpacket)          //          .endofpacket
	);

	soc_system_mm_interconnect_2_cmd_mux cmd_mux_002 (
		.clk                 (clk_100m_clk_clk),                             //       clk.clk
		.reset               (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                        //          .valid
		.src_data            (cmd_mux_002_src_data),                         //          .data
		.src_channel         (cmd_mux_002_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (mux_pipeline_004_source0_ready),               //     sink0.ready
		.sink0_valid         (mux_pipeline_004_source0_valid),               //          .valid
		.sink0_channel       (mux_pipeline_004_source0_channel),             //          .channel
		.sink0_data          (mux_pipeline_004_source0_data),                //          .data
		.sink0_startofpacket (mux_pipeline_004_source0_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_004_source0_endofpacket),         //          .endofpacket
		.sink1_ready         (mux_pipeline_005_source0_ready),               //     sink1.ready
		.sink1_valid         (mux_pipeline_005_source0_valid),               //          .valid
		.sink1_channel       (mux_pipeline_005_source0_channel),             //          .channel
		.sink1_data          (mux_pipeline_005_source0_data),                //          .data
		.sink1_startofpacket (mux_pipeline_005_source0_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_005_source0_endofpacket)          //          .endofpacket
	);

	soc_system_mm_interconnect_2_cmd_mux cmd_mux_003 (
		.clk                 (clk_100m_clk_clk),                             //       clk.clk
		.reset               (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                        //          .valid
		.src_data            (cmd_mux_003_src_data),                         //          .data
		.src_channel         (cmd_mux_003_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (mux_pipeline_006_source0_ready),               //     sink0.ready
		.sink0_valid         (mux_pipeline_006_source0_valid),               //          .valid
		.sink0_channel       (mux_pipeline_006_source0_channel),             //          .channel
		.sink0_data          (mux_pipeline_006_source0_data),                //          .data
		.sink0_startofpacket (mux_pipeline_006_source0_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_006_source0_endofpacket),         //          .endofpacket
		.sink1_ready         (mux_pipeline_007_source0_ready),               //     sink1.ready
		.sink1_valid         (mux_pipeline_007_source0_valid),               //          .valid
		.sink1_channel       (mux_pipeline_007_source0_channel),             //          .channel
		.sink1_data          (mux_pipeline_007_source0_data),                //          .data
		.sink1_startofpacket (mux_pipeline_007_source0_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_007_source0_endofpacket)          //          .endofpacket
	);

	soc_system_mm_interconnect_2_rsp_demux rsp_demux (
		.clk                (clk_100m_clk_clk),                                             //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.sink_ready         (sysid_qsys_control_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sysid_qsys_control_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sysid_qsys_control_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sysid_qsys_control_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sysid_qsys_control_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sysid_qsys_control_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                         //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                         //          .valid
		.src0_data          (rsp_demux_src0_data),                                          //          .data
		.src0_channel       (rsp_demux_src0_channel),                                       //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                   //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                         //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                         //          .valid
		.src1_data          (rsp_demux_src1_data),                                          //          .data
		.src1_channel       (rsp_demux_src1_channel),                                       //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                                    //          .endofpacket
	);

	soc_system_mm_interconnect_2_rsp_demux rsp_demux_001 (
		.clk                (clk_100m_clk_clk),                                   //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.sink_ready         (datamover_0_s0_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (datamover_0_s0_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (datamover_0_s0_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (datamover_0_s0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (datamover_0_s0_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (datamover_0_s0_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_001_src0_data),                            //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                     //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                           //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                           //          .valid
		.src1_data          (rsp_demux_001_src1_data),                            //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                         //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                   //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_2_rsp_demux rsp_demux_002 (
		.clk                (clk_100m_clk_clk),                                 //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.sink_ready         (encoder_0_s0_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (encoder_0_s0_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (encoder_0_s0_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (encoder_0_s0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (encoder_0_s0_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (encoder_0_s0_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_002_src0_data),                          //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_002_src1_data),                          //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_2_rsp_demux rsp_demux_003 (
		.clk                (clk_100m_clk_clk),                                 //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.sink_ready         (decoder_0_s0_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (decoder_0_s0_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (decoder_0_s0_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (decoder_0_s0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (decoder_0_s0_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (decoder_0_s0_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_003_src0_data),                          //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_003_src1_data),                          //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_2_rsp_mux rsp_mux (
		.clk                 (clk_100m_clk_clk),                                                 //       clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                //          .valid
		.src_data            (rsp_mux_src_data),                                                 //          .data
		.src_channel         (rsp_mux_src_channel),                                              //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                          //          .endofpacket
		.sink0_ready         (mux_pipeline_008_source0_ready),                                   //     sink0.ready
		.sink0_valid         (mux_pipeline_008_source0_valid),                                   //          .valid
		.sink0_channel       (mux_pipeline_008_source0_channel),                                 //          .channel
		.sink0_data          (mux_pipeline_008_source0_data),                                    //          .data
		.sink0_startofpacket (mux_pipeline_008_source0_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_008_source0_endofpacket),                             //          .endofpacket
		.sink1_ready         (mux_pipeline_009_source0_ready),                                   //     sink1.ready
		.sink1_valid         (mux_pipeline_009_source0_valid),                                   //          .valid
		.sink1_channel       (mux_pipeline_009_source0_channel),                                 //          .channel
		.sink1_data          (mux_pipeline_009_source0_data),                                    //          .data
		.sink1_startofpacket (mux_pipeline_009_source0_startofpacket),                           //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_009_source0_endofpacket),                             //          .endofpacket
		.sink2_ready         (mux_pipeline_010_source0_ready),                                   //     sink2.ready
		.sink2_valid         (mux_pipeline_010_source0_valid),                                   //          .valid
		.sink2_channel       (mux_pipeline_010_source0_channel),                                 //          .channel
		.sink2_data          (mux_pipeline_010_source0_data),                                    //          .data
		.sink2_startofpacket (mux_pipeline_010_source0_startofpacket),                           //          .startofpacket
		.sink2_endofpacket   (mux_pipeline_010_source0_endofpacket),                             //          .endofpacket
		.sink3_ready         (mux_pipeline_011_source0_ready),                                   //     sink3.ready
		.sink3_valid         (mux_pipeline_011_source0_valid),                                   //          .valid
		.sink3_channel       (mux_pipeline_011_source0_channel),                                 //          .channel
		.sink3_data          (mux_pipeline_011_source0_data),                                    //          .data
		.sink3_startofpacket (mux_pipeline_011_source0_startofpacket),                           //          .startofpacket
		.sink3_endofpacket   (mux_pipeline_011_source0_endofpacket)                              //          .endofpacket
	);

	soc_system_mm_interconnect_2_rsp_mux rsp_mux_001 (
		.clk                 (clk_100m_clk_clk),                                                 //       clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                            //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                            //          .valid
		.src_data            (rsp_mux_001_src_data),                                             //          .data
		.src_channel         (rsp_mux_001_src_channel),                                          //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                      //          .endofpacket
		.sink0_ready         (mux_pipeline_012_source0_ready),                                   //     sink0.ready
		.sink0_valid         (mux_pipeline_012_source0_valid),                                   //          .valid
		.sink0_channel       (mux_pipeline_012_source0_channel),                                 //          .channel
		.sink0_data          (mux_pipeline_012_source0_data),                                    //          .data
		.sink0_startofpacket (mux_pipeline_012_source0_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_012_source0_endofpacket),                             //          .endofpacket
		.sink1_ready         (mux_pipeline_013_source0_ready),                                   //     sink1.ready
		.sink1_valid         (mux_pipeline_013_source0_valid),                                   //          .valid
		.sink1_channel       (mux_pipeline_013_source0_channel),                                 //          .channel
		.sink1_data          (mux_pipeline_013_source0_data),                                    //          .data
		.sink1_startofpacket (mux_pipeline_013_source0_startofpacket),                           //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_013_source0_endofpacket),                             //          .endofpacket
		.sink2_ready         (mux_pipeline_014_source0_ready),                                   //     sink2.ready
		.sink2_valid         (mux_pipeline_014_source0_valid),                                   //          .valid
		.sink2_channel       (mux_pipeline_014_source0_channel),                                 //          .channel
		.sink2_data          (mux_pipeline_014_source0_data),                                    //          .data
		.sink2_startofpacket (mux_pipeline_014_source0_startofpacket),                           //          .startofpacket
		.sink2_endofpacket   (mux_pipeline_014_source0_endofpacket),                             //          .endofpacket
		.sink3_ready         (mux_pipeline_015_source0_ready),                                   //     sink3.ready
		.sink3_valid         (mux_pipeline_015_source0_valid),                                   //          .valid
		.sink3_channel       (mux_pipeline_015_source0_channel),                                 //          .channel
		.sink3_data          (mux_pipeline_015_source0_data),                                    //          .data
		.sink3_startofpacket (mux_pipeline_015_source0_startofpacket),                           //          .startofpacket
		.sink3_endofpacket   (mux_pipeline_015_source0_endofpacket)                              //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (80),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (81),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (123),
		.IN_PKT_RESPONSE_STATUS_L      (122),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (124),
		.IN_PKT_ORI_BURST_SIZE_H       (126),
		.IN_ST_DATA_W                  (127),
		.OUT_PKT_ADDR_H                (173),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (188),
		.OUT_PKT_BYTE_CNT_L            (180),
		.OUT_PKT_TRANS_COMPRESSED_READ (174),
		.OUT_PKT_BURST_SIZE_H          (200),
		.OUT_PKT_BURST_SIZE_L          (198),
		.OUT_PKT_RESPONSE_STATUS_H     (231),
		.OUT_PKT_RESPONSE_STATUS_L     (230),
		.OUT_PKT_TRANS_EXCLUSIVE       (179),
		.OUT_PKT_BURST_TYPE_H          (202),
		.OUT_PKT_BURST_TYPE_L          (201),
		.OUT_PKT_ORI_BURST_SIZE_L      (232),
		.OUT_PKT_ORI_BURST_SIZE_H      (234),
		.OUT_ST_DATA_W                 (235),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sysid_qsys_control_slave_rsp_width_adapter (
		.clk                  (clk_100m_clk_clk),                                             //       clk.clk
		.reset                (sysid_qsys_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_valid             (router_002_src_valid),                                         //      sink.valid
		.in_channel           (router_002_src_channel),                                       //          .channel
		.in_startofpacket     (router_002_src_startofpacket),                                 //          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                                   //          .endofpacket
		.in_ready             (router_002_src_ready),                                         //          .ready
		.in_data              (router_002_src_data),                                          //          .data
		.out_endofpacket      (sysid_qsys_control_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sysid_qsys_control_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sysid_qsys_control_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sysid_qsys_control_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sysid_qsys_control_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sysid_qsys_control_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (80),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (81),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (123),
		.IN_PKT_RESPONSE_STATUS_L      (122),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (124),
		.IN_PKT_ORI_BURST_SIZE_H       (126),
		.IN_ST_DATA_W                  (127),
		.OUT_PKT_ADDR_H                (173),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (188),
		.OUT_PKT_BYTE_CNT_L            (180),
		.OUT_PKT_TRANS_COMPRESSED_READ (174),
		.OUT_PKT_BURST_SIZE_H          (200),
		.OUT_PKT_BURST_SIZE_L          (198),
		.OUT_PKT_RESPONSE_STATUS_H     (231),
		.OUT_PKT_RESPONSE_STATUS_L     (230),
		.OUT_PKT_TRANS_EXCLUSIVE       (179),
		.OUT_PKT_BURST_TYPE_H          (202),
		.OUT_PKT_BURST_TYPE_L          (201),
		.OUT_PKT_ORI_BURST_SIZE_L      (232),
		.OUT_PKT_ORI_BURST_SIZE_H      (234),
		.OUT_ST_DATA_W                 (235),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) datamover_0_s0_rsp_width_adapter (
		.clk                  (clk_100m_clk_clk),                                   //       clk.clk
		.reset                (sysid_qsys_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_valid             (router_003_src_valid),                               //      sink.valid
		.in_channel           (router_003_src_channel),                             //          .channel
		.in_startofpacket     (router_003_src_startofpacket),                       //          .startofpacket
		.in_endofpacket       (router_003_src_endofpacket),                         //          .endofpacket
		.in_ready             (router_003_src_ready),                               //          .ready
		.in_data              (router_003_src_data),                                //          .data
		.out_endofpacket      (datamover_0_s0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (datamover_0_s0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (datamover_0_s0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (datamover_0_s0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (datamover_0_s0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (datamover_0_s0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (80),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (81),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (123),
		.IN_PKT_RESPONSE_STATUS_L      (122),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (124),
		.IN_PKT_ORI_BURST_SIZE_H       (126),
		.IN_ST_DATA_W                  (127),
		.OUT_PKT_ADDR_H                (173),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (188),
		.OUT_PKT_BYTE_CNT_L            (180),
		.OUT_PKT_TRANS_COMPRESSED_READ (174),
		.OUT_PKT_BURST_SIZE_H          (200),
		.OUT_PKT_BURST_SIZE_L          (198),
		.OUT_PKT_RESPONSE_STATUS_H     (231),
		.OUT_PKT_RESPONSE_STATUS_L     (230),
		.OUT_PKT_TRANS_EXCLUSIVE       (179),
		.OUT_PKT_BURST_TYPE_H          (202),
		.OUT_PKT_BURST_TYPE_L          (201),
		.OUT_PKT_ORI_BURST_SIZE_L      (232),
		.OUT_PKT_ORI_BURST_SIZE_H      (234),
		.OUT_ST_DATA_W                 (235),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) encoder_0_s0_rsp_width_adapter (
		.clk                  (clk_100m_clk_clk),                                 //       clk.clk
		.reset                (sysid_qsys_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (router_004_src_valid),                             //      sink.valid
		.in_channel           (router_004_src_channel),                           //          .channel
		.in_startofpacket     (router_004_src_startofpacket),                     //          .startofpacket
		.in_endofpacket       (router_004_src_endofpacket),                       //          .endofpacket
		.in_ready             (router_004_src_ready),                             //          .ready
		.in_data              (router_004_src_data),                              //          .data
		.out_endofpacket      (encoder_0_s0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (encoder_0_s0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (encoder_0_s0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (encoder_0_s0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (encoder_0_s0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (encoder_0_s0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (80),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (81),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (123),
		.IN_PKT_RESPONSE_STATUS_L      (122),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (124),
		.IN_PKT_ORI_BURST_SIZE_H       (126),
		.IN_ST_DATA_W                  (127),
		.OUT_PKT_ADDR_H                (173),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (188),
		.OUT_PKT_BYTE_CNT_L            (180),
		.OUT_PKT_TRANS_COMPRESSED_READ (174),
		.OUT_PKT_BURST_SIZE_H          (200),
		.OUT_PKT_BURST_SIZE_L          (198),
		.OUT_PKT_RESPONSE_STATUS_H     (231),
		.OUT_PKT_RESPONSE_STATUS_L     (230),
		.OUT_PKT_TRANS_EXCLUSIVE       (179),
		.OUT_PKT_BURST_TYPE_H          (202),
		.OUT_PKT_BURST_TYPE_L          (201),
		.OUT_PKT_ORI_BURST_SIZE_L      (232),
		.OUT_PKT_ORI_BURST_SIZE_H      (234),
		.OUT_ST_DATA_W                 (235),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) decoder_0_s0_rsp_width_adapter (
		.clk                  (clk_100m_clk_clk),                                 //       clk.clk
		.reset                (sysid_qsys_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (router_005_src_valid),                             //      sink.valid
		.in_channel           (router_005_src_channel),                           //          .channel
		.in_startofpacket     (router_005_src_startofpacket),                     //          .startofpacket
		.in_endofpacket       (router_005_src_endofpacket),                       //          .endofpacket
		.in_ready             (router_005_src_ready),                             //          .ready
		.in_data              (router_005_src_data),                              //          .data
		.out_endofpacket      (decoder_0_s0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (decoder_0_s0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (decoder_0_s0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (decoder_0_s0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (decoder_0_s0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (decoder_0_s0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (173),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (188),
		.IN_PKT_BYTE_CNT_L             (180),
		.IN_PKT_TRANS_COMPRESSED_READ  (174),
		.IN_PKT_TRANS_WRITE            (176),
		.IN_PKT_BURSTWRAP_H            (197),
		.IN_PKT_BURSTWRAP_L            (189),
		.IN_PKT_BURST_SIZE_H           (200),
		.IN_PKT_BURST_SIZE_L           (198),
		.IN_PKT_RESPONSE_STATUS_H      (231),
		.IN_PKT_RESPONSE_STATUS_L      (230),
		.IN_PKT_TRANS_EXCLUSIVE        (179),
		.IN_PKT_BURST_TYPE_H           (202),
		.IN_PKT_BURST_TYPE_L           (201),
		.IN_PKT_ORI_BURST_SIZE_L       (232),
		.IN_PKT_ORI_BURST_SIZE_H       (234),
		.IN_ST_DATA_W                  (235),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (80),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (123),
		.OUT_PKT_RESPONSE_STATUS_L     (122),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (124),
		.OUT_PKT_ORI_BURST_SIZE_H      (126),
		.OUT_ST_DATA_W                 (127),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sysid_qsys_control_slave_cmd_width_adapter (
		.clk                  (clk_100m_clk_clk),                                             //       clk.clk
		.reset                (sysid_qsys_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                            //      sink.valid
		.in_channel           (cmd_mux_src_channel),                                          //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                    //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                      //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                            //          .ready
		.in_data              (cmd_mux_src_data),                                             //          .data
		.out_endofpacket      (sysid_qsys_control_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sysid_qsys_control_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sysid_qsys_control_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sysid_qsys_control_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sysid_qsys_control_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sysid_qsys_control_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (173),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (188),
		.IN_PKT_BYTE_CNT_L             (180),
		.IN_PKT_TRANS_COMPRESSED_READ  (174),
		.IN_PKT_TRANS_WRITE            (176),
		.IN_PKT_BURSTWRAP_H            (197),
		.IN_PKT_BURSTWRAP_L            (189),
		.IN_PKT_BURST_SIZE_H           (200),
		.IN_PKT_BURST_SIZE_L           (198),
		.IN_PKT_RESPONSE_STATUS_H      (231),
		.IN_PKT_RESPONSE_STATUS_L      (230),
		.IN_PKT_TRANS_EXCLUSIVE        (179),
		.IN_PKT_BURST_TYPE_H           (202),
		.IN_PKT_BURST_TYPE_L           (201),
		.IN_PKT_ORI_BURST_SIZE_L       (232),
		.IN_PKT_ORI_BURST_SIZE_H       (234),
		.IN_ST_DATA_W                  (235),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (80),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (123),
		.OUT_PKT_RESPONSE_STATUS_L     (122),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (124),
		.OUT_PKT_ORI_BURST_SIZE_H      (126),
		.OUT_ST_DATA_W                 (127),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) datamover_0_s0_cmd_width_adapter (
		.clk                  (clk_100m_clk_clk),                                   //       clk.clk
		.reset                (sysid_qsys_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_valid             (cmd_mux_001_src_valid),                              //      sink.valid
		.in_channel           (cmd_mux_001_src_channel),                            //          .channel
		.in_startofpacket     (cmd_mux_001_src_startofpacket),                      //          .startofpacket
		.in_endofpacket       (cmd_mux_001_src_endofpacket),                        //          .endofpacket
		.in_ready             (cmd_mux_001_src_ready),                              //          .ready
		.in_data              (cmd_mux_001_src_data),                               //          .data
		.out_endofpacket      (datamover_0_s0_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (datamover_0_s0_cmd_width_adapter_src_data),          //          .data
		.out_channel          (datamover_0_s0_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (datamover_0_s0_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (datamover_0_s0_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (datamover_0_s0_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (173),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (188),
		.IN_PKT_BYTE_CNT_L             (180),
		.IN_PKT_TRANS_COMPRESSED_READ  (174),
		.IN_PKT_TRANS_WRITE            (176),
		.IN_PKT_BURSTWRAP_H            (197),
		.IN_PKT_BURSTWRAP_L            (189),
		.IN_PKT_BURST_SIZE_H           (200),
		.IN_PKT_BURST_SIZE_L           (198),
		.IN_PKT_RESPONSE_STATUS_H      (231),
		.IN_PKT_RESPONSE_STATUS_L      (230),
		.IN_PKT_TRANS_EXCLUSIVE        (179),
		.IN_PKT_BURST_TYPE_H           (202),
		.IN_PKT_BURST_TYPE_L           (201),
		.IN_PKT_ORI_BURST_SIZE_L       (232),
		.IN_PKT_ORI_BURST_SIZE_H       (234),
		.IN_ST_DATA_W                  (235),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (80),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (123),
		.OUT_PKT_RESPONSE_STATUS_L     (122),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (124),
		.OUT_PKT_ORI_BURST_SIZE_H      (126),
		.OUT_ST_DATA_W                 (127),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) encoder_0_s0_cmd_width_adapter (
		.clk                  (clk_100m_clk_clk),                                 //       clk.clk
		.reset                (sysid_qsys_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (cmd_mux_002_src_valid),                            //      sink.valid
		.in_channel           (cmd_mux_002_src_channel),                          //          .channel
		.in_startofpacket     (cmd_mux_002_src_startofpacket),                    //          .startofpacket
		.in_endofpacket       (cmd_mux_002_src_endofpacket),                      //          .endofpacket
		.in_ready             (cmd_mux_002_src_ready),                            //          .ready
		.in_data              (cmd_mux_002_src_data),                             //          .data
		.out_endofpacket      (encoder_0_s0_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (encoder_0_s0_cmd_width_adapter_src_data),          //          .data
		.out_channel          (encoder_0_s0_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (encoder_0_s0_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (encoder_0_s0_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (encoder_0_s0_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (173),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (188),
		.IN_PKT_BYTE_CNT_L             (180),
		.IN_PKT_TRANS_COMPRESSED_READ  (174),
		.IN_PKT_TRANS_WRITE            (176),
		.IN_PKT_BURSTWRAP_H            (197),
		.IN_PKT_BURSTWRAP_L            (189),
		.IN_PKT_BURST_SIZE_H           (200),
		.IN_PKT_BURST_SIZE_L           (198),
		.IN_PKT_RESPONSE_STATUS_H      (231),
		.IN_PKT_RESPONSE_STATUS_L      (230),
		.IN_PKT_TRANS_EXCLUSIVE        (179),
		.IN_PKT_BURST_TYPE_H           (202),
		.IN_PKT_BURST_TYPE_L           (201),
		.IN_PKT_ORI_BURST_SIZE_L       (232),
		.IN_PKT_ORI_BURST_SIZE_H       (234),
		.IN_ST_DATA_W                  (235),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (80),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (123),
		.OUT_PKT_RESPONSE_STATUS_L     (122),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (124),
		.OUT_PKT_ORI_BURST_SIZE_H      (126),
		.OUT_ST_DATA_W                 (127),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) decoder_0_s0_cmd_width_adapter (
		.clk                  (clk_100m_clk_clk),                                 //       clk.clk
		.reset                (sysid_qsys_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (cmd_mux_003_src_valid),                            //      sink.valid
		.in_channel           (cmd_mux_003_src_channel),                          //          .channel
		.in_startofpacket     (cmd_mux_003_src_startofpacket),                    //          .startofpacket
		.in_endofpacket       (cmd_mux_003_src_endofpacket),                      //          .endofpacket
		.in_ready             (cmd_mux_003_src_ready),                            //          .ready
		.in_data              (cmd_mux_003_src_data),                             //          .data
		.out_endofpacket      (decoder_0_s0_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (decoder_0_s0_cmd_width_adapter_src_data),          //          .data
		.out_channel          (decoder_0_s0_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (decoder_0_s0_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (decoder_0_s0_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (decoder_0_s0_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (235),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline (
		.clk               (clk_100m_clk_clk),                                                 //       cr0.clk
		.reset             (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (hps_0_h2f_axi_master_wr_limiter_cmd_src_ready),                    //     sink0.ready
		.in_valid          (hps_0_h2f_axi_master_wr_limiter_cmd_src_valid),                    //          .valid
		.in_startofpacket  (hps_0_h2f_axi_master_wr_limiter_cmd_src_startofpacket),            //          .startofpacket
		.in_endofpacket    (hps_0_h2f_axi_master_wr_limiter_cmd_src_endofpacket),              //          .endofpacket
		.in_data           (hps_0_h2f_axi_master_wr_limiter_cmd_src_data),                     //          .data
		.in_channel        (hps_0_h2f_axi_master_wr_limiter_cmd_src_channel),                  //          .channel
		.out_ready         (limiter_pipeline_source0_ready),                                   //   source0.ready
		.out_valid         (limiter_pipeline_source0_valid),                                   //          .valid
		.out_startofpacket (limiter_pipeline_source0_startofpacket),                           //          .startofpacket
		.out_endofpacket   (limiter_pipeline_source0_endofpacket),                             //          .endofpacket
		.out_data          (limiter_pipeline_source0_data),                                    //          .data
		.out_channel       (limiter_pipeline_source0_channel),                                 //          .channel
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_error          (1'b0)                                                              // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (235),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_001 (
		.clk               (clk_100m_clk_clk),                                                 //       cr0.clk
		.reset             (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_mux_src_ready),                                                //     sink0.ready
		.in_valid          (rsp_mux_src_valid),                                                //          .valid
		.in_startofpacket  (rsp_mux_src_startofpacket),                                        //          .startofpacket
		.in_endofpacket    (rsp_mux_src_endofpacket),                                          //          .endofpacket
		.in_data           (rsp_mux_src_data),                                                 //          .data
		.in_channel        (rsp_mux_src_channel),                                              //          .channel
		.out_ready         (limiter_pipeline_001_source0_ready),                               //   source0.ready
		.out_valid         (limiter_pipeline_001_source0_valid),                               //          .valid
		.out_startofpacket (limiter_pipeline_001_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (limiter_pipeline_001_source0_endofpacket),                         //          .endofpacket
		.out_data          (limiter_pipeline_001_source0_data),                                //          .data
		.out_channel       (limiter_pipeline_001_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_error          (1'b0)                                                              // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (235),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_002 (
		.clk               (clk_100m_clk_clk),                                                 //       cr0.clk
		.reset             (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (hps_0_h2f_axi_master_rd_limiter_cmd_src_ready),                    //     sink0.ready
		.in_valid          (hps_0_h2f_axi_master_rd_limiter_cmd_src_valid),                    //          .valid
		.in_startofpacket  (hps_0_h2f_axi_master_rd_limiter_cmd_src_startofpacket),            //          .startofpacket
		.in_endofpacket    (hps_0_h2f_axi_master_rd_limiter_cmd_src_endofpacket),              //          .endofpacket
		.in_data           (hps_0_h2f_axi_master_rd_limiter_cmd_src_data),                     //          .data
		.in_channel        (hps_0_h2f_axi_master_rd_limiter_cmd_src_channel),                  //          .channel
		.out_ready         (limiter_pipeline_002_source0_ready),                               //   source0.ready
		.out_valid         (limiter_pipeline_002_source0_valid),                               //          .valid
		.out_startofpacket (limiter_pipeline_002_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (limiter_pipeline_002_source0_endofpacket),                         //          .endofpacket
		.out_data          (limiter_pipeline_002_source0_data),                                //          .data
		.out_channel       (limiter_pipeline_002_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_error          (1'b0)                                                              // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (235),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_003 (
		.clk               (clk_100m_clk_clk),                                                 //       cr0.clk
		.reset             (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_mux_001_src_ready),                                            //     sink0.ready
		.in_valid          (rsp_mux_001_src_valid),                                            //          .valid
		.in_startofpacket  (rsp_mux_001_src_startofpacket),                                    //          .startofpacket
		.in_endofpacket    (rsp_mux_001_src_endofpacket),                                      //          .endofpacket
		.in_data           (rsp_mux_001_src_data),                                             //          .data
		.in_channel        (rsp_mux_001_src_channel),                                          //          .channel
		.out_ready         (limiter_pipeline_003_source0_ready),                               //   source0.ready
		.out_valid         (limiter_pipeline_003_source0_valid),                               //          .valid
		.out_startofpacket (limiter_pipeline_003_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (limiter_pipeline_003_source0_endofpacket),                         //          .endofpacket
		.out_data          (limiter_pipeline_003_source0_data),                                //          .data
		.out_channel       (limiter_pipeline_003_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_error          (1'b0)                                                              // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (127),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline (
		.clk               (clk_100m_clk_clk),                                             //       cr0.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset),                 // cr0_reset.reset
		.in_ready          (sysid_qsys_control_slave_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (sysid_qsys_control_slave_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (sysid_qsys_control_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (sysid_qsys_control_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (sysid_qsys_control_slave_burst_adapter_source0_data),          //          .data
		.in_channel        (sysid_qsys_control_slave_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_source0_ready),                                 //   source0.ready
		.out_valid         (agent_pipeline_source0_valid),                                 //          .valid
		.out_startofpacket (agent_pipeline_source0_startofpacket),                         //          .startofpacket
		.out_endofpacket   (agent_pipeline_source0_endofpacket),                           //          .endofpacket
		.out_data          (agent_pipeline_source0_data),                                  //          .data
		.out_channel       (agent_pipeline_source0_channel),                               //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (127),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_001 (
		.clk               (clk_100m_clk_clk),                                //       cr0.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.in_ready          (sysid_qsys_control_slave_agent_rp_ready),         //     sink0.ready
		.in_valid          (sysid_qsys_control_slave_agent_rp_valid),         //          .valid
		.in_startofpacket  (sysid_qsys_control_slave_agent_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (sysid_qsys_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.in_data           (sysid_qsys_control_slave_agent_rp_data),          //          .data
		.out_ready         (agent_pipeline_001_source0_ready),                //   source0.ready
		.out_valid         (agent_pipeline_001_source0_valid),                //          .valid
		.out_startofpacket (agent_pipeline_001_source0_startofpacket),        //          .startofpacket
		.out_endofpacket   (agent_pipeline_001_source0_endofpacket),          //          .endofpacket
		.out_data          (agent_pipeline_001_source0_data),                 //          .data
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.out_error         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_channel       (),                                                // (terminated)
		.in_channel        (1'b0)                                             // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (127),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_002 (
		.clk               (clk_100m_clk_clk),                                   //       cr0.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.in_ready          (datamover_0_s0_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (datamover_0_s0_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (datamover_0_s0_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (datamover_0_s0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (datamover_0_s0_burst_adapter_source0_data),          //          .data
		.in_channel        (datamover_0_s0_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_002_source0_ready),                   //   source0.ready
		.out_valid         (agent_pipeline_002_source0_valid),                   //          .valid
		.out_startofpacket (agent_pipeline_002_source0_startofpacket),           //          .startofpacket
		.out_endofpacket   (agent_pipeline_002_source0_endofpacket),             //          .endofpacket
		.out_data          (agent_pipeline_002_source0_data),                    //          .data
		.out_channel       (agent_pipeline_002_source0_channel),                 //          .channel
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_error          (1'b0)                                                // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (127),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_003 (
		.clk               (clk_100m_clk_clk),                             //       cr0.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (datamover_0_s0_agent_rp_ready),                //     sink0.ready
		.in_valid          (datamover_0_s0_agent_rp_valid),                //          .valid
		.in_startofpacket  (datamover_0_s0_agent_rp_startofpacket),        //          .startofpacket
		.in_endofpacket    (datamover_0_s0_agent_rp_endofpacket),          //          .endofpacket
		.in_data           (datamover_0_s0_agent_rp_data),                 //          .data
		.out_ready         (agent_pipeline_003_source0_ready),             //   source0.ready
		.out_valid         (agent_pipeline_003_source0_valid),             //          .valid
		.out_startofpacket (agent_pipeline_003_source0_startofpacket),     //          .startofpacket
		.out_endofpacket   (agent_pipeline_003_source0_endofpacket),       //          .endofpacket
		.out_data          (agent_pipeline_003_source0_data),              //          .data
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.out_error         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_channel       (),                                             // (terminated)
		.in_channel        (1'b0)                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (127),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_004 (
		.clk               (clk_100m_clk_clk),                                 //       cr0.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.in_ready          (encoder_0_s0_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (encoder_0_s0_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (encoder_0_s0_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (encoder_0_s0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (encoder_0_s0_burst_adapter_source0_data),          //          .data
		.in_channel        (encoder_0_s0_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_004_source0_ready),                 //   source0.ready
		.out_valid         (agent_pipeline_004_source0_valid),                 //          .valid
		.out_startofpacket (agent_pipeline_004_source0_startofpacket),         //          .startofpacket
		.out_endofpacket   (agent_pipeline_004_source0_endofpacket),           //          .endofpacket
		.out_data          (agent_pipeline_004_source0_data),                  //          .data
		.out_channel       (agent_pipeline_004_source0_channel),               //          .channel
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_error          (1'b0)                                              // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (127),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_005 (
		.clk               (clk_100m_clk_clk),                             //       cr0.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (encoder_0_s0_agent_rp_ready),                  //     sink0.ready
		.in_valid          (encoder_0_s0_agent_rp_valid),                  //          .valid
		.in_startofpacket  (encoder_0_s0_agent_rp_startofpacket),          //          .startofpacket
		.in_endofpacket    (encoder_0_s0_agent_rp_endofpacket),            //          .endofpacket
		.in_data           (encoder_0_s0_agent_rp_data),                   //          .data
		.out_ready         (agent_pipeline_005_source0_ready),             //   source0.ready
		.out_valid         (agent_pipeline_005_source0_valid),             //          .valid
		.out_startofpacket (agent_pipeline_005_source0_startofpacket),     //          .startofpacket
		.out_endofpacket   (agent_pipeline_005_source0_endofpacket),       //          .endofpacket
		.out_data          (agent_pipeline_005_source0_data),              //          .data
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.out_error         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_channel       (),                                             // (terminated)
		.in_channel        (1'b0)                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (127),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_006 (
		.clk               (clk_100m_clk_clk),                                 //       cr0.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.in_ready          (decoder_0_s0_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (decoder_0_s0_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (decoder_0_s0_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (decoder_0_s0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (decoder_0_s0_burst_adapter_source0_data),          //          .data
		.in_channel        (decoder_0_s0_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_006_source0_ready),                 //   source0.ready
		.out_valid         (agent_pipeline_006_source0_valid),                 //          .valid
		.out_startofpacket (agent_pipeline_006_source0_startofpacket),         //          .startofpacket
		.out_endofpacket   (agent_pipeline_006_source0_endofpacket),           //          .endofpacket
		.out_data          (agent_pipeline_006_source0_data),                  //          .data
		.out_channel       (agent_pipeline_006_source0_channel),               //          .channel
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_error          (1'b0)                                              // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (127),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_007 (
		.clk               (clk_100m_clk_clk),                             //       cr0.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (decoder_0_s0_agent_rp_ready),                  //     sink0.ready
		.in_valid          (decoder_0_s0_agent_rp_valid),                  //          .valid
		.in_startofpacket  (decoder_0_s0_agent_rp_startofpacket),          //          .startofpacket
		.in_endofpacket    (decoder_0_s0_agent_rp_endofpacket),            //          .endofpacket
		.in_data           (decoder_0_s0_agent_rp_data),                   //          .data
		.out_ready         (agent_pipeline_007_source0_ready),             //   source0.ready
		.out_valid         (agent_pipeline_007_source0_valid),             //          .valid
		.out_startofpacket (agent_pipeline_007_source0_startofpacket),     //          .startofpacket
		.out_endofpacket   (agent_pipeline_007_source0_endofpacket),       //          .endofpacket
		.out_data          (agent_pipeline_007_source0_data),              //          .data
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.out_error         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_channel       (),                                             // (terminated)
		.in_channel        (1'b0)                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (235),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline (
		.clk               (clk_100m_clk_clk),                             //       cr0.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src0_ready),                         //     sink0.ready
		.in_valid          (cmd_demux_src0_valid),                         //          .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                 //          .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                   //          .endofpacket
		.in_data           (cmd_demux_src0_data),                          //          .data
		.in_channel        (cmd_demux_src0_channel),                       //          .channel
		.out_ready         (mux_pipeline_source0_ready),                   //   source0.ready
		.out_valid         (mux_pipeline_source0_valid),                   //          .valid
		.out_startofpacket (mux_pipeline_source0_startofpacket),           //          .startofpacket
		.out_endofpacket   (mux_pipeline_source0_endofpacket),             //          .endofpacket
		.out_data          (mux_pipeline_source0_data),                    //          .data
		.out_channel       (mux_pipeline_source0_channel),                 //          .channel
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.out_error         (),                                             // (terminated)
		.in_error          (1'b0)                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (235),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_001 (
		.clk               (clk_100m_clk_clk),                             //       cr0.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src0_ready),                     //     sink0.ready
		.in_valid          (cmd_demux_001_src0_valid),                     //          .valid
		.in_startofpacket  (cmd_demux_001_src0_startofpacket),             //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src0_endofpacket),               //          .endofpacket
		.in_data           (cmd_demux_001_src0_data),                      //          .data
		.in_channel        (cmd_demux_001_src0_channel),                   //          .channel
		.out_ready         (mux_pipeline_001_source0_ready),               //   source0.ready
		.out_valid         (mux_pipeline_001_source0_valid),               //          .valid
		.out_startofpacket (mux_pipeline_001_source0_startofpacket),       //          .startofpacket
		.out_endofpacket   (mux_pipeline_001_source0_endofpacket),         //          .endofpacket
		.out_data          (mux_pipeline_001_source0_data),                //          .data
		.out_channel       (mux_pipeline_001_source0_channel),             //          .channel
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.out_error         (),                                             // (terminated)
		.in_error          (1'b0)                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (235),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_002 (
		.clk               (clk_100m_clk_clk),                             //       cr0.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src1_ready),                         //     sink0.ready
		.in_valid          (cmd_demux_src1_valid),                         //          .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),                 //          .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),                   //          .endofpacket
		.in_data           (cmd_demux_src1_data),                          //          .data
		.in_channel        (cmd_demux_src1_channel),                       //          .channel
		.out_ready         (mux_pipeline_002_source0_ready),               //   source0.ready
		.out_valid         (mux_pipeline_002_source0_valid),               //          .valid
		.out_startofpacket (mux_pipeline_002_source0_startofpacket),       //          .startofpacket
		.out_endofpacket   (mux_pipeline_002_source0_endofpacket),         //          .endofpacket
		.out_data          (mux_pipeline_002_source0_data),                //          .data
		.out_channel       (mux_pipeline_002_source0_channel),             //          .channel
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.out_error         (),                                             // (terminated)
		.in_error          (1'b0)                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (235),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_003 (
		.clk               (clk_100m_clk_clk),                             //       cr0.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src1_ready),                     //     sink0.ready
		.in_valid          (cmd_demux_001_src1_valid),                     //          .valid
		.in_startofpacket  (cmd_demux_001_src1_startofpacket),             //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src1_endofpacket),               //          .endofpacket
		.in_data           (cmd_demux_001_src1_data),                      //          .data
		.in_channel        (cmd_demux_001_src1_channel),                   //          .channel
		.out_ready         (mux_pipeline_003_source0_ready),               //   source0.ready
		.out_valid         (mux_pipeline_003_source0_valid),               //          .valid
		.out_startofpacket (mux_pipeline_003_source0_startofpacket),       //          .startofpacket
		.out_endofpacket   (mux_pipeline_003_source0_endofpacket),         //          .endofpacket
		.out_data          (mux_pipeline_003_source0_data),                //          .data
		.out_channel       (mux_pipeline_003_source0_channel),             //          .channel
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.out_error         (),                                             // (terminated)
		.in_error          (1'b0)                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (235),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_004 (
		.clk               (clk_100m_clk_clk),                             //       cr0.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src2_ready),                         //     sink0.ready
		.in_valid          (cmd_demux_src2_valid),                         //          .valid
		.in_startofpacket  (cmd_demux_src2_startofpacket),                 //          .startofpacket
		.in_endofpacket    (cmd_demux_src2_endofpacket),                   //          .endofpacket
		.in_data           (cmd_demux_src2_data),                          //          .data
		.in_channel        (cmd_demux_src2_channel),                       //          .channel
		.out_ready         (mux_pipeline_004_source0_ready),               //   source0.ready
		.out_valid         (mux_pipeline_004_source0_valid),               //          .valid
		.out_startofpacket (mux_pipeline_004_source0_startofpacket),       //          .startofpacket
		.out_endofpacket   (mux_pipeline_004_source0_endofpacket),         //          .endofpacket
		.out_data          (mux_pipeline_004_source0_data),                //          .data
		.out_channel       (mux_pipeline_004_source0_channel),             //          .channel
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.out_error         (),                                             // (terminated)
		.in_error          (1'b0)                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (235),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_005 (
		.clk               (clk_100m_clk_clk),                             //       cr0.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src2_ready),                     //     sink0.ready
		.in_valid          (cmd_demux_001_src2_valid),                     //          .valid
		.in_startofpacket  (cmd_demux_001_src2_startofpacket),             //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src2_endofpacket),               //          .endofpacket
		.in_data           (cmd_demux_001_src2_data),                      //          .data
		.in_channel        (cmd_demux_001_src2_channel),                   //          .channel
		.out_ready         (mux_pipeline_005_source0_ready),               //   source0.ready
		.out_valid         (mux_pipeline_005_source0_valid),               //          .valid
		.out_startofpacket (mux_pipeline_005_source0_startofpacket),       //          .startofpacket
		.out_endofpacket   (mux_pipeline_005_source0_endofpacket),         //          .endofpacket
		.out_data          (mux_pipeline_005_source0_data),                //          .data
		.out_channel       (mux_pipeline_005_source0_channel),             //          .channel
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.out_error         (),                                             // (terminated)
		.in_error          (1'b0)                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (235),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_006 (
		.clk               (clk_100m_clk_clk),                             //       cr0.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src3_ready),                         //     sink0.ready
		.in_valid          (cmd_demux_src3_valid),                         //          .valid
		.in_startofpacket  (cmd_demux_src3_startofpacket),                 //          .startofpacket
		.in_endofpacket    (cmd_demux_src3_endofpacket),                   //          .endofpacket
		.in_data           (cmd_demux_src3_data),                          //          .data
		.in_channel        (cmd_demux_src3_channel),                       //          .channel
		.out_ready         (mux_pipeline_006_source0_ready),               //   source0.ready
		.out_valid         (mux_pipeline_006_source0_valid),               //          .valid
		.out_startofpacket (mux_pipeline_006_source0_startofpacket),       //          .startofpacket
		.out_endofpacket   (mux_pipeline_006_source0_endofpacket),         //          .endofpacket
		.out_data          (mux_pipeline_006_source0_data),                //          .data
		.out_channel       (mux_pipeline_006_source0_channel),             //          .channel
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.out_error         (),                                             // (terminated)
		.in_error          (1'b0)                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (235),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_007 (
		.clk               (clk_100m_clk_clk),                             //       cr0.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src3_ready),                     //     sink0.ready
		.in_valid          (cmd_demux_001_src3_valid),                     //          .valid
		.in_startofpacket  (cmd_demux_001_src3_startofpacket),             //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src3_endofpacket),               //          .endofpacket
		.in_data           (cmd_demux_001_src3_data),                      //          .data
		.in_channel        (cmd_demux_001_src3_channel),                   //          .channel
		.out_ready         (mux_pipeline_007_source0_ready),               //   source0.ready
		.out_valid         (mux_pipeline_007_source0_valid),               //          .valid
		.out_startofpacket (mux_pipeline_007_source0_startofpacket),       //          .startofpacket
		.out_endofpacket   (mux_pipeline_007_source0_endofpacket),         //          .endofpacket
		.out_data          (mux_pipeline_007_source0_data),                //          .data
		.out_channel       (mux_pipeline_007_source0_channel),             //          .channel
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.out_error         (),                                             // (terminated)
		.in_error          (1'b0)                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (235),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_008 (
		.clk               (clk_100m_clk_clk),                                                 //       cr0.clk
		.reset             (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                             //     sink0.ready
		.in_valid          (rsp_demux_src0_valid),                                             //          .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                                     //          .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                                       //          .endofpacket
		.in_data           (rsp_demux_src0_data),                                              //          .data
		.in_channel        (rsp_demux_src0_channel),                                           //          .channel
		.out_ready         (mux_pipeline_008_source0_ready),                                   //   source0.ready
		.out_valid         (mux_pipeline_008_source0_valid),                                   //          .valid
		.out_startofpacket (mux_pipeline_008_source0_startofpacket),                           //          .startofpacket
		.out_endofpacket   (mux_pipeline_008_source0_endofpacket),                             //          .endofpacket
		.out_data          (mux_pipeline_008_source0_data),                                    //          .data
		.out_channel       (mux_pipeline_008_source0_channel),                                 //          .channel
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_error          (1'b0)                                                              // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (235),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_009 (
		.clk               (clk_100m_clk_clk),                                                 //       cr0.clk
		.reset             (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                                         //     sink0.ready
		.in_valid          (rsp_demux_001_src0_valid),                                         //          .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),                                 //          .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                                   //          .endofpacket
		.in_data           (rsp_demux_001_src0_data),                                          //          .data
		.in_channel        (rsp_demux_001_src0_channel),                                       //          .channel
		.out_ready         (mux_pipeline_009_source0_ready),                                   //   source0.ready
		.out_valid         (mux_pipeline_009_source0_valid),                                   //          .valid
		.out_startofpacket (mux_pipeline_009_source0_startofpacket),                           //          .startofpacket
		.out_endofpacket   (mux_pipeline_009_source0_endofpacket),                             //          .endofpacket
		.out_data          (mux_pipeline_009_source0_data),                                    //          .data
		.out_channel       (mux_pipeline_009_source0_channel),                                 //          .channel
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_error          (1'b0)                                                              // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (235),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_010 (
		.clk               (clk_100m_clk_clk),                                                 //       cr0.clk
		.reset             (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_002_src0_ready),                                         //     sink0.ready
		.in_valid          (rsp_demux_002_src0_valid),                                         //          .valid
		.in_startofpacket  (rsp_demux_002_src0_startofpacket),                                 //          .startofpacket
		.in_endofpacket    (rsp_demux_002_src0_endofpacket),                                   //          .endofpacket
		.in_data           (rsp_demux_002_src0_data),                                          //          .data
		.in_channel        (rsp_demux_002_src0_channel),                                       //          .channel
		.out_ready         (mux_pipeline_010_source0_ready),                                   //   source0.ready
		.out_valid         (mux_pipeline_010_source0_valid),                                   //          .valid
		.out_startofpacket (mux_pipeline_010_source0_startofpacket),                           //          .startofpacket
		.out_endofpacket   (mux_pipeline_010_source0_endofpacket),                             //          .endofpacket
		.out_data          (mux_pipeline_010_source0_data),                                    //          .data
		.out_channel       (mux_pipeline_010_source0_channel),                                 //          .channel
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_error          (1'b0)                                                              // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (235),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_011 (
		.clk               (clk_100m_clk_clk),                                                 //       cr0.clk
		.reset             (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_003_src0_ready),                                         //     sink0.ready
		.in_valid          (rsp_demux_003_src0_valid),                                         //          .valid
		.in_startofpacket  (rsp_demux_003_src0_startofpacket),                                 //          .startofpacket
		.in_endofpacket    (rsp_demux_003_src0_endofpacket),                                   //          .endofpacket
		.in_data           (rsp_demux_003_src0_data),                                          //          .data
		.in_channel        (rsp_demux_003_src0_channel),                                       //          .channel
		.out_ready         (mux_pipeline_011_source0_ready),                                   //   source0.ready
		.out_valid         (mux_pipeline_011_source0_valid),                                   //          .valid
		.out_startofpacket (mux_pipeline_011_source0_startofpacket),                           //          .startofpacket
		.out_endofpacket   (mux_pipeline_011_source0_endofpacket),                             //          .endofpacket
		.out_data          (mux_pipeline_011_source0_data),                                    //          .data
		.out_channel       (mux_pipeline_011_source0_channel),                                 //          .channel
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_error          (1'b0)                                                              // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (235),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_012 (
		.clk               (clk_100m_clk_clk),                                                 //       cr0.clk
		.reset             (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_src1_ready),                                             //     sink0.ready
		.in_valid          (rsp_demux_src1_valid),                                             //          .valid
		.in_startofpacket  (rsp_demux_src1_startofpacket),                                     //          .startofpacket
		.in_endofpacket    (rsp_demux_src1_endofpacket),                                       //          .endofpacket
		.in_data           (rsp_demux_src1_data),                                              //          .data
		.in_channel        (rsp_demux_src1_channel),                                           //          .channel
		.out_ready         (mux_pipeline_012_source0_ready),                                   //   source0.ready
		.out_valid         (mux_pipeline_012_source0_valid),                                   //          .valid
		.out_startofpacket (mux_pipeline_012_source0_startofpacket),                           //          .startofpacket
		.out_endofpacket   (mux_pipeline_012_source0_endofpacket),                             //          .endofpacket
		.out_data          (mux_pipeline_012_source0_data),                                    //          .data
		.out_channel       (mux_pipeline_012_source0_channel),                                 //          .channel
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_error          (1'b0)                                                              // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (235),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_013 (
		.clk               (clk_100m_clk_clk),                                                 //       cr0.clk
		.reset             (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_001_src1_ready),                                         //     sink0.ready
		.in_valid          (rsp_demux_001_src1_valid),                                         //          .valid
		.in_startofpacket  (rsp_demux_001_src1_startofpacket),                                 //          .startofpacket
		.in_endofpacket    (rsp_demux_001_src1_endofpacket),                                   //          .endofpacket
		.in_data           (rsp_demux_001_src1_data),                                          //          .data
		.in_channel        (rsp_demux_001_src1_channel),                                       //          .channel
		.out_ready         (mux_pipeline_013_source0_ready),                                   //   source0.ready
		.out_valid         (mux_pipeline_013_source0_valid),                                   //          .valid
		.out_startofpacket (mux_pipeline_013_source0_startofpacket),                           //          .startofpacket
		.out_endofpacket   (mux_pipeline_013_source0_endofpacket),                             //          .endofpacket
		.out_data          (mux_pipeline_013_source0_data),                                    //          .data
		.out_channel       (mux_pipeline_013_source0_channel),                                 //          .channel
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_error          (1'b0)                                                              // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (235),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_014 (
		.clk               (clk_100m_clk_clk),                                                 //       cr0.clk
		.reset             (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_002_src1_ready),                                         //     sink0.ready
		.in_valid          (rsp_demux_002_src1_valid),                                         //          .valid
		.in_startofpacket  (rsp_demux_002_src1_startofpacket),                                 //          .startofpacket
		.in_endofpacket    (rsp_demux_002_src1_endofpacket),                                   //          .endofpacket
		.in_data           (rsp_demux_002_src1_data),                                          //          .data
		.in_channel        (rsp_demux_002_src1_channel),                                       //          .channel
		.out_ready         (mux_pipeline_014_source0_ready),                                   //   source0.ready
		.out_valid         (mux_pipeline_014_source0_valid),                                   //          .valid
		.out_startofpacket (mux_pipeline_014_source0_startofpacket),                           //          .startofpacket
		.out_endofpacket   (mux_pipeline_014_source0_endofpacket),                             //          .endofpacket
		.out_data          (mux_pipeline_014_source0_data),                                    //          .data
		.out_channel       (mux_pipeline_014_source0_channel),                                 //          .channel
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_error          (1'b0)                                                              // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (235),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_015 (
		.clk               (clk_100m_clk_clk),                                                 //       cr0.clk
		.reset             (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_003_src1_ready),                                         //     sink0.ready
		.in_valid          (rsp_demux_003_src1_valid),                                         //          .valid
		.in_startofpacket  (rsp_demux_003_src1_startofpacket),                                 //          .startofpacket
		.in_endofpacket    (rsp_demux_003_src1_endofpacket),                                   //          .endofpacket
		.in_data           (rsp_demux_003_src1_data),                                          //          .data
		.in_channel        (rsp_demux_003_src1_channel),                                       //          .channel
		.out_ready         (mux_pipeline_015_source0_ready),                                   //   source0.ready
		.out_valid         (mux_pipeline_015_source0_valid),                                   //          .valid
		.out_startofpacket (mux_pipeline_015_source0_startofpacket),                           //          .startofpacket
		.out_endofpacket   (mux_pipeline_015_source0_endofpacket),                             //          .endofpacket
		.out_data          (mux_pipeline_015_source0_data),                                    //          .data
		.out_channel       (mux_pipeline_015_source0_channel),                                 //          .channel
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_error          (1'b0)                                                              // (terminated)
	);

	soc_system_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_100m_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (sysid_qsys_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (sysid_qsys_control_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (sysid_qsys_control_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (sysid_qsys_control_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                        //         .error
	);

	soc_system_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_100m_clk_clk),                             // in_clk_0.clk
		.in_rst_0_reset (sysid_qsys_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (datamover_0_s0_agent_rdata_fifo_out_data),     //     in_0.data
		.in_0_valid     (datamover_0_s0_agent_rdata_fifo_out_valid),    //         .valid
		.in_0_ready     (datamover_0_s0_agent_rdata_fifo_out_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)             //         .error
	);

	soc_system_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_100m_clk_clk),                             // in_clk_0.clk
		.in_rst_0_reset (sysid_qsys_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (encoder_0_s0_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (encoder_0_s0_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (encoder_0_s0_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)             //         .error
	);

	soc_system_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_100m_clk_clk),                             // in_clk_0.clk
		.in_rst_0_reset (sysid_qsys_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (decoder_0_s0_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (decoder_0_s0_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (decoder_0_s0_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)             //         .error
	);

endmodule
